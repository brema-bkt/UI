{"ast":null,"code":"import $tyW6A$react, { useMemo as $tyW6A$useMemo, useRef as $tyW6A$useRef } from \"react\";\n\nfunction $c1d7fb2ec91bae71$var$Item(props) {\n  return null;\n}\n\n$c1d7fb2ec91bae71$var$Item.getCollectionNode = function* getCollectionNode(props, context) {\n  let {\n    childItems: childItems,\n    title: title,\n    children: children\n  } = props;\n  let rendered = props.title || props.children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'] || ''; // suppressTextValueWarning is used in components like Tabs, which don't have type to select support.\n\n  if (!textValue && !(context === null || context === void 0 ? void 0 : context.suppressTextValueWarning)) console.warn('<Item> with non-plain text contents is unsupported by type to select for accessibility. Please add a `textValue` prop.');\n  yield {\n    type: 'item',\n    props: props,\n    rendered: rendered,\n    textValue: textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: $c1d7fb2ec91bae71$var$hasChildItems(props),\n\n    *childNodes() {\n      if (childItems) for (let child1 of childItems) yield {\n        type: 'item',\n        value: child1\n      };else if (title) {\n        let items = [];\n        $tyW6A$react.Children.forEach(children, child => {\n          items.push({\n            type: 'item',\n            element: child\n          });\n        });\n        yield* items;\n      }\n    }\n\n  };\n};\n\nfunction $c1d7fb2ec91bae71$var$hasChildItems(props) {\n  if (props.hasChildItems != null) return props.hasChildItems;\n  if (props.childItems) return true;\n  if (props.title && $tyW6A$react.Children.count(props.children) > 0) return true;\n  return false;\n} // We don't want getCollectionNode to show up in the type definition\n\n\nlet $c1d7fb2ec91bae71$export$6d08773d2e66f8f2 = $c1d7fb2ec91bae71$var$Item;\n\nfunction $9fc4852771d079eb$var$Section(props) {\n  return null;\n}\n\n$9fc4852771d079eb$var$Section.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children,\n    title: title,\n    items: items1\n  } = props;\n  yield {\n    type: 'section',\n    hasChildNodes: true,\n    rendered: title,\n    'aria-label': props['aria-label'],\n\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items1) throw new Error('props.children was a function but props.items is missing');\n\n        for (let item of items1) yield {\n          type: 'item',\n          value: item,\n          renderer: children\n        };\n      } else {\n        let items = [];\n        $tyW6A$react.Children.forEach(children, child => {\n          items.push({\n            type: 'item',\n            element: child\n          });\n        });\n        yield* items;\n      }\n    }\n\n  };\n}; // We don't want getCollectionNode to show up in the type definition\n\n\nlet $9fc4852771d079eb$export$6e2c8f0811a474ce = $9fc4852771d079eb$var$Section;\n\nclass $eb2240fc39a57fa5$export$bf788dd355e3a401 {\n  build(props, context) {\n    this.context = context;\n    return $eb2240fc39a57fa5$var$iterable(() => this.iterateCollection(props));\n  }\n\n  *iterateCollection(props) {\n    let {\n      children: children,\n      items: items\n    } = props;\n\n    if (typeof children === 'function') {\n      if (!items) throw new Error('props.children was a function but props.items is missing');\n\n      for (let item of props.items) yield* this.getFullNode({\n        value: item\n      }, {\n        renderer: children\n      });\n    } else {\n      let items = [];\n      $tyW6A$react.Children.forEach(children, child => {\n        items.push(child);\n      });\n      let index = 0;\n\n      for (let item of items) {\n        let nodes = this.getFullNode({\n          element: item,\n          index: index\n        }, {});\n\n        for (let node of nodes) {\n          index++;\n          yield node;\n        }\n      }\n    }\n  }\n\n  getKey(item, partialNode, state, parentKey) {\n    if (item.key != null) return item.key;\n    if (partialNode.type === 'cell' && partialNode.key != null) return `${parentKey}${partialNode.key}`;\n    let v = partialNode.value;\n\n    if (v != null) {\n      var _key;\n\n      let key = (_key = v.key) !== null && _key !== void 0 ? _key : v.id;\n      if (key == null) throw new Error('No key found for item');\n      return key;\n    }\n\n    return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;\n  }\n\n  getChildState(state, partialNode) {\n    return {\n      renderer: partialNode.renderer || state.renderer\n    };\n  }\n\n  *getFullNode(partialNode, state, parentKey, parentNode) {\n    // If there's a value instead of an element on the node, and a parent renderer function is available,\n    // use it to render an element for the value.\n    let element = partialNode.element;\n\n    if (!element && partialNode.value && state && state.renderer) {\n      let cached = this.cache.get(partialNode.value);\n\n      if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {\n        cached.index = partialNode.index;\n        cached.parentKey = parentNode ? parentNode.key : null;\n        yield cached;\n        return;\n      }\n\n      element = state.renderer(partialNode.value);\n    } // If there's an element with a getCollectionNode function on its type, then it's a supported component.\n    // Call this function to get a partial node, and recursively build a full node from there.\n\n\n    if ($tyW6A$react.isValidElement(element)) {\n      let type = element.type;\n\n      if (typeof type !== 'function' && typeof type.getCollectionNode !== 'function') {\n        let name = typeof element.type === 'function' ? element.type.name : element.type;\n        throw new Error(`Unknown element <${name}> in collection.`);\n      }\n\n      let childNodes = type.getCollectionNode(element.props, this.context);\n      let index = partialNode.index;\n      let result = childNodes.next();\n\n      while (!result.done && result.value) {\n        let childNode = result.value;\n        partialNode.index = index;\n        let nodeKey = childNode.key;\n        if (!nodeKey) nodeKey = childNode.element ? null : this.getKey(element, partialNode, state, parentKey);\n        let nodes = this.getFullNode({ ...childNode,\n          key: nodeKey,\n          index: index,\n          wrapper: $eb2240fc39a57fa5$var$compose(partialNode.wrapper, childNode.wrapper)\n        }, this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);\n        let children = [...nodes];\n\n        for (let node of children) {\n          // Cache the node based on its value\n          node.value = childNode.value || partialNode.value;\n          if (node.value) this.cache.set(node.value, node); // The partial node may have specified a type for the child in order to specify a constraint.\n          // Verify that the full node that was built recursively matches this type.\n\n          if (partialNode.type && node.type !== partialNode.type) throw new Error(`Unsupported type <${$eb2240fc39a57fa5$var$capitalize(node.type)}> in <${$eb2240fc39a57fa5$var$capitalize(parentNode.type)}>. Only <${$eb2240fc39a57fa5$var$capitalize(partialNode.type)}> is supported.`);\n          index++;\n          yield node;\n        }\n\n        result = childNodes.next(children);\n      }\n\n      return;\n    } // Ignore invalid elements\n\n\n    if (partialNode.key == null) return; // Create full node\n\n    let builder = this;\n    let node = {\n      type: partialNode.type,\n      props: partialNode.props,\n      key: partialNode.key,\n      parentKey: parentNode ? parentNode.key : null,\n      value: partialNode.value,\n      level: parentNode ? parentNode.level + 1 : 0,\n      index: partialNode.index,\n      rendered: partialNode.rendered,\n      textValue: partialNode.textValue,\n      'aria-label': partialNode['aria-label'],\n      wrapper: partialNode.wrapper,\n      shouldInvalidate: partialNode.shouldInvalidate,\n      hasChildNodes: partialNode.hasChildNodes,\n      childNodes: $eb2240fc39a57fa5$var$iterable(function* () {\n        if (!partialNode.hasChildNodes) return;\n        let index = 0;\n\n        for (let child of partialNode.childNodes()) {\n          // Ensure child keys are globally unique by prepending the parent node's key\n          if (child.key != null) // TODO: Remove this line entirely and enforce that users always provide unique keys.\n            // Currently this line will have issues when a parent has a key `a` and a child with key `bc`\n            // but another parent has key `ab` and its child has a key `c`. The combined keys would result in both\n            // children having a key of `abc`.\n            child.key = `${node.key}${child.key}`;\n          child.index = index;\n          let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);\n\n          for (let node1 of nodes) {\n            index++;\n            yield node1;\n          }\n        }\n      })\n    };\n    yield node;\n  }\n\n  constructor() {\n    this.cache = new WeakMap();\n  }\n\n} // Wraps an iterator function as an iterable object, and caches the results.\n\n\nfunction $eb2240fc39a57fa5$var$iterable(iterator) {\n  let cache = [];\n  let iterable = null;\n  return {\n    *[Symbol.iterator]() {\n      for (let item of cache) yield item;\n\n      if (!iterable) iterable = iterator();\n\n      for (let item1 of iterable) {\n        cache.push(item1);\n        yield item1;\n      }\n    }\n\n  };\n}\n\nfunction $eb2240fc39a57fa5$var$compose(outer, inner) {\n  if (outer && inner) return element => outer(inner(element));\n  if (outer) return outer;\n  if (inner) return inner;\n}\n\nfunction $eb2240fc39a57fa5$var$capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1);\n}\n\nfunction $7613b1592d41b092$export$6cd28814d92fa9c9(props, factory, context, invalidators = []) {\n  let builder = $tyW6A$useMemo(() => new $eb2240fc39a57fa5$export$bf788dd355e3a401(), []);\n  let prev = $tyW6A$useRef(null);\n  return $tyW6A$useMemo(() => {\n    let nodes = builder.build(props, context);\n    prev.current = factory(nodes, prev.current);\n    return prev.current; // Don't invalidate when any prop changes, just the two we care about.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [builder, props.children, props.items, context, ...invalidators]);\n}\n\nconst $453cc9f0df89c0a5$var$cache = new WeakMap();\n\nfunction $453cc9f0df89c0a5$export$77d5aafae4e095b2(collection) {\n  let count = $453cc9f0df89c0a5$var$cache.get(collection);\n  if (count != null) return count;\n  count = 0;\n\n  for (let item of collection) if (item.type === 'section') count += $453cc9f0df89c0a5$export$77d5aafae4e095b2(item.childNodes);else count++;\n\n  $453cc9f0df89c0a5$var$cache.set(collection, count);\n  return count;\n}\n\nexport { $c1d7fb2ec91bae71$export$6d08773d2e66f8f2 as Item, $9fc4852771d079eb$export$6e2c8f0811a474ce as Section, $7613b1592d41b092$export$6cd28814d92fa9c9 as useCollection, $453cc9f0df89c0a5$export$77d5aafae4e095b2 as getItemCount };","map":{"version":3,"sources":["packages/@react-stately/collections/src/Item.ts","packages/@react-stately/collections/src/Section.ts","packages/@react-stately/collections/src/useCollection.ts","packages/@react-stately/collections/src/CollectionBuilder.ts","packages/@react-stately/collections/src/getItemCount.ts"],"names":[],"mappings":";;SAgBS,0B,CAAQ,K,EAAmC;AAClD,SAAO,IAAP;AACD;;AAED,0BAAI,CAAC,iBAAL,GAAyB,UAAU,iBAAV,CAA+B,KAA/B,EAAoD,OAApD,EAA6F;AACpH,MAAI;AAAC,IAAA,UAAA,EAAA,UAAD;AAAW,IAAA,KAAA,EAAE,KAAb;AAAkB,IAAA,QAAA,EAAE;AAApB,MAAgC,KAApC;AAEA,MAAI,QAAQ,GAAG,KAAK,CAAC,KAAN,IAAe,KAAK,CAAC,QAApC;AACA,MAAI,SAAS,GAAG,KAAK,CAAC,SAAN,KAAoB,OAAO,QAAP,KAAoB,QAApB,GAA+B,QAA/B,GAA0C,EAA9D,KAAqE,KAAK,CAAC,YAAD,CAA1E,IAA4F,EAA5G,CAJoH,CAMpH;;AACA,MAAE,CAAG,SAAH,IAAY,EAAK,OAAO,KAAA,IAAP,IAAA,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,wBAAd,CAAd,EACE,OAAO,CAAC,IAAR,CAAa,wHAAb;QAGI;AACJ,IAAA,IAAI,EAAE,MADF;AAEJ,IAAA,KAAK,EAAE,KAFH;cAGJ,QAHI;eAIJ,SAJI;AAKJ,kBAAc,KAAK,CAAC,YAAD,CALf;AAMJ,IAAA,aAAa,EAAE,mCAAa,CAAC,KAAD,CANxB;;KAOH,U,GAAa;AACZ,UAAI,UAAJ,EACE,KAAK,IAAI,MAAT,IAAkB,UAAlB,EAA4B,MACpB;AACJ,QAAA,IAAI,EAAE,MADF;AAEJ,QAAA,KAAK,EAAE;AAFH,OADoB,CAD9B,KAOO,IAAI,KAAJ,EAAW;AAChB,YAAI,KAAK,GAAqB,EAA9B;AACA,QAAA,YAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,QAAvB,EAAiC,KAAF,IAAW;AACxC,UAAA,KAAK,CAAC,IAAN,CAAW;AACT,YAAA,IAAI,EAAE,MADG;AAET,YAAA,OAAO,EAAE;AAFA,WAAX;AAID,SALD;eAOO,K;AACR;AACF;;AA1BG,G;AA4BP,CAvCD;;SAyCS,mC,CAAiB,K,EAAqB;AAC7C,MAAI,KAAK,CAAC,aAAN,IAAuB,IAA3B,EACE,OAAO,KAAK,CAAC,aAAb;AAGF,MAAI,KAAK,CAAC,UAAV,EACE,OAAO,IAAP;AAGF,MAAI,KAAK,CAAC,KAAN,IAAe,YAAK,CAAC,QAAN,CAAe,KAAf,CAAqB,KAAK,CAAC,QAA3B,IAAuC,CAA1D,EACE,OAAO,IAAP;AAGF,SAAO,KAAP;AACD,C,CAED;;;AACA,IAAI,yCAAK,GAAG,0BAAZ;;SC9DS,6B,CAAW,K,EAAsC;AACxD,SAAO,IAAP;AACD;;AAED,6BAAO,CAAC,iBAAR,GAA4B,UAAU,iBAAV,CAA+B,KAA/B,EAAkF;AAC5G,MAAI;AAAC,IAAA,QAAA,EAAA,QAAD;AAAS,IAAA,KAAA,EAAE,KAAX;AAAgB,IAAA,KAAA,EAAE;AAAlB,MAA2B,KAA/B;QACM;AACJ,IAAA,IAAI,EAAE,SADF;AAEJ,IAAA,aAAa,EAAE,IAFX;AAGJ,IAAA,QAAQ,EAAE,KAHN;AAIJ,kBAAc,KAAK,CAAC,YAAD,CAJf;;KAKH,U,GAAa;AACZ,UAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,YAAE,CAAG,MAAL,EACE,MAAM,IAAI,KAAJ,CAAU,0DAAV,CAAN;;AAGF,aAAK,IAAI,IAAT,IAAiB,MAAjB,EAAsB,MACd;AACJ,UAAA,IAAI,EAAE,MADF;AAEJ,UAAA,KAAK,EAAE,IAFH;AAGJ,UAAA,QAAQ,EAAE;AAHN,SADc;AAOvB,OAZD,MAYO;AACL,YAAI,KAAK,GAAqB,EAA9B;AACA,QAAA,YAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,QAAvB,EAAiC,KAAF,IAAW;AACxC,UAAA,KAAK,CAAC,IAAN,CAAW;AACT,YAAA,IAAI,EAAE,MADG;AAET,YAAA,OAAO,EAAE;AAFA,WAAX;AAID,SALD;eAOO,K;AACR;AACF;;AA7BG,G;AA+BP,CAjCD,C,CAmCA;;;AACA,IAAI,yCAAQ,GAAG,6BAAf;;MEpCa,yC,CAAiB;AAI5B,EAAA,KAAK,CAAC,KAAD,EAA2B,OAA3B,EAA8C;AACjD,SAAK,OAAL,GAAe,OAAf;AACA,WAAO,8BAAQ,CAAA,MAAO,KAAK,iBAAL,CAAuB,KAAvB,CAAP,CAAf;AACD;;AAEyB,GAAjB,iBAAiB,CAAC,KAAD,EAA2B;AACnD,QAAI;AAAC,MAAA,QAAA,EAAA,QAAD;AAAS,MAAA,KAAA,EAAE;AAAX,QAAoB,KAAxB;;AAEA,QAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAE,CAAG,KAAL,EACE,MAAM,IAAI,KAAJ,CAAU,0DAAV,CAAN;;AAGF,WAAK,IAAI,IAAT,IAAiB,KAAK,CAAC,KAAvB,EAA4B,OACnB,KAAK,WAAL,CAAiB;AACtB,QAAA,KAAK,EAAE;AADe,OAAjB,EAEJ;AAAC,QAAA,QAAQ,EAAE;AAAX,OAFI,CADmB;AAK7B,KAVD,MAUO;AACL,UAAI,KAAK,GAA2B,EAApC;AACA,MAAA,YAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,QAAvB,EAAiC,KAAF,IAAW;AACxC,QAAA,KAAK,CAAC,IAAN,CAAW,KAAX;AACD,OAFD;AAIA,UAAI,KAAK,GAAG,CAAZ;;AACA,WAAK,IAAI,IAAT,IAAiB,KAAjB,EAAwB;AACtB,YAAI,KAAK,GAAG,KAAK,WAAL,CAAiB;AAC3B,UAAA,OAAO,EAAE,IADkB;AAE3B,UAAA,KAAK,EAAE;AAFoB,SAAjB,EAGT,EAHS,CAAZ;;AAKA,aAAK,IAAI,IAAT,IAAiB,KAAjB,EAAwB;AACtB,UAAA,KAAK;gBACC,I;AACP;AACF;AACF;AACF;;AAEO,EAAA,MAAM,CAAC,IAAD,EAA6B,WAA7B,EAA0D,KAA1D,EAAyF,SAAzF,EAA+G;AAC3H,QAAI,IAAI,CAAC,GAAL,IAAY,IAAhB,EACE,OAAO,IAAI,CAAC,GAAZ;AAGF,QAAI,WAAW,CAAC,IAAZ,KAAqB,MAArB,IAA+B,WAAW,CAAC,GAAZ,IAAmB,IAAtD,EACE,OAAM,GAAI,SAAS,GAAG,WAAW,CAAC,GAAG,EAArC;AAGF,QAAI,CAAC,GAAG,WAAW,CAAC,KAApB;;AACA,QAAI,CAAC,IAAI,IAAT,EAAe;UACH,I;;AAAV,UAAI,GAAG,GAAA,CAAG,IAAK,GAAL,CAAC,CAAC,GAAL,MAAQ,IAAR,IAAG,IAAK,KAAA,KAAA,CAAR,GAAG,IAAH,GAAY,CAAC,CAAC,EAArB;AACA,UAAI,GAAG,IAAI,IAAX,EACE,MAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;AAGF,aAAO,GAAP;AACD;;AAED,WAAO,SAAS,GAAA,GAAM,SAAU,IAAG,WAAW,CAAC,KAAK,EAApC,GAA0C,KAAI,WAAW,CAAC,KAAK,EAA/E;AACD;;AAEO,EAAA,aAAa,CAAC,KAAD,EAAgC,WAAhC,EAA6D;AAChF,WAAO;AACL,MAAA,QAAQ,EAAE,WAAW,CAAC,QAAZ,IAAwB,KAAK,CAAC;AADnC,KAAP;AAGD;;AAEmB,GAAX,WAAW,CAAC,WAAD,EAA8B,KAA9B,EAA6D,SAA7D,EAA8E,UAA9E,EAAwH;AAC1I;AACA;AACA,QAAI,OAAO,GAAG,WAAW,CAAC,OAA1B;;AACA,QAAE,CAAG,OAAH,IAAc,WAAW,CAAC,KAA1B,IAAmC,KAAnC,IAA4C,KAAK,CAAC,QAApD,EAA8D;AAC5D,UAAI,MAAM,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,WAAW,CAAC,KAA3B,CAAb;;AACA,UAAI,MAAM,KAAA,CAAM,MAAM,CAAC,gBAAb,IAA6B,CAAK,MAAM,CAAC,gBAAP,CAAwB,KAAK,OAA7B,CAAlC,CAAV,EAAoF;AAClF,QAAA,MAAM,CAAC,KAAP,GAAe,WAAW,CAAC,KAA3B;AACA,QAAA,MAAM,CAAC,SAAP,GAAmB,UAAU,GAAG,UAAU,CAAC,GAAd,GAAoB,IAAjD;cACM,M;AACN;AACD;;AAED,MAAA,OAAO,GAAG,KAAK,CAAC,QAAN,CAAe,WAAW,CAAC,KAA3B,CAAV;AACD,KAdyI,CAgB1I;AACA;;;AACA,QAAI,YAAK,CAAC,cAAN,CAAqB,OAArB,CAAJ,EAAmC;AACjC,UAAI,IAAI,GAAG,OAAO,CAAC,IAAnB;;AACA,UAAI,OAAO,IAAP,KAAgB,UAAhB,IAA8B,OAAO,IAAI,CAAC,iBAAZ,KAAkC,UAApE,EAAgF;AAC9E,YAAI,IAAI,GAAG,OAAO,OAAO,CAAC,IAAf,KAAwB,UAAxB,GAAqC,OAAO,CAAC,IAAR,CAAa,IAAlD,GAAyD,OAAO,CAAC,IAA5E;AACA,cAAM,IAAI,KAAJ,CAAW,oBAAmB,IAAK,kBAAnC,CAAN;AACD;;AAED,UAAI,UAAU,GAAG,IAAI,CAAC,iBAAL,CAAuB,OAAO,CAAC,KAA/B,EAAsC,KAAK,OAA3C,CAAjB;AACA,UAAI,KAAK,GAAG,WAAW,CAAC,KAAxB;AACA,UAAI,MAAM,GAAG,UAAU,CAAC,IAAX,EAAb;;cACQ,MAAM,CAAC,I,IAAQ,MAAM,CAAC,K,EAAO;AACnC,YAAI,SAAS,GAAG,MAAM,CAAC,KAAvB;AAEA,QAAA,WAAW,CAAC,KAAZ,GAAoB,KAApB;AAEA,YAAI,OAAO,GAAG,SAAS,CAAC,GAAxB;AACA,YAAE,CAAG,OAAL,EACE,OAAO,GAAG,SAAS,CAAC,OAAV,GAAoB,IAApB,GAA2B,KAAK,MAAL,CAAY,OAAZ,EAA6C,WAA7C,EAA0D,KAA1D,EAAiE,SAAjE,CAArC;AAGF,YAAI,KAAK,GAAG,KAAK,WAAL,CAAiB,E,GACxB,SADwB;AAE3B,UAAA,GAAG,EAAE,OAFsB;iBAG3B,KAH2B;AAI3B,UAAA,OAAO,EAAE,6BAAO,CAAC,WAAW,CAAC,OAAb,EAAsB,SAAS,CAAC,OAAhC;AAJW,SAAjB,EAKT,KAAK,aAAL,CAAmB,KAAnB,EAA0B,SAA1B,CALS,EAK6B,SAAS,GAAA,GAAM,SAAS,GAAG,OAAO,CAAC,GAAG,EAA7B,GAAkC,OAAO,CAAC,GALhF,EAKqF,UALrF,CAAZ;AAOA,YAAI,QAAQ,GAAG,C,GAAI,KAAJ,CAAf;;AACA,aAAK,IAAI,IAAT,IAAiB,QAAjB,EAA2B;AACzB;AACA,UAAA,IAAI,CAAC,KAAL,GAAa,SAAS,CAAC,KAAV,IAAmB,WAAW,CAAC,KAA5C;AACA,cAAI,IAAI,CAAC,KAAT,EACE,KAAK,KAAL,CAAW,GAAX,CAAe,IAAI,CAAC,KAApB,EAA2B,IAA3B,EAJuB,CAOzB;AACA;;AACA,cAAI,WAAW,CAAC,IAAZ,IAAoB,IAAI,CAAC,IAAL,KAAc,WAAW,CAAC,IAAlD,EACE,MAAM,IAAI,KAAJ,CAAW,qBAAoB,gCAAU,CAAC,IAAI,CAAC,IAAN,CAAY,SAAQ,gCAAU,CAAC,UAAU,CAAC,IAAZ,CAAkB,YAAW,gCAAU,CAAC,WAAW,CAAC,IAAb,CAAmB,iBAAjI,CAAN;AAGF,UAAA,KAAK;gBACC,I;AACP;;AAED,QAAA,MAAM,GAAG,UAAU,CAAC,IAAX,CAAgB,QAAhB,CAAT;AACD;;AAED;AACD,KAnEyI,CAqE1I;;;AACA,QAAI,WAAW,CAAC,GAAZ,IAAmB,IAAvB,EACE,OAvEwI,CA0E1I;;AACA,QAAI,OAAO,GAAG,IAAd;AACA,QAAI,IAAI,GAAY;AAClB,MAAA,IAAI,EAAE,WAAW,CAAC,IADA;AAElB,MAAA,KAAK,EAAE,WAAW,CAAC,KAFD;AAGlB,MAAA,GAAG,EAAE,WAAW,CAAC,GAHC;AAIlB,MAAA,SAAS,EAAE,UAAU,GAAG,UAAU,CAAC,GAAd,GAAoB,IAJvB;AAKlB,MAAA,KAAK,EAAE,WAAW,CAAC,KALD;AAMlB,MAAA,KAAK,EAAE,UAAU,GAAG,UAAU,CAAC,KAAX,GAAmB,CAAtB,GAA0B,CANzB;AAOlB,MAAA,KAAK,EAAE,WAAW,CAAC,KAPD;AAQlB,MAAA,QAAQ,EAAE,WAAW,CAAC,QARJ;AASlB,MAAA,SAAS,EAAE,WAAW,CAAC,SATL;AAUlB,oBAAc,WAAW,CAAC,YAAD,CAVP;AAWlB,MAAA,OAAO,EAAE,WAAW,CAAC,OAXH;AAYlB,MAAA,gBAAgB,EAAE,WAAW,CAAC,gBAZZ;AAalB,MAAA,aAAa,EAAE,WAAW,CAAC,aAbT;AAclB,MAAA,UAAU,EAAE,8BAAQ,CAAC,aAAa;AAChC,YAAE,CAAG,WAAW,CAAC,aAAjB,EACE;AAGF,YAAI,KAAK,GAAG,CAAZ;;AACA,aAAK,IAAI,KAAT,IAAkB,WAAW,CAAC,UAAZ,EAAlB,EAA4C;AAC1C;AACA,cAAI,KAAK,CAAC,GAAN,IAAa,IAAjB,EACE;AACA;AACA;AACA;AACA,YAAA,KAAK,CAAC,GAAN,GAAS,GAAM,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,EAAnC;AAGF,UAAA,KAAK,CAAC,KAAN,GAAc,KAAd;AACA,cAAI,KAAK,GAAG,OAAO,CAAC,WAAR,CAAoB,KAApB,EAA2B,OAAO,CAAC,aAAR,CAAsB,KAAtB,EAA6B,KAA7B,CAA3B,EAAgE,IAAI,CAAC,GAArE,EAA0E,IAA1E,CAAZ;;AACA,eAAK,IAAI,KAAT,IAAiB,KAAjB,EAAwB;AACtB,YAAA,KAAK;kBACC,K;AACP;AACF;AACF,OAvBmB;AAdF,KAApB;UAwCM,I;AACP;;;AA5LI,SAEG,KAFH,GAEgC,IAAI,OAAJ,EAFhC;;;AAAuB,C,CA+L9B;;;SACS,8B,CAAY,Q,EAA8D;AACjF,MAAI,KAAK,GAAG,EAAZ;AACA,MAAI,QAAQ,GAAG,IAAf;AACA,SAAO;MACH,MAAM,CAAC,Q,IAAY;AACnB,WAAK,IAAI,IAAT,IAAiB,KAAjB,EAAsB,MACd,IADc;;AAItB,UAAE,CAAG,QAAL,EACE,QAAQ,GAAG,QAAQ,EAAnB;;AAGF,WAAK,IAAI,KAAT,IAAiB,QAAjB,EAA2B;AACzB,QAAA,KAAK,CAAC,IAAN,CAAW,KAAX;cACM,K;AACP;AACF;;AAdI,GAAP;AAgBD;;SAGQ,6B,CAAQ,K,EAAuB,K,EAAgC;AACtE,MAAI,KAAK,IAAI,KAAb,EACE,OAAQ,OAAF,IAAc,KAAK,CAAC,KAAK,CAAC,OAAD,CAAN,CAAzB;AAGF,MAAI,KAAJ,EACE,OAAO,KAAP;AAGF,MAAI,KAAJ,EACE,OAAO,KAAP;AAEH;;SAEQ,gC,CAAW,G,EAAa;AAC/B,SAAO,GAAG,CAAC,CAAD,CAAH,CAAO,WAAP,KAAuB,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA9B;AACD;;SDxOe,yC,CAAqF,K,EAA0B,O,EAAkC,O,EAAmB,YAAwB,GAAG,E,EAAO;AACpN,MAAI,OAAO,GAAG,cAAO,CAAA,MAAO,IAAI,yCAAJ,EAAP,EAAmC,EAAnC,CAArB;AAEA,MAAI,IAAI,GAAG,aAAM,CAAI,IAAJ,CAAjB;AACA,SAAO,cAAO,CAAA,MAAO;AACnB,QAAI,KAAK,GAAG,OAAO,CAAC,KAAR,CAAc,KAAd,EAAqB,OAArB,CAAZ;AACA,IAAA,IAAI,CAAC,OAAL,GAAe,OAAO,CAAC,KAAD,EAAQ,IAAI,CAAC,OAAb,CAAtB;AACA,WAAO,IAAI,CAAC,OAAZ,CAHmB,CAIrB;AACA;AACC,GANa,EAMX,CAAC,OAAD,EAAU,KAAK,CAAC,QAAhB,EAA0B,KAAK,CAAC,KAAhC,EAAuC,OAAvC,E,GAAmD,YAAnD,CANW,CAAd;AAOD;;AEfD,MAAM,2BAAK,GAAG,IAAI,OAAJ,EAAd;;SAEgB,yC,CAAgB,U,EAAuC;AACrE,MAAI,KAAK,GAAG,2BAAK,CAAC,GAAN,CAAU,UAAV,CAAZ;AACA,MAAI,KAAK,IAAI,IAAb,EACE,OAAO,KAAP;AAGF,EAAA,KAAK,GAAG,CAAR;;AACA,OAAK,IAAI,IAAT,IAAiB,UAAjB,EACE,IAAI,IAAI,CAAC,IAAL,KAAc,SAAlB,EACE,KAAK,IAAI,yCAAY,CAAC,IAAI,CAAC,UAAN,CAArB,CADF,KAGE,KAAK;;AAIT,EAAA,2BAAK,CAAC,GAAN,CAAU,UAAV,EAAsB,KAAtB;AACA,SAAO,KAAP;AACD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ItemElement, ItemProps} from '@react-types/shared';\nimport {PartialNode} from './types';\nimport React, {ReactElement} from 'react';\n\nfunction Item<T>(props: ItemProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nItem.getCollectionNode = function* getCollectionNode<T>(props: ItemProps<T>, context: any): Generator<PartialNode<T>> {\n  let {childItems, title, children} = props;\n\n  let rendered = props.title || props.children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'] || '';\n\n  // suppressTextValueWarning is used in components like Tabs, which don't have type to select support.\n  if (!textValue && !context?.suppressTextValueWarning) {\n    console.warn('<Item> with non-plain text contents is unsupported by type to select for accessibility. Please add a `textValue` prop.');\n  }\n\n  yield {\n    type: 'item',\n    props: props,\n    rendered,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: hasChildItems(props),\n    *childNodes() {\n      if (childItems) {\n        for (let child of childItems) {\n          yield {\n            type: 'item',\n            value: child\n          };\n        }\n      } else if (title) {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          items.push({\n            type: 'item',\n            element: child as ItemElement<T>\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\nfunction hasChildItems<T>(props: ItemProps<T>) {\n  if (props.hasChildItems != null) {\n    return props.hasChildItems;\n  }\n\n  if (props.childItems) {\n    return true;\n  }\n\n  if (props.title && React.Children.count(props.children) > 0) {\n    return true;\n  }\n\n  return false;\n}\n\n// We don't want getCollectionNode to show up in the type definition\nlet _Item = Item as <T>(props: ItemProps<T>) => JSX.Element;\nexport {_Item as Item};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from './types';\nimport React, {ReactElement} from 'react';\nimport {SectionProps} from '@react-types/shared';\n\nfunction Section<T>(props: SectionProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nSection.getCollectionNode = function* getCollectionNode<T>(props: SectionProps<T>): Generator<PartialNode<T>> {\n  let {children, title, items} = props;\n  yield {\n    type: 'section',\n    hasChildNodes: true,\n    rendered: title,\n    'aria-label': props['aria-label'],\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items) {\n          throw new Error('props.children was a function but props.items is missing');\n        }\n    \n        for (let item of items) {\n          yield {\n            type: 'item',\n            value: item,\n            renderer: children\n          };\n        }\n      } else {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          items.push({\n            type: 'item',\n            element: child\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\n// We don't want getCollectionNode to show up in the type definition\nlet _Section = Section as <T>(props: SectionProps<T>) => JSX.Element;\nexport {_Section as Section};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, Node} from '@react-types/shared';\nimport {CollectionBuilder} from './CollectionBuilder';\nimport {useMemo, useRef} from 'react';\n\ntype CollectionFactory<T, C extends Collection<Node<T>>> = (node: Iterable<Node<T>>, prev: C | null) => C;\n\nexport function useCollection<T extends object, C extends Collection<Node<T>> = Collection<Node<T>>>(props: CollectionBase<T>, factory: CollectionFactory<T, C>, context?: unknown, invalidators: Array<any> = []): C {\n  let builder = useMemo(() => new CollectionBuilder<T>(), []);\n\n  let prev = useRef<C>(null);\n  return useMemo(() => {\n    let nodes = builder.build(props, context);\n    prev.current = factory(nodes, prev.current);\n    return prev.current;\n  // Don't invalidate when any prop changes, just the two we care about.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [builder, props.children, props.items, context, ...invalidators]);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, CollectionElement, Node} from '@react-types/shared';\nimport {PartialNode} from './types';\nimport React, {Key, ReactElement} from 'react';\n\ninterface CollectionBuilderState {\n  renderer?: (value: any) => ReactElement\n}\n\nexport class CollectionBuilder<T extends object> {\n  private context?: unknown;\n  private cache: WeakMap<T, Node<T>> = new WeakMap();\n\n  build(props: CollectionBase<T>, context?: unknown) {\n    this.context = context;\n    return iterable(() => this.iterateCollection(props));\n  }\n\n  private *iterateCollection(props: CollectionBase<T>) {\n    let {children, items} = props;\n\n    if (typeof children === 'function') {\n      if (!items) {\n        throw new Error('props.children was a function but props.items is missing');\n      }\n\n      for (let item of props.items) {\n        yield* this.getFullNode({\n          value: item\n        }, {renderer: children});\n      }\n    } else {\n      let items: CollectionElement<T>[] = [];\n      React.Children.forEach(children, child => {\n        items.push(child);\n      });\n\n      let index = 0;\n      for (let item of items) {\n        let nodes = this.getFullNode({\n          element: item,\n          index: index\n        }, {});\n\n        for (let node of nodes) {\n          index++;\n          yield node;\n        }\n      }\n    }\n  }\n\n  private getKey(item: CollectionElement<T>, partialNode: PartialNode<T>, state: CollectionBuilderState, parentKey?: Key): Key {\n    if (item.key != null) {\n      return item.key;\n    }\n\n    if (partialNode.type === 'cell' && partialNode.key != null) {\n      return `${parentKey}${partialNode.key}`;\n    }\n\n    let v = partialNode.value as any;\n    if (v != null) {\n      let key = v.key ?? v.id;\n      if (key == null) {\n        throw new Error('No key found for item');\n      }\n\n      return key;\n    }\n\n    return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;\n  }\n\n  private getChildState(state: CollectionBuilderState, partialNode: PartialNode<T>) {\n    return {\n      renderer: partialNode.renderer || state.renderer\n    };\n  }\n\n  private *getFullNode(partialNode: PartialNode<T>, state: CollectionBuilderState, parentKey?: Key, parentNode?: Node<T>): Generator<Node<T>> {\n    // If there's a value instead of an element on the node, and a parent renderer function is available,\n    // use it to render an element for the value.\n    let element = partialNode.element;\n    if (!element && partialNode.value && state && state.renderer) {\n      let cached = this.cache.get(partialNode.value);\n      if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {\n        cached.index = partialNode.index;\n        cached.parentKey = parentNode ? parentNode.key : null;\n        yield cached;\n        return;\n      }\n\n      element = state.renderer(partialNode.value);\n    }\n\n    // If there's an element with a getCollectionNode function on its type, then it's a supported component.\n    // Call this function to get a partial node, and recursively build a full node from there.\n    if (React.isValidElement(element)) {\n      let type = element.type as any;\n      if (typeof type !== 'function' && typeof type.getCollectionNode !== 'function') {\n        let name = typeof element.type === 'function' ? element.type.name : element.type;\n        throw new Error(`Unknown element <${name}> in collection.`);\n      }\n\n      let childNodes = type.getCollectionNode(element.props, this.context) as Generator<PartialNode<T>, void, Node<T>[]>;\n      let index = partialNode.index;\n      let result = childNodes.next();\n      while (!result.done && result.value) {\n        let childNode = result.value;\n\n        partialNode.index = index;\n\n        let nodeKey = childNode.key;\n        if (!nodeKey) {\n          nodeKey = childNode.element ? null : this.getKey(element as CollectionElement<T>, partialNode, state, parentKey);\n        }\n\n        let nodes = this.getFullNode({\n          ...childNode,\n          key: nodeKey,\n          index,\n          wrapper: compose(partialNode.wrapper, childNode.wrapper)\n        }, this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);\n\n        let children = [...nodes];\n        for (let node of children) {\n          // Cache the node based on its value\n          node.value = childNode.value || partialNode.value;\n          if (node.value) {\n            this.cache.set(node.value, node);\n          }\n\n          // The partial node may have specified a type for the child in order to specify a constraint.\n          // Verify that the full node that was built recursively matches this type.\n          if (partialNode.type && node.type !== partialNode.type) {\n            throw new Error(`Unsupported type <${capitalize(node.type)}> in <${capitalize(parentNode.type)}>. Only <${capitalize(partialNode.type)}> is supported.`);\n          }\n\n          index++;\n          yield node;\n        }\n\n        result = childNodes.next(children);\n      }\n\n      return;\n    }\n\n    // Ignore invalid elements\n    if (partialNode.key == null) {\n      return;\n    }\n\n    // Create full node\n    let builder = this;\n    let node: Node<T> = {\n      type: partialNode.type,\n      props: partialNode.props,\n      key: partialNode.key,\n      parentKey: parentNode ? parentNode.key : null,\n      value: partialNode.value,\n      level: parentNode ? parentNode.level + 1 : 0,\n      index: partialNode.index,\n      rendered: partialNode.rendered,\n      textValue: partialNode.textValue,\n      'aria-label': partialNode['aria-label'],\n      wrapper: partialNode.wrapper,\n      shouldInvalidate: partialNode.shouldInvalidate,\n      hasChildNodes: partialNode.hasChildNodes,\n      childNodes: iterable(function *() {\n        if (!partialNode.hasChildNodes) {\n          return;\n        }\n\n        let index = 0;\n        for (let child of partialNode.childNodes()) {\n          // Ensure child keys are globally unique by prepending the parent node's key\n          if (child.key != null) {\n            // TODO: Remove this line entirely and enforce that users always provide unique keys.\n            // Currently this line will have issues when a parent has a key `a` and a child with key `bc`\n            // but another parent has key `ab` and its child has a key `c`. The combined keys would result in both\n            // children having a key of `abc`.\n            child.key = `${node.key}${child.key}`;\n          }\n\n          child.index = index;\n          let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);\n          for (let node of nodes) {\n            index++;\n            yield node;\n          }\n        }\n      })\n    };\n\n    yield node;\n  }\n}\n\n// Wraps an iterator function as an iterable object, and caches the results.\nfunction iterable<T>(iterator: () => IterableIterator<Node<T>>): Iterable<Node<T>> {\n  let cache = [];\n  let iterable = null;\n  return {\n    *[Symbol.iterator]() {\n      for (let item of cache) {\n        yield item;\n      }\n\n      if (!iterable) {\n        iterable = iterator();\n      }\n\n      for (let item of iterable) {\n        cache.push(item);\n        yield item;\n      }\n    }\n  };\n}\n\ntype Wrapper = (element: ReactElement) => ReactElement;\nfunction compose(outer: Wrapper | void, inner: Wrapper | void): Wrapper {\n  if (outer && inner) {\n    return (element) => outer(inner(element));\n  }\n\n  if (outer) {\n    return outer;\n  }\n\n  if (inner) {\n    return inner;\n  }\n}\n\nfunction capitalize(str: string) {\n  return str[0].toUpperCase() + str.slice(1);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Node} from '@react-types/shared';\n\nconst cache = new WeakMap<Iterable<unknown>, number>();\n\nexport function getItemCount<T>(collection: Iterable<Node<T>>): number {\n  let count = cache.get(collection);\n  if (count != null) {\n    return count;\n  }\n\n  count = 0;\n  for (let item of collection) {\n    if (item.type === 'section') {\n      count += getItemCount(item.childNodes);\n    } else {\n      count++;\n    }\n  }\n\n  cache.set(collection, count);\n  return count;\n}\n"]},"metadata":{},"sourceType":"module"}