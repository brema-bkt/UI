{"ast":null,"code":"import { useRef as $Qsto2$useRef, useState as $Qsto2$useState, useMemo as $Qsto2$useMemo, useEffect as $Qsto2$useEffect } from \"react\";\nimport { useControlledState as $Qsto2$useControlledState } from \"@react-stately/utils\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nclass $e40ea825a81a3709$export$52baac22726c72bf extends Set {\n  constructor(keys, anchorKey, currentKey) {\n    super(keys);\n\n    if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n\n}\n\nfunction $7af3f5b51489e0b5$var$equalSets(setA, setB) {\n  if (setA.size !== setB.size) return false;\n\n  for (let item of setA) {\n    if (!setB.has(item)) return false;\n  }\n\n  return true;\n}\n\nfunction $7af3f5b51489e0b5$export$253fe78d46329472(props) {\n  let {\n    selectionMode = \"none\",\n    disallowEmptySelection: disallowEmptySelection,\n    allowDuplicateSelectionEvents: allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = \"toggle\",\n    disabledBehavior = \"all\"\n  } = props; // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n\n  let isFocusedRef = (0, $Qsto2$useRef)(false);\n  let [, setFocused] = (0, $Qsto2$useState)(false);\n  let focusedKeyRef = (0, $Qsto2$useRef)(null);\n  let childFocusStrategyRef = (0, $Qsto2$useRef)(null);\n  let [, setFocusedKey] = (0, $Qsto2$useState)(null);\n  let selectedKeysProp = (0, $Qsto2$useMemo)(() => $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = (0, $Qsto2$useMemo)(() => $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new (0, $e40ea825a81a3709$export$52baac22726c72bf)()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = (0, $Qsto2$useControlledState)(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);\n  let disabledKeysProp = (0, $Qsto2$useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = (0, $Qsto2$useState)(selectionBehaviorProp); // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n\n  if (selectionBehaviorProp === \"replace\" && selectionBehavior === \"toggle\" && typeof selectedKeys === \"object\" && selectedKeys.size === 0) setSelectionBehavior(\"replace\"); // If the selectionBehavior prop changes, update the state as well.\n\n  let lastSelectionBehavior = (0, $Qsto2$useRef)(selectionBehaviorProp);\n  (0, $Qsto2$useEffect)(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    selectionBehavior: selectionBehavior,\n    setSelectionBehavior: setSelectionBehavior,\n\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n\n    setFocusedKey(k, childFocusStrategy = \"first\") {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n\n    selectedKeys: selectedKeys,\n\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) setSelectedKeys(keys);\n    },\n\n    disabledKeys: disabledKeysProp,\n    disabledBehavior: disabledBehavior\n  };\n}\n\nfunction $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {\n  if (!selection) return defaultValue;\n  return selection === \"all\" ? \"all\" : new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selection);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nclass $d496c0a20b6e58ec$export$6c8a5aaad13c9852 {\n  /**\n  * The type of selection that is allowed in the collection.\n  */\n  get selectionMode() {\n    return this.state.selectionMode;\n  }\n  /**\n  * Whether the collection allows empty selection.\n  */\n\n\n  get disallowEmptySelection() {\n    return this.state.disallowEmptySelection;\n  }\n  /**\n  * The selection behavior for the collection.\n  */\n\n\n  get selectionBehavior() {\n    return this.state.selectionBehavior;\n  }\n  /**\n  * Sets the selection behavior for the collection.\n  */\n\n\n  setSelectionBehavior(selectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n  /**\n  * Whether the collection is currently focused.\n  */\n\n\n  get isFocused() {\n    return this.state.isFocused;\n  }\n  /**\n  * Sets whether the collection is focused.\n  */\n\n\n  setFocused(isFocused) {\n    this.state.setFocused(isFocused);\n  }\n  /**\n  * The current focused key in the collection.\n  */\n\n\n  get focusedKey() {\n    return this.state.focusedKey;\n  }\n  /** Whether the first or last child of the focused key should receive focus. */\n\n\n  get childFocusStrategy() {\n    return this.state.childFocusStrategy;\n  }\n  /**\n  * Sets the focused key.\n  */\n\n\n  setFocusedKey(key, childFocusStrategy) {\n    if (key == null || this.collection.getItem(key)) this.state.setFocusedKey(key, childFocusStrategy);\n  }\n  /**\n  * The currently selected keys in the collection.\n  */\n\n\n  get selectedKeys() {\n    return this.state.selectedKeys === \"all\" ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n  }\n  /**\n  * The raw selection value for the collection.\n  * Either 'all' for select all, or a set of keys.\n  */\n\n\n  get rawSelection() {\n    return this.state.selectedKeys;\n  }\n  /**\n  * Returns whether a key is selected.\n  */\n\n\n  isSelected(key) {\n    if (this.state.selectionMode === \"none\") return false;\n    key = this.getKey(key);\n    return this.state.selectedKeys === \"all\" ? this.canSelectItem(key) : this.state.selectedKeys.has(key);\n  }\n  /**\n  * Whether the selection is empty.\n  */\n\n\n  get isEmpty() {\n    return this.state.selectedKeys !== \"all\" && this.state.selectedKeys.size === 0;\n  }\n  /**\n  * Whether all items in the collection are selected.\n  */\n\n\n  get isSelectAll() {\n    if (this.isEmpty) return false;\n    if (this.state.selectedKeys === \"all\") return true;\n    if (this._isSelectAll != null) return this._isSelectAll;\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey() {\n    let first = null;\n\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index) first = item;\n    }\n\n    return first === null || first === void 0 ? void 0 : first.key;\n  }\n\n  get lastSelectedKey() {\n    let last = null;\n\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index) last = item;\n    }\n\n    return last === null || last === void 0 ? void 0 : last.key;\n  }\n\n  get disabledKeys() {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior() {\n    return this.state.disabledBehavior;\n  }\n  /**\n  * Extends the selection to the given key.\n  */\n\n\n  extendSelection(toKey) {\n    if (this.selectionMode === \"none\") return;\n\n    if (this.selectionMode === \"single\") {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n    let selection; // Only select the one key if coming from a select all.\n\n    if (this.state.selectedKeys === \"all\") selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)([toKey], toKey, toKey);else {\n      let selectedKeys = this.state.selectedKeys;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selectedKeys, anchorKey, toKey);\n\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) selection.delete(key);\n\n      for (let key1 of this.getKeyRange(toKey, anchorKey)) if (this.canSelectItem(key1)) selection.add(key1);\n    }\n    this.state.setSelectedKeys(selection);\n  }\n\n  getKeyRange(from, to) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  getKeyRangeInternal(from, to) {\n    let keys = [];\n    let key = from;\n\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === \"item\" || item.type === \"cell\" && this.allowsCellSelection) keys.push(key);\n      if (key === to) return keys;\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  getKey(key) {\n    let item = this.collection.getItem(key);\n    if (!item) // ¯\\_(ツ)_/¯\n      return key; // If cell selection is allowed, just return the key.\n\n    if (item.type === \"cell\" && this.allowsCellSelection) return key; // Find a parent item to select\n\n    while (item.type !== \"item\" && item.parentKey != null) item = this.collection.getItem(item.parentKey);\n\n    if (!item || item.type !== \"item\") return null;\n    return item.key;\n  }\n  /**\n  * Toggles whether the given key is selected.\n  */\n\n\n  toggleSelection(key) {\n    if (this.selectionMode === \"none\") return;\n\n    if (this.selectionMode === \"single\" && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) return;\n    let keys = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(this.state.selectedKeys === \"all\" ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) keys.delete(key);else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n    if (this.disallowEmptySelection && keys.size === 0) return;\n    this.state.setSelectedKeys(keys);\n  }\n  /**\n  * Replaces the selection with only the given key.\n  */\n\n\n  replaceSelection(key) {\n    if (this.selectionMode === \"none\") return;\n    key = this.getKey(key);\n    if (key == null) return;\n    let selection = this.canSelectItem(key) ? new (0, $e40ea825a81a3709$export$52baac22726c72bf)([key], key, key) : new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n    this.state.setSelectedKeys(selection);\n  }\n  /**\n  * Replaces the selection with the given keys.\n  */\n\n\n  setSelectedKeys(keys) {\n    if (this.selectionMode === \"none\") return;\n    let selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n\n    for (let key of keys) {\n      key = this.getKey(key);\n\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === \"single\") break;\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  getSelectAllKeys() {\n    let keys = [];\n\n    let addKeys = key => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === \"item\") keys.push(key); // Add child keys. If cell selection is allowed, then include item children too.\n\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== \"item\")) addKeys([...item.childNodes][0].key);\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n  /**\n  * Selects all items in the collection.\n  */\n\n\n  selectAll() {\n    if (this.selectionMode === \"multiple\") this.state.setSelectedKeys(\"all\");\n  }\n  /**\n  * Removes all keys from the selection.\n  */\n\n\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === \"all\" || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new (0, $e40ea825a81a3709$export$52baac22726c72bf)());\n  }\n  /**\n  * Toggles between select all and an empty selection.\n  */\n\n\n  toggleSelectAll() {\n    if (this.isSelectAll) this.clearSelection();else this.selectAll();\n  }\n\n  select(key, e) {\n    if (this.selectionMode === \"none\") return;\n\n    if (this.selectionMode === \"single\") {\n      if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n    } else if (this.selectionBehavior === \"toggle\" || e && (e.pointerType === \"touch\" || e.pointerType === \"virtual\")) // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);else this.replaceSelection(key);\n  }\n  /**\n  * Returns whether the current selection is equal to the given selection.\n  */\n\n\n  isSelectionEqual(selection) {\n    if (selection === this.state.selectedKeys) return true; // Check if the set of keys match.\n\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) return false;\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) return false;\n    }\n\n    for (let key1 of selectedKeys) {\n      if (!selection.has(key1)) return false;\n    }\n\n    return true;\n  }\n\n  canSelectItem(key) {\n    if (this.state.selectionMode === \"none\" || this.state.disabledKeys.has(key)) return false;\n    let item = this.collection.getItem(key);\n    if (!item || item.type === \"cell\" && !this.allowsCellSelection) return false;\n    return true;\n  }\n\n  isDisabled(key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === \"all\";\n  }\n\n  constructor(collection, state, options) {\n    this.collection = collection;\n    this.state = state;\n\n    var _options_allowsCellSelection;\n\n    this.allowsCellSelection = (_options_allowsCellSelection = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && _options_allowsCellSelection !== void 0 ? _options_allowsCellSelection : false;\n    this._isSelectAll = null;\n  }\n\n}\n\nexport { $7af3f5b51489e0b5$export$253fe78d46329472 as useMultipleSelectionState, $d496c0a20b6e58ec$export$6c8a5aaad13c9852 as SelectionManager };","map":{"version":3,"sources":["packages/@react-stately/selection/src/index.ts","packages/@react-stately/selection/src/useMultipleSelectionState.ts","packages/@react-stately/selection/src/Selection.ts","packages/@react-stately/selection/src/SelectionManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {MultipleSelectionStateProps} from './useMultipleSelectionState';\nexport type {FocusState, SingleSelectionState, MultipleSelectionState, MultipleSelectionManager} from './types';\nexport {useMultipleSelectionState} from './useMultipleSelectionState';\nexport {SelectionManager} from './SelectionManager';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DisabledBehavior, MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {Key, useEffect, useMemo, useRef, useState} from 'react';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(selectionBehaviorProp);\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = useRef(selectionBehaviorProp);\n  useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  DisabledBehavior,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key, childFocusStrategy?: FocusStrategy) {\n    if (key == null || this.collection.getItem(key)) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? this.canSelectItem(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  get disabledKeys(): Set<Key> {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior(): DisabledBehavior {\n    return this.state.disabledBehavior;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (this.canSelectItem(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let selection = this.canSelectItem(key)\n      ? new Selection([key], key, key)\n      : new Selection();\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isDisabled(key: Key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}