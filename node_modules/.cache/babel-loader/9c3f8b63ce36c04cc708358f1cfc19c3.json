{"ast":null,"code":"import { useReducer as $d70Aq$useReducer, useEffect as $d70Aq$useEffect, useState as $d70Aq$useState, useMemo as $d70Aq$useMemo } from \"react\";\n\nfunction $0d86e9c8f07f9a7b$export$762f73dccccd255d(options) {\n  let {\n    initialItems = [],\n    initialSelectedKeys: initialSelectedKeys,\n    getKey = item => item.id || item.key,\n    filter: filter,\n    initialFilterText = ''\n  } = options; // Store both items and filteredItems in state so we can go back to the unfiltered list\n\n  let [state, setState] = $d70Aq$useState({\n    items: initialItems,\n    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys || []),\n    filterText: initialFilterText\n  });\n  let filteredItems = $d70Aq$useMemo(() => filter ? state.items.filter(item => filter(item, state.filterText)) : state.items, [state.items, state.filterText, filter]);\n  return { ...state,\n    items: filteredItems,\n    ...$0d86e9c8f07f9a7b$export$79c0c687a5963b0a({\n      getKey: getKey\n    }, setState),\n\n    getItem(key) {\n      return state.items.find(item => getKey(item) === key);\n    }\n\n  };\n}\n\nfunction $0d86e9c8f07f9a7b$export$79c0c687a5963b0a(opts, dispatch) {\n  let {\n    cursor: cursor,\n    getKey: getKey\n  } = opts;\n  return {\n    setSelectedKeys(selectedKeys) {\n      dispatch(state => ({ ...state,\n        selectedKeys: selectedKeys\n      }));\n    },\n\n    setFilterText(filterText) {\n      dispatch(state => ({ ...state,\n        filterText: filterText\n      }));\n    },\n\n    insert(index, ...values) {\n      dispatch(state => $0d86e9c8f07f9a7b$var$insert(state, index, ...values));\n    },\n\n    insertBefore(key, ...values) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) return;\n        return $0d86e9c8f07f9a7b$var$insert(state, index, ...values);\n      });\n    },\n\n    insertAfter(key, ...values) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) return;\n        return $0d86e9c8f07f9a7b$var$insert(state, index + 1, ...values);\n      });\n    },\n\n    prepend(...values) {\n      dispatch(state => $0d86e9c8f07f9a7b$var$insert(state, 0, ...values));\n    },\n\n    append(...values) {\n      dispatch(state => $0d86e9c8f07f9a7b$var$insert(state, state.items.length, ...values));\n    },\n\n    remove(...keys) {\n      dispatch(state => {\n        let keySet = new Set(keys);\n        let items = state.items.filter(item => !keySet.has(getKey(item)));\n        let selection = 'all';\n\n        if (state.selectedKeys !== 'all') {\n          selection = new Set(state.selectedKeys);\n\n          for (let key of keys) selection.delete(key);\n        }\n\n        if (cursor == null && items.length === 0) selection = new Set();\n        return { ...state,\n          items: items,\n          selectedKeys: selection\n        };\n      });\n    },\n\n    removeSelectedItems() {\n      dispatch(state => {\n        if (state.selectedKeys === 'all') return { ...state,\n          items: [],\n          selectedKeys: new Set()\n        };\n        let selectedKeys = state.selectedKeys;\n        let items = state.items.filter(item => !selectedKeys.has(getKey(item)));\n        return { ...state,\n          items: items,\n          selectedKeys: new Set()\n        };\n      });\n    },\n\n    move(key, toIndex) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) return state;\n        let copy = state.items.slice();\n        let [item1] = copy.splice(index, 1);\n        copy.splice(toIndex, 0, item1);\n        return { ...state,\n          items: copy\n        };\n      });\n    },\n\n    moveBefore(key1, keys) {\n      dispatch(state => {\n        let toIndex = state.items.findIndex(item => getKey(item) === key1);\n        if (toIndex === -1) return state; // Find indices of keys to move. Sort them so that the order in the list is retained.\n\n        let keyArray = Array.isArray(keys) ? keys : [...keys];\n        let indices = keyArray.map(key => state.items.findIndex(item => getKey(item) === key)).sort();\n        return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex);\n      });\n    },\n\n    moveAfter(key2, keys) {\n      dispatch(state => {\n        let toIndex = state.items.findIndex(item => getKey(item) === key2);\n        if (toIndex === -1) return state;\n        let keyArray = Array.isArray(keys) ? keys : [...keys];\n        let indices = keyArray.map(key => state.items.findIndex(item => getKey(item) === key)).sort();\n        return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex + 1);\n      });\n    },\n\n    update(key, newValue) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) return state;\n        return { ...state,\n          items: [...state.items.slice(0, index), newValue, ...state.items.slice(index + 1)]\n        };\n      });\n    }\n\n  };\n}\n\nfunction $0d86e9c8f07f9a7b$var$insert(state, index, ...values) {\n  return { ...state,\n    items: [...state.items.slice(0, index), ...values, ...state.items.slice(index)]\n  };\n}\n\nfunction $0d86e9c8f07f9a7b$var$move(state, indices, toIndex) {\n  // Shift the target down by the number of items being moved from before the target\n  for (let index of indices) if (index < toIndex) toIndex--;\n\n  let moves = indices.map(from => ({\n    from: from,\n    to: toIndex++\n  })); // Shift later from indices down if they have a larger index\n\n  for (let i = 0; i < moves.length; i++) {\n    let a = moves[i].from;\n\n    for (let j = i; j < moves.length; j++) {\n      let b = moves[j].from;\n      if (b > a) moves[j].from--;\n    }\n  } // Interleave the moves so they can be applied one by one rather than all at once\n\n\n  for (let i1 = 0; i1 < moves.length; i1++) {\n    let a = moves[i1];\n\n    for (let j = moves.length - 1; j > i1; j--) {\n      let b = moves[j];\n      if (b.from < a.to) a.to++;else b.from++;\n    }\n  }\n\n  let copy = state.items.slice();\n\n  for (let move of moves) {\n    let [item] = copy.splice(move.from, 1);\n    copy.splice(move.to, 0, item);\n  }\n\n  return { ...state,\n    items: copy\n  };\n}\n\nfunction $f86e6c1ec7da6ebb$var$reducer(data, action) {\n  let selectedKeys;\n\n  switch (data.state) {\n    case 'idle':\n    case 'error':\n      switch (action.type) {\n        case 'loading':\n        case 'loadingMore':\n        case 'sorting':\n        case 'filtering':\n          var _filterText, _sortDescriptor;\n\n          return { ...data,\n            filterText: (_filterText = action.filterText) !== null && _filterText !== void 0 ? _filterText : data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            sortDescriptor: (_sortDescriptor = action.sortDescriptor) !== null && _sortDescriptor !== void 0 ? _sortDescriptor : data.sortDescriptor,\n            abortController: action.abortController\n          };\n\n        case 'update':\n          return { ...data,\n            ...action.updater(data)\n          };\n\n        case 'success':\n        case 'error':\n          return data;\n\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n\n    case 'loading':\n    case 'sorting':\n    case 'filtering':\n      switch (action.type) {\n        case 'success':\n          // Ignore if there is a newer abortcontroller in state.\n          // This means that multiple requests were going at once.\n          // We want to take only the latest result.\n          if (action.abortController !== data.abortController) return data;\n\n          var _selectedKeys;\n\n          selectedKeys = (_selectedKeys = action.selectedKeys) !== null && _selectedKeys !== void 0 ? _selectedKeys : data.selectedKeys;\n\n          var _filterText1, _sortDescriptor1;\n\n          return { ...data,\n            filterText: (_filterText1 = action.filterText) !== null && _filterText1 !== void 0 ? _filterText1 : data.filterText,\n            state: 'idle',\n            items: [...action.items],\n            selectedKeys: selectedKeys === 'all' ? 'all' : new Set(selectedKeys),\n            sortDescriptor: (_sortDescriptor1 = action.sortDescriptor) !== null && _sortDescriptor1 !== void 0 ? _sortDescriptor1 : data.sortDescriptor,\n            abortController: null,\n            cursor: action.cursor\n          };\n\n        case 'error':\n          if (action.abortController !== data.abortController) return data;\n          return { ...data,\n            state: 'error',\n            error: action.error,\n            abortController: null\n          };\n\n        case 'loading':\n        case 'loadingMore':\n        case 'sorting':\n        case 'filtering':\n          // We're already loading, and another load was triggered at the same time.\n          // We need to abort the previous load and start a new one.\n          data.abortController.abort();\n\n          var _filterText2;\n\n          return { ...data,\n            filterText: (_filterText2 = action.filterText) !== null && _filterText2 !== void 0 ? _filterText2 : data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            abortController: action.abortController\n          };\n\n        case 'update':\n          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).\n          // Update data but don't abort previous load.\n          return { ...data,\n            ...action.updater(data)\n          };\n\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n\n    case 'loadingMore':\n      switch (action.type) {\n        case 'success':\n          var _selectedKeys1;\n\n          selectedKeys = data.selectedKeys === 'all' || action.selectedKeys === 'all' ? 'all' : new Set([...data.selectedKeys, ...((_selectedKeys1 = action.selectedKeys) !== null && _selectedKeys1 !== void 0 ? _selectedKeys1 : [])]);\n\n          var _sortDescriptor2; // Append the new items\n\n\n          return { ...data,\n            state: 'idle',\n            items: [...data.items, ...action.items],\n            selectedKeys: selectedKeys,\n            sortDescriptor: (_sortDescriptor2 = action.sortDescriptor) !== null && _sortDescriptor2 !== void 0 ? _sortDescriptor2 : data.sortDescriptor,\n            abortController: null,\n            cursor: action.cursor\n          };\n\n        case 'error':\n          if (action.abortController !== data.abortController) return data;\n          return { ...data,\n            state: 'error',\n            error: action.error\n          };\n\n        case 'loading':\n        case 'sorting':\n        case 'filtering':\n          // We're already loading more, and another load was triggered at the same time.\n          // We need to abort the previous load more and start a new one.\n          data.abortController.abort();\n\n          var _filterText3;\n\n          return { ...data,\n            filterText: (_filterText3 = action.filterText) !== null && _filterText3 !== void 0 ? _filterText3 : data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            abortController: action.abortController\n          };\n\n        case 'loadingMore':\n          // If already loading more and another loading more is triggered, abort the new load more since\n          // it is a duplicate request since the cursor hasn't been updated.\n          // Do not overwrite the data.abortController\n          action.abortController.abort();\n          return data;\n\n        case 'update':\n          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).\n          // Update data but don't abort previous load.\n          return { ...data,\n            ...action.updater(data)\n          };\n\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n\n    default:\n      throw new Error(`Invalid state \"${data.state}\"`);\n  }\n}\n\nfunction $f86e6c1ec7da6ebb$export$bc3384a35de93d66(options) {\n  const {\n    load: load,\n    sort: sort,\n    initialSelectedKeys: initialSelectedKeys,\n    initialSortDescriptor: initialSortDescriptor,\n    getKey = item => item.id || item.key,\n    initialFilterText = ''\n  } = options;\n  let [data, dispatch] = $d70Aq$useReducer($f86e6c1ec7da6ebb$var$reducer, {\n    state: 'idle',\n    error: null,\n    items: [],\n    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys),\n    sortDescriptor: initialSortDescriptor,\n    filterText: initialFilterText\n  });\n\n  const dispatchFetch = async (action, fn) => {\n    let abortController = new AbortController();\n\n    try {\n      dispatch({ ...action,\n        abortController: abortController\n      });\n\n      var _filterText;\n\n      let previousFilterText = (_filterText = action.filterText) !== null && _filterText !== void 0 ? _filterText : data.filterText;\n\n      var _sortDescriptor;\n\n      let response = await fn({\n        items: data.items.slice(),\n        selectedKeys: data.selectedKeys,\n        sortDescriptor: (_sortDescriptor = action.sortDescriptor) !== null && _sortDescriptor !== void 0 ? _sortDescriptor : data.sortDescriptor,\n        signal: abortController.signal,\n        cursor: action.type === 'loadingMore' ? data.cursor : null,\n        filterText: previousFilterText\n      });\n\n      var _filterText4;\n\n      let filterText = (_filterText4 = response.filterText) !== null && _filterText4 !== void 0 ? _filterText4 : previousFilterText;\n      dispatch({\n        type: 'success',\n        ...response,\n        abortController: abortController\n      }); // Fetch a new filtered list if filterText is updated via `load` response func rather than list.setFilterText\n      // Only do this if not aborted (e.g. user triggers another filter action before load completes)\n\n      if (filterText && filterText !== previousFilterText && !abortController.signal.aborted) dispatchFetch({\n        type: 'filtering',\n        filterText: filterText\n      }, load);\n    } catch (e) {\n      dispatch({\n        type: 'error',\n        error: e,\n        abortController: abortController\n      });\n    }\n  };\n\n  $d70Aq$useEffect(() => {\n    dispatchFetch({\n      type: 'loading'\n    }, load); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    items: data.items,\n    selectedKeys: data.selectedKeys,\n    sortDescriptor: data.sortDescriptor,\n    isLoading: data.state === 'loading' || data.state === 'loadingMore' || data.state === 'sorting' || data.state === 'filtering',\n    loadingState: data.state,\n    error: data.error,\n    filterText: data.filterText,\n\n    getItem(key) {\n      return data.items.find(item => getKey(item) === key);\n    },\n\n    reload() {\n      dispatchFetch({\n        type: 'loading'\n      }, load);\n    },\n\n    loadMore() {\n      // Ignore if already loading more or if performing server side filtering.\n      if (data.state === 'loadingMore' || data.state === 'filtering' || data.cursor == null) return;\n      dispatchFetch({\n        type: 'loadingMore'\n      }, load);\n    },\n\n    sort(sortDescriptor) {\n      dispatchFetch({\n        type: 'sorting',\n        sortDescriptor: sortDescriptor\n      }, sort || load);\n    },\n\n    ...$0d86e9c8f07f9a7b$export$79c0c687a5963b0a({ ...options,\n      getKey: getKey,\n      cursor: data.cursor\n    }, fn => {\n      dispatch({\n        type: 'update',\n        updater: fn\n      });\n    }),\n\n    setFilterText(filterText) {\n      dispatchFetch({\n        type: 'filtering',\n        filterText: filterText\n      }, load);\n    }\n\n  };\n}\n\nfunction $be2ea0343af54212$export$d14e1352e21f4a16(options) {\n  let {\n    initialItems: initialItems1 = [],\n    initialSelectedKeys: initialSelectedKeys,\n    getKey = item => item.id || item.key,\n    getChildren = item => item.children\n  } = options;\n  let map = $d70Aq$useMemo(() => new Map(), []); // We only want to compute this on initial render.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  let initialNodes = $d70Aq$useMemo(() => buildTree(initialItems1), []);\n  let [items1, setItems] = $d70Aq$useState(initialNodes);\n  let [selectedKeys, setSelectedKeys] = $d70Aq$useState(new Set(initialSelectedKeys || []));\n\n  function buildTree(initialItems = [], parentKey) {\n    return initialItems.map(item => {\n      let node = {\n        key: getKey(item),\n        parentKey: parentKey,\n        value: item,\n        children: null\n      };\n      node.children = buildTree(getChildren(item), node.key);\n      map.set(node.key, node);\n      return node;\n    });\n  }\n\n  function updateTree(items, key, update) {\n    let node = map.get(key);\n    if (!node) return items; // Create a new node. If null, then delete the node, otherwise replace.\n\n    let newNode = update(node);\n    if (newNode == null) deleteNode(node);else addNode(newNode); // Walk up the tree and update each parent to refer to the new chilren.\n\n    while (node.parentKey) {\n      let nextParent = map.get(node.parentKey);\n      let copy = {\n        key: nextParent.key,\n        parentKey: nextParent.parentKey,\n        value: nextParent.value,\n        children: null\n      };\n      let children = nextParent.children;\n      if (newNode == null) children = children.filter(c => c !== node);\n      copy.children = children.map(child => {\n        if (child === node) return newNode;\n        return child;\n      });\n      map.set(copy.key, copy);\n      newNode = copy;\n      node = nextParent;\n    }\n\n    if (newNode == null) items = items.filter(c => c !== node);\n    return items.map(item => {\n      if (item === node) return newNode;\n      return item;\n    });\n  }\n\n  function addNode(node) {\n    map.set(node.key, node);\n\n    for (let child of node.children) addNode(child);\n  }\n\n  function deleteNode(node) {\n    map.delete(node.key);\n\n    for (let child of node.children) deleteNode(child);\n  }\n\n  return {\n    items: items1,\n    selectedKeys: selectedKeys,\n    setSelectedKeys: setSelectedKeys,\n\n    getItem(key) {\n      return map.get(key);\n    },\n\n    insert(parentKey, index, ...values) {\n      setItems(items => {\n        let nodes = buildTree(values, parentKey); // If parentKey is null, insert into the root.\n\n        if (parentKey == null) return [...items.slice(0, index), ...nodes, ...items.slice(index)]; // Otherwise, update the parent node and its ancestors.\n\n        return updateTree(items, parentKey, parentNode => ({\n          key: parentNode.key,\n          parentKey: parentNode.parentKey,\n          value: parentNode.value,\n          children: [...parentNode.children.slice(0, index), ...nodes, ...parentNode.children.slice(index)]\n        }));\n      });\n    },\n\n    insertBefore(key, ...values) {\n      let node = map.get(key);\n      if (!node) return;\n      let parentNode = map.get(node.parentKey);\n      let nodes = parentNode ? parentNode.children : items1;\n      let index = nodes.indexOf(node);\n      this.insert(parentNode === null || parentNode === void 0 ? void 0 : parentNode.key, index, ...values);\n    },\n\n    insertAfter(key, ...values) {\n      let node = map.get(key);\n      if (!node) return;\n      let parentNode = map.get(node.parentKey);\n      let nodes = parentNode ? parentNode.children : items1;\n      let index = nodes.indexOf(node);\n      this.insert(parentNode === null || parentNode === void 0 ? void 0 : parentNode.key, index + 1, ...values);\n    },\n\n    prepend(parentKey, ...values) {\n      this.insert(parentKey, 0, ...values);\n    },\n\n    append(parentKey, ...values) {\n      if (parentKey == null) this.insert(null, items1.length, ...values);else {\n        let parentNode = map.get(parentKey);\n        if (!parentNode) return;\n        this.insert(parentKey, parentNode.children.length, ...values);\n      }\n    },\n\n    remove(...keys) {\n      let newItems = items1;\n\n      for (let key of keys) newItems = updateTree(newItems, key, () => null);\n\n      setItems(newItems);\n      let selection = new Set(selectedKeys);\n\n      for (let key1 of selectedKeys) if (!map.has(key1)) selection.delete(key1);\n\n      setSelectedKeys(selection);\n    },\n\n    removeSelectedItems() {\n      this.remove(...selectedKeys);\n    },\n\n    move(key, toParentKey, index) {\n      setItems(items => {\n        let node = map.get(key);\n        if (!node) return items;\n        items = updateTree(items, key, () => null);\n        const movedNode = { ...node,\n          parentKey: toParentKey\n        };\n        return updateTree(items, toParentKey, parentNode => ({\n          key: parentNode.key,\n          parentKey: parentNode.parentKey,\n          value: parentNode.value,\n          children: [...parentNode.children.slice(0, index), movedNode, ...parentNode.children.slice(index)]\n        }));\n      });\n    },\n\n    update(oldKey, newValue) {\n      setItems(items => updateTree(items, oldKey, oldNode => {\n        let node = {\n          key: oldNode.key,\n          parentKey: oldNode.parentKey,\n          value: newValue,\n          children: null\n        };\n        node.children = buildTree(getChildren(newValue), node.key);\n        return node;\n      }));\n    }\n\n  };\n}\n\nexport { $f86e6c1ec7da6ebb$export$bc3384a35de93d66 as useAsyncList, $be2ea0343af54212$export$d14e1352e21f4a16 as useTreeData, $0d86e9c8f07f9a7b$export$762f73dccccd255d as useListData };","map":{"version":3,"sources":["packages/@react-stately/data/src/useAsyncList.ts","packages/@react-stately/data/src/useListData.ts","packages/@react-stately/data/src/useTreeData.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createListActions, ListData, ListState} from './useListData';\nimport {Key, Reducer, useEffect, useReducer} from 'react';\nimport {LoadingState, Selection, SortDescriptor} from '@react-types/shared';\n\nexport interface AsyncListOptions<T, C> {\n  /** The keys for the initially selected items. */\n  initialSelectedKeys?: Iterable<Key>,\n  /** The initial sort descriptor. */\n  initialSortDescriptor?: SortDescriptor,\n  /** The initial filter text. */\n  initialFilterText?: string,\n  /** A function that returns a unique key for an item object. */\n  getKey?: (item: T) => Key,\n  /** A function that loads the data for the items in the list. */\n  load: AsyncListLoadFunction<T, C>,\n  /**\n   * An optional function that performs sorting. If not provided,\n   * then `sortDescriptor` is passed to the `load` function.\n   */\n  sort?: AsyncListLoadFunction<T, C>\n}\n\ntype AsyncListLoadFunction<T, C> = (state: AsyncListLoadOptions<T, C>) => AsyncListStateUpdate<T, C> | Promise<AsyncListStateUpdate<T, C>>;\n\ninterface AsyncListLoadOptions<T, C> {\n  /** The items currently in the list. */\n  items: T[],\n  /** The keys of the currently selected items in the list. */\n  selectedKeys: Selection,\n  /** The current sort descriptor for the list. */\n  sortDescriptor: SortDescriptor,\n  /** An abort signal used to notify the load function that the request has been aborted. */\n  signal: AbortSignal,\n  /** The pagination cursor returned from the last page load. */\n  cursor?: C,\n  /** The current filter text used to perform server side filtering. */\n  filterText?: string,\n  /** The current loading state of the list. */\n  loadingState?: LoadingState\n}\n\ninterface AsyncListStateUpdate<T, C> {\n  /** The new items to append to the list. */\n  items: Iterable<T>,\n  /** The keys to add to the selection. */\n  selectedKeys?: Iterable<Key>,\n  /** The sort descriptor to set. */\n  sortDescriptor?: SortDescriptor,\n  /** The pagination cursor to be used for the next page load. */\n  cursor?: C,\n  /** The updated filter text for the list. */\n  filterText?: string\n}\n\ninterface AsyncListState<T, C> extends ListState<T> {\n  state: LoadingState,\n  items: T[],\n  // disabledKeys?: Iterable<Key>,\n  selectedKeys: Selection,\n  // selectedKey?: Key,\n  // expandedKeys?: Iterable<Key>,\n  sortDescriptor?: SortDescriptor,\n  error?: Error,\n  abortController?: AbortController,\n  cursor?: C\n}\n\ntype ActionType = 'success' | 'error' | 'loading' | 'loadingMore' | 'sorting' | 'update' | 'filtering';\ninterface Action<T, C> {\n  type: ActionType,\n  items?: Iterable<T>,\n  selectedKeys?: Iterable<Key>,\n  sortDescriptor?: SortDescriptor,\n  error?: Error,\n  abortController?: AbortController,\n  updater?: (state: ListState<T>) => ListState<T>,\n  cursor?: C,\n  filterText?: string\n}\n\nexport interface AsyncListData<T> extends ListData<T> {\n  /** Whether data is currently being loaded. */\n  isLoading: boolean,\n  /** If loading data failed, then this contains the error that occurred. */\n  error?: Error,\n  // disabledKeys?: Set<Key>,\n  // selectedKey?: Key,\n  // expandedKeys?: Set<Key>,\n  /** The current sort descriptor for the list. */\n  sortDescriptor?: SortDescriptor,\n\n  /** Reloads the data in the list. */\n  reload(): void,\n  /** Loads the next page of data in the list. */\n  loadMore(): void,\n  /** Triggers sorting for the list. */\n  sort(descriptor: SortDescriptor): void,\n  /** The current loading state for the list. */\n  loadingState: LoadingState\n}\n\nfunction reducer<T, C>(data: AsyncListState<T, C>, action: Action<T, C>): AsyncListState<T, C> {\n  let selectedKeys;\n  switch (data.state) {\n    case 'idle':\n    case 'error':\n      switch (action.type) {\n        case 'loading':\n        case 'loadingMore':\n        case 'sorting':\n        case 'filtering':\n          return {\n            ...data,\n            filterText: action.filterText ?? data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n            abortController: action.abortController\n          };\n        case 'update':\n          return {\n            ...data,\n            ...action.updater(data)\n          };\n        case 'success':\n        case 'error':\n          return data;\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    case 'loading':\n    case 'sorting':\n    case 'filtering':\n      switch (action.type) {\n        case 'success':\n          // Ignore if there is a newer abortcontroller in state.\n          // This means that multiple requests were going at once.\n          // We want to take only the latest result.\n          if (action.abortController !== data.abortController) {\n            return data;\n          }\n\n          selectedKeys = action.selectedKeys ?? data.selectedKeys;\n          return {\n            ...data,\n            filterText: action.filterText ?? data.filterText,\n            state: 'idle',\n            items: [...action.items],\n            selectedKeys: selectedKeys === 'all' ? 'all' : new Set(selectedKeys),\n            sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n            abortController: null,\n            cursor: action.cursor\n          };\n        case 'error':\n          if (action.abortController !== data.abortController) {\n            return data;\n          }\n\n          return {\n            ...data,\n            state: 'error',\n            error: action.error,\n            abortController: null\n          };\n        case 'loading':\n        case 'loadingMore':\n        case 'sorting':\n        case 'filtering':\n          // We're already loading, and another load was triggered at the same time.\n          // We need to abort the previous load and start a new one.\n          data.abortController.abort();\n          return {\n            ...data,\n            filterText: action.filterText ?? data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            abortController: action.abortController\n          };\n        case 'update':\n          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).\n          // Update data but don't abort previous load.\n          return {\n            ...data,\n            ...action.updater(data)\n          };\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    case 'loadingMore':\n      switch (action.type) {\n        case 'success':\n          selectedKeys = (data.selectedKeys === 'all' || action.selectedKeys === 'all')\n            ? 'all'\n            : new Set([...data.selectedKeys, ...(action.selectedKeys ?? [])]);\n          // Append the new items\n          return {\n            ...data,\n            state: 'idle',\n            items: [...data.items, ...action.items],\n            selectedKeys,\n            sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n            abortController: null,\n            cursor: action.cursor\n          };\n        case 'error':\n          if (action.abortController !== data.abortController) {\n            return data;\n          }\n\n          return {\n            ...data,\n            state: 'error',\n            error: action.error\n          };\n        case 'loading':\n        case 'sorting':\n        case 'filtering':\n          // We're already loading more, and another load was triggered at the same time.\n          // We need to abort the previous load more and start a new one.\n          data.abortController.abort();\n          return {\n            ...data,\n            filterText: action.filterText ?? data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            abortController: action.abortController\n          };\n        case 'loadingMore':\n          // If already loading more and another loading more is triggered, abort the new load more since\n          // it is a duplicate request since the cursor hasn't been updated.\n          // Do not overwrite the data.abortController\n          action.abortController.abort();\n\n          return data;\n        case 'update':\n          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).\n          // Update data but don't abort previous load.\n          return {\n            ...data,\n            ...action.updater(data)\n          };\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    default:\n      throw new Error(`Invalid state \"${data.state}\"`);\n  }\n}\n\n/**\n * Manages state for an immutable async loaded list data structure, and provides convenience methods to\n * update the data over time. Manages loading and error states, pagination, and sorting.\n */\nexport function useAsyncList<T, C = string>(options: AsyncListOptions<T, C>): AsyncListData<T> {\n  const {\n    load,\n    sort,\n    initialSelectedKeys,\n    initialSortDescriptor,\n    getKey = (item: any) => item.id || item.key,\n    initialFilterText = ''\n  } = options;\n\n  let [data, dispatch] = useReducer<Reducer<AsyncListState<T, C>, Action<T, C>>>(reducer, {\n    state: 'idle',\n    error: null,\n    items: [],\n    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys),\n    sortDescriptor: initialSortDescriptor,\n    filterText: initialFilterText\n  });\n\n  const dispatchFetch = async (action: Action<T, C>, fn: AsyncListLoadFunction<T, C>) => {\n    let abortController = new AbortController();\n    try {\n      dispatch({...action, abortController});\n      let previousFilterText = action.filterText ?? data.filterText;\n\n      let response = await fn({\n        items: data.items.slice(),\n        selectedKeys: data.selectedKeys,\n        sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n        signal: abortController.signal,\n        cursor: action.type === 'loadingMore' ? data.cursor : null,\n        filterText: previousFilterText\n      });\n\n      let filterText = response.filterText ?? previousFilterText;\n      dispatch({type: 'success', ...response, abortController});\n\n      // Fetch a new filtered list if filterText is updated via `load` response func rather than list.setFilterText\n      // Only do this if not aborted (e.g. user triggers another filter action before load completes)\n      if (filterText && (filterText !== previousFilterText) && !abortController.signal.aborted) {\n        dispatchFetch({type: 'filtering', filterText}, load);\n      }\n    } catch (e) {\n      dispatch({type: 'error', error: e, abortController});\n    }\n  };\n\n  useEffect(() => {\n    dispatchFetch({type: 'loading'}, load);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    items: data.items,\n    selectedKeys: data.selectedKeys,\n    sortDescriptor: data.sortDescriptor,\n    isLoading: data.state === 'loading' || data.state === 'loadingMore' || data.state === 'sorting' || data.state === 'filtering',\n    loadingState: data.state,\n    error: data.error,\n    filterText: data.filterText,\n    getItem(key: Key) {\n      return data.items.find(item => getKey(item) === key);\n    },\n    reload() {\n      dispatchFetch({type: 'loading'}, load);\n    },\n    loadMore() {\n      // Ignore if already loading more or if performing server side filtering.\n      if (data.state === 'loadingMore' || data.state === 'filtering' || data.cursor == null) {\n        return;\n      }\n\n      dispatchFetch({type: 'loadingMore'}, load);\n    },\n    sort(sortDescriptor: SortDescriptor) {\n      dispatchFetch({type: 'sorting', sortDescriptor}, sort || load);\n    },\n    ...createListActions({...options, getKey, cursor: data.cursor}, fn => {\n      dispatch({type: 'update', updater: fn});\n    }),\n    setFilterText(filterText: string) {\n      dispatchFetch({type: 'filtering', filterText}, load);\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, useMemo, useState} from 'react';\nimport {Selection} from '@react-types/shared';\n\nexport interface ListOptions<T> {\n  /** Initial items in the list. */\n  initialItems?: T[],\n  /** The keys for the initially selected items. */\n  initialSelectedKeys?: 'all' | Iterable<Key>,\n  /** The initial text to filter the list by. */\n  initialFilterText?: string,\n  /** A function that returns a unique key for an item object. */\n  getKey?: (item: T) => Key,\n  /** A function that returns whether a item matches the current filter text. */\n  filter?: (item: T, filterText: string) => boolean\n}\n\nexport interface ListData<T> {\n  /** The items in the list. */\n  items: T[],\n\n  /** The keys of the currently selected items in the list. */\n  selectedKeys: Selection,\n\n  /** Sets the selected keys. */\n  setSelectedKeys(keys: Selection): void,\n\n  /** The current filter text. */\n  filterText: string,\n\n  /** Sets the filter text. */\n  setFilterText(filterText: string): void,\n\n  /**\n   * Gets an item from the list by key.\n   * @param key - The key of the item to retrieve.\n   */\n  getItem(key: Key): T,\n\n  /**\n   * Inserts items into the list at the given index.\n   * @param index - The index to insert into.\n   * @param values - The values to insert.\n   */\n  insert(index: number, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list before the item at the given key.\n   * @param key - The key of the item to insert before.\n   * @param values - The values to insert.\n   */\n  insertBefore(key: Key, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list after the item at the given key.\n   * @param key - The key of the item to insert after.\n   * @param values - The values to insert.\n   */\n  insertAfter(key: Key, ...values: T[]): void,\n\n  /**\n   * Appends items to the list.\n   * @param values - The values to insert.\n   */\n  append(...values: T[]): void,\n\n  /**\n   * Prepends items to the list.\n   * @param value - The value to insert.\n   */\n  prepend(...values: T[]): void,\n\n  /**\n   * Removes items from the list by their keys.\n   * @param keys - The keys of the item to remove.\n   */\n  remove(...keys: Key[]): void,\n\n  /**\n   * Removes all items from the list that are currently\n   * in the set of selected items.\n   */\n  removeSelectedItems(): void,\n\n  /**\n   * Moves an item within the list.\n   * @param key - The key of the item to move.\n   * @param toIndex - The index to move the item to.\n   */\n  move(key: Key, toIndex: number): void,\n\n  /**\n   * Moves one or more items before a given key.\n   * @param key - The key of the item to move the items before.\n   * @param keys - The keys of the items to move.\n   */\n  moveBefore(key: Key, keys: Iterable<Key>): void,\n\n  /**\n   * Moves one or more items after a given key.\n   * @param key - The key of the item to move the items after.\n   * @param keys - The keys of the items to move.\n   */\n  moveAfter(key: Key, keys: Iterable<Key>): void,\n\n  /**\n   * Updates an item in the list.\n   * @param key - The key of the item to update.\n   * @param newValue - The new value for the item.\n   */\n  update(key: Key, newValue: T): void\n}\n\nexport interface ListState<T> {\n  items: T[],\n  selectedKeys: Selection,\n  filterText: string\n}\n\ninterface CreateListOptions<T, C> extends ListOptions<T> {\n  cursor?: C\n}\n\n/**\n * Manages state for an immutable list data structure, and provides convenience methods to\n * update the data over time.\n */\nexport function useListData<T>(options: ListOptions<T>): ListData<T> {\n  let {\n    initialItems = [],\n    initialSelectedKeys,\n    getKey = (item: any) => item.id || item.key,\n    filter,\n    initialFilterText = ''\n  } = options;\n\n  // Store both items and filteredItems in state so we can go back to the unfiltered list\n  let [state, setState] = useState<ListState<T>>({\n    items: initialItems,\n    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys || []),\n    filterText: initialFilterText\n  });\n\n  let filteredItems = useMemo(\n    () => filter ? state.items.filter(item => filter(item, state.filterText)) : state.items,\n    [state.items, state.filterText, filter]);\n\n  return {\n    ...state,\n    items: filteredItems,\n    ...createListActions({getKey}, setState),\n    getItem(key: Key) {\n      return state.items.find(item => getKey(item) === key);\n    }\n  };\n}\n\nexport function createListActions<T, C>(opts: CreateListOptions<T, C>, dispatch: (updater: (state: ListState<T>) => ListState<T>) => void): Omit<ListData<T>, 'items' | 'selectedKeys' | 'getItem' | 'filterText'> {\n  let {cursor, getKey} = opts;\n  return {\n    setSelectedKeys(selectedKeys: Selection) {\n      dispatch(state => ({\n        ...state,\n        selectedKeys\n      }));\n    },\n    setFilterText(filterText: string) {\n      dispatch(state => ({\n        ...state,\n        filterText\n      }));\n    },\n    insert(index: number, ...values: T[]) {\n      dispatch(state => insert(state, index, ...values));\n    },\n    insertBefore(key: Key, ...values: T[]) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return;\n        }\n\n        return insert(state, index, ...values);\n      });\n    },\n    insertAfter(key: Key, ...values: T[]) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return;\n        }\n\n        return insert(state, index + 1, ...values);\n      });\n    },\n    prepend(...values: T[]) {\n      dispatch(state => insert(state, 0, ...values));\n    },\n    append(...values: T[]) {\n      dispatch(state => insert(state, state.items.length, ...values));\n    },\n    remove(...keys: Key[]) {\n      dispatch(state => {\n        let keySet = new Set(keys);\n        let items = state.items.filter(item => !keySet.has(getKey(item)));\n\n        let selection: Selection = 'all';\n        if (state.selectedKeys !== 'all') {\n          selection = new Set(state.selectedKeys);\n          for (let key of keys) {\n            selection.delete(key);\n          }\n        }\n        if (cursor == null && items.length === 0) {\n          selection = new Set();\n        }\n\n        return {\n          ...state,\n          items,\n          selectedKeys: selection\n        };\n      });\n    },\n    removeSelectedItems() {\n      dispatch(state => {\n        if (state.selectedKeys === 'all') {\n          return {\n            ...state,\n            items: [],\n            selectedKeys: new Set()\n          };\n        }\n\n        let selectedKeys = state.selectedKeys;\n        let items = state.items.filter(item => !selectedKeys.has(getKey(item)));\n        return {\n          ...state,\n          items,\n          selectedKeys: new Set()\n        };\n      });\n    },\n    move(key: Key, toIndex: number) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return state;\n        }\n\n        let copy = state.items.slice();\n        let [item] = copy.splice(index, 1);\n        copy.splice(toIndex, 0, item);\n        return {\n          ...state,\n          items: copy\n        };\n      });\n    },\n    moveBefore(key: Key, keys: Iterable<Key>) {\n      dispatch(state => {\n        let toIndex = state.items.findIndex(item => getKey(item) === key);\n        if (toIndex === -1) {\n          return state;\n        }\n\n        // Find indices of keys to move. Sort them so that the order in the list is retained.\n        let keyArray = Array.isArray(keys) ? keys : [...keys];\n        let indices = keyArray.map(key => state.items.findIndex(item => getKey(item) === key)).sort();\n        return move(state, indices, toIndex);\n      });\n    },\n    moveAfter(key: Key, keys: Iterable<Key>) {\n      dispatch(state => {\n        let toIndex = state.items.findIndex(item => getKey(item) === key);\n        if (toIndex === -1) {\n          return state;\n        }\n\n        let keyArray = Array.isArray(keys) ? keys : [...keys];\n        let indices = keyArray.map(key => state.items.findIndex(item => getKey(item) === key)).sort();\n        return move(state, indices, toIndex + 1);\n      });\n    },\n    update(key: Key, newValue: T) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return state;\n        }\n\n        return {\n          ...state,\n          items: [\n            ...state.items.slice(0, index),\n            newValue,\n            ...state.items.slice(index + 1)\n          ]\n        };\n      });\n    }\n  };\n}\n\nfunction insert<T>(state: ListState<T>, index: number, ...values: T[]): ListState<T> {\n  return {\n    ...state,\n    items: [\n      ...state.items.slice(0, index),\n      ...values,\n      ...state.items.slice(index)\n    ]\n  };\n}\n\nfunction move<T>(state: ListState<T>, indices: number[], toIndex: number): ListState<T> {\n  // Shift the target down by the number of items being moved from before the target\n  for (let index of indices) {\n    if (index < toIndex) {\n      toIndex--;\n    }\n  }\n\n  let moves = indices.map(from => ({\n    from,\n    to: toIndex++\n  }));\n\n  // Shift later from indices down if they have a larger index\n  for (let i = 0; i < moves.length; i++) {\n    let a = moves[i].from;\n    for (let j = i; j < moves.length; j++) {\n      let b = moves[j].from;\n\n      if (b > a) {\n        moves[j].from--;\n      }\n    }\n  }\n\n  // Interleave the moves so they can be applied one by one rather than all at once\n  for (let i = 0; i < moves.length; i++) {\n    let a = moves[i];\n    for (let j = moves.length - 1; j > i; j--) {\n      let b = moves[j];\n\n      if (b.from < a.to) {\n        a.to++;\n      } else {\n        b.from++;\n      }\n    }\n  }\n\n  let copy = state.items.slice();\n  for (let move of moves) {\n    let [item] = copy.splice(move.from, 1);\n    copy.splice(move.to, 0, item);\n  }\n\n  return {\n    ...state,\n    items: copy\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, useMemo, useState} from 'react';\n\nexport interface TreeOptions<T extends object> {\n  /** Initial root items in the tree. */\n  initialItems?: T[],\n  /** The keys for the initially selected items. */\n  initialSelectedKeys?: Iterable<Key>,\n  /** A function that returns a unique key for an item object. */\n  getKey?: (item: T) => Key,\n  /** A function that returns the children for an item object. */\n  getChildren?: (item: T) => T[]\n}\n\ninterface TreeNode<T extends object> {\n  /** A unique key for the tree node. */\n  key: Key,\n  /** The key of the parent node. */\n  parentKey: Key,\n  /** The value object for the tree node. */\n  value: T,\n  /** Children of the tree node. */\n  children: TreeNode<T>[]\n}\n\nexport interface TreeData<T extends object> {\n  /** The root nodes in the tree. */\n  items: TreeNode<T>[],\n\n  /** The keys of the currently selected items in the tree. */\n  selectedKeys: Set<Key>,\n\n  /** Sets the selected keys. */\n  setSelectedKeys(keys: Set<Key>): void,\n\n  /**\n   * Gets a node from the tree by key.\n   * @param key - The key of the item to retrieve.\n   */\n  getItem(key: Key): TreeNode<T>,\n\n  /**\n   * Inserts an item into a parent node as a child.\n   * @param parentKey - The key of the parent item to insert into. `null` for the root.\n   * @param index - The index within the parent to insert into.\n   * @param value - The value to insert.\n   */\n  insert(parentKey: Key | null, index: number, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list before the item at the given key.\n   * @param key - The key of the item to insert before.\n   * @param values - The values to insert.\n   */\n  insertBefore(key: Key, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list after the item at the given key.\n   * @param key - The key of the item to insert after.\n   * @param values - The values to insert.\n   */\n  insertAfter(key: Key, ...values: T[]): void,\n\n  /**\n   * Appends an item into a parent node as a child.\n   * @param parentKey - The key of the parent item to insert into. `null` for the root.\n   * @param value - The value to insert.\n   */\n  append(parentKey: Key | null, ...values: T[]): void,\n\n  /**\n   * Prepends an item into a parent node as a child.\n   * @param parentKey - The key of the parent item to insert into. `null` for the root.\n   * @param value - The value to insert.\n   */\n  prepend(parentKey: Key | null, ...value: T[]): void,\n\n  /**\n   * Removes an item from the tree by its key.\n   * @param key - The key of the item to remove.\n   */\n  remove(...keys: Key[]): void,\n\n  /**\n   * Removes all items from the tree that are currently\n   * in the set of selected items.\n   */\n  removeSelectedItems(): void,\n\n  /**\n   * Moves an item within the tree.\n   * @param key - The key of the item to move.\n   * @param toParentKey - The key of the new parent to insert into.\n   * @param index - The index within the new parent to insert at.\n   */\n  move(key: Key, toParentKey: Key, index: number): void,\n\n  /**\n   * Updates an item in the tree.\n   * @param key - The key of the item to update.\n   * @param newValue - The new value for the item.\n   */\n  update(key: Key, newValue: T): void\n}\n\n/**\n * Manages state for an immutable tree data structure, and provides convenience methods to\n * update the data over time.\n */\nexport function useTreeData<T extends object>(options: TreeOptions<T>): TreeData<T> {\n  let {\n    initialItems = [],\n    initialSelectedKeys,\n    getKey = (item: any) => item.id || item.key,\n    getChildren = (item: any) => item.children\n  } = options;\n  let map = useMemo(() => new Map<Key, TreeNode<T>>(), []);\n\n  // We only want to compute this on initial render.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  let initialNodes = useMemo(() => buildTree(initialItems), []);\n  let [items, setItems] = useState(initialNodes);\n  let [selectedKeys, setSelectedKeys] = useState(new Set<Key>(initialSelectedKeys || []));\n\n  function buildTree(initialItems: T[] = [], parentKey?: Key | null) {\n    return initialItems.map(item => {\n      let node: TreeNode<T> = {\n        key: getKey(item),\n        parentKey: parentKey,\n        value: item,\n        children: null\n      };\n\n      node.children = buildTree(getChildren(item), node.key);\n      map.set(node.key, node);\n      return node;\n    });\n  }\n\n  function updateTree(items: TreeNode<T>[], key: Key, update: (node: TreeNode<T>) => TreeNode<T>) {\n    let node = map.get(key);\n    if (!node) {\n      return items;\n    }\n\n    // Create a new node. If null, then delete the node, otherwise replace.\n    let newNode = update(node);\n    if (newNode == null) {\n      deleteNode(node);\n    } else {\n      addNode(newNode);\n    }\n\n    // Walk up the tree and update each parent to refer to the new chilren.\n    while (node.parentKey) {\n      let nextParent = map.get(node.parentKey);\n      let copy: TreeNode<T> = {\n        key: nextParent.key,\n        parentKey: nextParent.parentKey,\n        value: nextParent.value,\n        children: null\n      };\n\n      let children = nextParent.children;\n      if (newNode == null) {\n        children = children.filter(c => c !== node);\n      }\n\n      copy.children = children.map(child => {\n        if (child === node) {\n          return newNode;\n        }\n\n        return child;\n      });\n\n      map.set(copy.key, copy);\n\n      newNode = copy;\n      node = nextParent;\n    }\n\n    if (newNode == null) {\n      items = items.filter(c => c !== node);\n    }\n\n    return items.map(item => {\n      if (item === node) {\n        return newNode;\n      }\n\n      return item;\n    });\n  }\n\n  function addNode(node: TreeNode<T>) {\n    map.set(node.key, node);\n    for (let child of node.children) {\n      addNode(child);\n    }\n  }\n\n  function deleteNode(node: TreeNode<T>) {\n    map.delete(node.key);\n    for (let child of node.children) {\n      deleteNode(child);\n    }\n  }\n\n  return {\n    items,\n    selectedKeys,\n    setSelectedKeys,\n    getItem(key: Key) {\n      return map.get(key);\n    },\n    insert(parentKey: Key | null, index: number, ...values: T[]) {\n      setItems(items => {\n        let nodes = buildTree(values, parentKey);\n\n        // If parentKey is null, insert into the root.\n        if (parentKey == null) {\n          return [\n            ...items.slice(0, index),\n            ...nodes,\n            ...items.slice(index)\n          ];\n        }\n\n        // Otherwise, update the parent node and its ancestors.\n        return updateTree(items, parentKey, parentNode => ({\n          key: parentNode.key,\n          parentKey: parentNode.parentKey,\n          value: parentNode.value,\n          children: [\n            ...parentNode.children.slice(0, index),\n            ...nodes,\n            ...parentNode.children.slice(index)\n          ]\n        }));\n      });\n    },\n    insertBefore(key: Key, ...values: T[]): void {\n      let node = map.get(key);\n      if (!node) {\n        return;\n      }\n\n      let parentNode = map.get(node.parentKey);\n      let nodes = parentNode ? parentNode.children : items;\n      let index = nodes.indexOf(node);\n      this.insert(parentNode?.key, index, ...values);\n    },\n    insertAfter(key: Key, ...values: T[]): void {\n      let node = map.get(key);\n      if (!node) {\n        return;\n      }\n\n      let parentNode = map.get(node.parentKey);\n      let nodes = parentNode ? parentNode.children : items;\n      let index = nodes.indexOf(node);\n      this.insert(parentNode?.key, index + 1, ...values);\n    },\n    prepend(parentKey: Key | null, ...values: T[]) {\n      this.insert(parentKey, 0, ...values);\n    },\n    append(parentKey: Key | null, ...values: T[]) {\n      if (parentKey == null) {\n        this.insert(null, items.length, ...values);\n      } else {\n        let parentNode = map.get(parentKey);\n        if (!parentNode) {\n          return;\n        }\n\n        this.insert(parentKey, parentNode.children.length, ...values);\n      }\n    },\n    remove(...keys: Key[]) {\n      let newItems = items;\n      for (let key of keys) {\n        newItems = updateTree(newItems, key, () => null);\n      }\n\n      setItems(newItems);\n\n      let selection = new Set(selectedKeys);\n      for (let key of selectedKeys) {\n        if (!map.has(key)) {\n          selection.delete(key);\n        }\n      }\n\n      setSelectedKeys(selection);\n    },\n    removeSelectedItems() {\n      this.remove(...selectedKeys);\n    },\n    move(key: Key, toParentKey: Key, index: number) {\n      setItems(items => {\n        let node = map.get(key);\n        if (!node) {\n          return items;\n        }\n\n        items = updateTree(items, key, () => null);\n\n        const movedNode = {\n          ...node,\n          parentKey: toParentKey\n        };\n\n        return updateTree(items, toParentKey, parentNode => ({\n          key: parentNode.key,\n          parentKey: parentNode.parentKey,\n          value: parentNode.value,\n          children: [\n            ...parentNode.children.slice(0, index),\n            movedNode,\n            ...parentNode.children.slice(index)\n          ]\n        }));\n      });\n    },\n    update(oldKey: Key, newValue: T) {\n      setItems(items => updateTree(items, oldKey, oldNode => {\n        let node: TreeNode<T> = {\n          key: oldNode.key,\n          parentKey: oldNode.parentKey,\n          value: newValue,\n          children: null\n        };\n\n        node.children = buildTree(getChildren(newValue), node.key);\n        return node;\n      }));\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}