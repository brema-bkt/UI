{"ast":null,"code":"import { useMemo as $1OoTj$useMemo, useEffect as $1OoTj$useEffect } from \"react\";\nimport { useMultipleSelectionState as $1OoTj$useMultipleSelectionState, SelectionManager as $1OoTj$SelectionManager } from \"@react-stately/selection\";\nimport { useCollection as $1OoTj$useCollection } from \"@react-stately/collections\";\nimport { useControlledState as $1OoTj$useControlledState } from \"@react-stately/utils\";\nvar tmp = Symbol.iterator;\n\nclass $05ca4cd7c4a5a999$export$863faf230ee2118a {\n  *[tmp]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n\n  constructor(nodes, {\n    expandedKeys: expandedKeys\n  } = {}) {\n    this.keyMap = new Map();\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = node => {\n      this.keyMap.set(node.key, node);\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) for (let child of node.childNodes) visit(child);\n    };\n\n    for (let node2 of nodes) visit(node2);\n\n    let last;\n    let index = 0;\n\n    for (let [key, node1] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node1.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node1.prevKey = undefined;\n      }\n\n      if (node1.type === 'item') node1.index = index++;\n      last = node1; // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last === null || last === void 0 ? void 0 : last.key;\n  }\n\n}\n\nfunction $875d6693e12af071$export$728d6ba534403756(props) {\n  let [expandedKeys, setExpandedKeys] = $1OoTj$useControlledState(props.expandedKeys ? new Set(props.expandedKeys) : undefined, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(), props.onExpandedChange);\n  let selectionState = $1OoTj$useMultipleSelectionState(props);\n  let disabledKeys = $1OoTj$useMemo(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n  let tree = $1OoTj$useCollection(props, nodes => new $05ca4cd7c4a5a999$export$863faf230ee2118a(nodes, {\n    expandedKeys: expandedKeys\n  }), null, [expandedKeys]); // Reset focused key if that item is deleted from the collection.\n\n  $1OoTj$useEffect(() => {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n  }, [tree, selectionState.focusedKey]);\n\n  let onToggle = key => {\n    setExpandedKeys($875d6693e12af071$var$toggleKey(expandedKeys, key));\n  };\n\n  return {\n    collection: tree,\n    expandedKeys: expandedKeys,\n    disabledKeys: disabledKeys,\n    toggleKey: onToggle,\n    selectionManager: new $1OoTj$SelectionManager(tree, selectionState)\n  };\n}\n\nfunction $875d6693e12af071$var$toggleKey(set, key) {\n  let res = new Set(set);\n  if (res.has(key)) res.delete(key);else res.add(key);\n  return res;\n}\n\nexport { $875d6693e12af071$export$728d6ba534403756 as useTreeState };","map":{"version":3,"sources":["packages/@react-stately/tree/src/useTreeState.ts","packages/@react-stately/tree/src/TreeCollection.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, Expandable, MultipleSelection, Node} from '@react-types/shared';\nimport {Key, useEffect, useMemo} from 'react';\nimport {SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {TreeCollection} from './TreeCollection';\nimport {useCollection} from '@react-stately/collections';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface TreeProps<T> extends CollectionBase<T>, Expandable, MultipleSelection {}\nexport interface TreeState<T> {\n  /** A collection of items in the tree. */\n  readonly collection: Collection<Node<T>>,\n\n  /** A set of keys for items that are disabled. */\n  readonly disabledKeys: Set<Key>,\n\n  /** A set of keys for items that are expanded. */\n  readonly expandedKeys: Set<Key>,\n\n  /** Toggles the expanded state for an item by its key. */\n  toggleKey(key: Key): void,\n\n  /** A selection manager to read and update multiple selection state. */\n  readonly selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n */\nexport function useTreeState<T extends object>(props: TreeProps<T>): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange\n  );\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let tree = useCollection(props, nodes => new TreeCollection(nodes, {expandedKeys}), null, [expandedKeys]);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  let onToggle = (key: Key) => {\n    setExpandedKeys(toggleKey(expandedKeys, key));\n  };\n\n  return {\n    collection: tree,\n    expandedKeys,\n    disabledKeys,\n    toggleKey: onToggle,\n    selectionManager: new SelectionManager(tree, selectionState)\n  };\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>, {expandedKeys}: {expandedKeys?: Set<Key>} = {}) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}