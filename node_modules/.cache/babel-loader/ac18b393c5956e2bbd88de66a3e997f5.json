{"ast":null,"code":"import $cUVuN$swchelperssrc_class_private_field_initmjs from \"@swc/helpers/src/_class_private_field_init.mjs\";\nimport $cUVuN$swchelperssrc_define_propertymjs from \"@swc/helpers/src/_define_property.mjs\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {\n  return amount - numerator * Math.floor(amount / numerator);\n}\n\nfunction $2b4dce13dd5a17fa$export$784d13d8ee351f07(date) {\n  if (date.era) return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.calendar, date.era, date.year, date.month, date.day);else return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.calendar, date.year, date.month, date.day);\n}\n\nfunction $2b4dce13dd5a17fa$export$27fa0172ae2644b3(date) {\n  if (date.era) return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);else return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n}\n\nconst $3b62074eb05584b2$var$EPOCH = 1721426; // 001/01/03 Julian C.E.\n\nfunction $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {\n  year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);\n  let y1 = year - 1;\n  let monthOffset = -2;\n  if (month <= 2) monthOffset = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;\n  return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);\n}\n\nfunction $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nfunction $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {\n  return era === \"BC\" ? 1 - year : year;\n}\n\nfunction $3b62074eb05584b2$export$4475b7e617eb123c(year) {\n  let era = \"AD\";\n\n  if (year <= 0) {\n    era = \"BC\";\n    year = 1 - year;\n  }\n\n  return [era, year];\n}\n\nconst $3b62074eb05584b2$var$daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\n\nclass $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let jd0 = jd;\n    let depoch = jd0 - $3b62074eb05584b2$var$EPOCH;\n    let quadricent = Math.floor(depoch / 146097);\n    let dqc = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(depoch, 146097);\n    let cent = Math.floor(dqc / 36524);\n    let dcent = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dqc, 36524);\n    let quad = Math.floor(dcent / 1461);\n    let dquad = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dcent, 1461);\n    let yindex = Math.floor(dquad / 365);\n    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n    let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);\n    let yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);\n    let leapAdj = 2;\n    if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;\n    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n    let day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, month, day);\n  }\n\n  toJulianDay(date) {\n    return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? \"leapyear\" : \"standard\"][date.month - 1];\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  getMonthsInYear(date) {\n    return 12;\n  }\n\n  getDaysInYear(date) {\n    return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  getYearsInEra(date) {\n    return 9999;\n  }\n\n  getEras() {\n    return [\"BC\", \"AD\"];\n  }\n\n  isInverseEra(date) {\n    return date.era === \"BC\";\n  }\n\n  balanceDate(date) {\n    if (date.year <= 0) {\n      date.era = date.era === \"BC\" ? \"AD\" : \"BC\";\n      date.year = 1 - date.year;\n    }\n  }\n\n  constructor() {\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"gregory\");\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\n\n\nconst $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {\n  \"001\": 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AT: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\n\nfunction $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\nfunction $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar); // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\nfunction $14e0f24ef4ac5c92$export$5841f9eb9773f25f(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.era === b.era && a.year === b.year;\n}\n\nfunction $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a, b) {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\nfunction $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2(a, b) {\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\nfunction $14e0f24ef4ac5c92$export$ea840f5a6dda8147(a, b) {\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\n\nfunction $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {\n  return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));\n}\n\nfunction $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale) {\n  let julian = date.calendar.toJulianDay(date); // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n\n  let dayOfWeek = Math.ceil(julian + 1 - $14e0f24ef4ac5c92$var$getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  return dayOfWeek;\n}\n\nfunction $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {\n  return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(Date.now(), timeZone);\n}\n\nfunction $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {\n  return (0, $11d87f3f76e88657$export$93522d1a439f3617)($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));\n}\n\nfunction $14e0f24ef4ac5c92$export$68781ddf31c0090f(a, b) {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\n\nfunction $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a, b) {\n  return $14e0f24ef4ac5c92$var$timeToMs(a) - $14e0f24ef4ac5c92$var$timeToMs(b);\n}\n\nfunction $14e0f24ef4ac5c92$var$timeToMs(a) {\n  return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;\n}\n\nfunction $14e0f24ef4ac5c92$export$126c91c941de7e(a, timeZone) {\n  let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(a, timeZone);\n  let tomorrow = a.add({\n    days: 1\n  });\n  let tomorrowMs = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\n\nlet $14e0f24ef4ac5c92$var$localTimeZone = null;\n\nfunction $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {\n  // TODO: invalidate this somehow?\n  if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  return $14e0f24ef4ac5c92$var$localTimeZone;\n}\n\nfunction $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({\n    days: date.day - 1\n  });\n}\n\nfunction $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {\n  return date.add({\n    days: date.calendar.getDaysInMonth(date) - date.day\n  });\n}\n\nfunction $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {\n  return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({\n    months: date.month - 1\n  }));\n}\n\nfunction $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(date) {\n  return $14e0f24ef4ac5c92$export$a2258d9c4118825c(date.add({\n    months: date.calendar.getMonthsInYear(date) - date.month\n  }));\n}\n\nfunction $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {\n  if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);\n  return 1;\n}\n\nfunction $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {\n  if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);\n  return 1;\n}\n\nfunction $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale) {\n  let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);\n  return date.subtract({\n    days: dayOfWeek\n  });\n}\n\nfunction $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale) {\n  return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale).add({\n    days: 6\n  });\n}\n\nconst $14e0f24ef4ac5c92$var$cachedRegions = new Map();\n\nfunction $14e0f24ef4ac5c92$var$getRegion(locale) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);\n\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);\n    }\n\n    return region;\n  } // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n\n\n  let part = locale.split(\"-\")[1];\n  return part === \"u\" ? null : part;\n}\n\nfunction $14e0f24ef4ac5c92$var$getWeekStart(locale) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = $14e0f24ef4ac5c92$var$getRegion(locale);\n  return (0, $2fe286d2fb449abb$export$7a5acbd77d414bd9)[region] || 0;\n}\n\nfunction $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale) {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale) + days) / 7);\n}\n\nfunction $14e0f24ef4ac5c92$export$5c333a116e949cdd(a, b) {\n  if (a && b) return a.compare(b) <= 0 ? a : b;\n  return a || b;\n}\n\nfunction $14e0f24ef4ac5c92$export$a75f2bff57811055(a, b) {\n  if (a && b) return a.compare(b) >= 0 ? a : b;\n  return a || b;\n}\n\nconst $14e0f24ef4ac5c92$var$WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\n\nfunction $14e0f24ef4ac5c92$export$618d60ea299da42(date, locale) {\n  let julian = date.calendar.toJulianDay(date); // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  let region = $14e0f24ef4ac5c92$var$getRegion(locale); // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n\n  let [start, end] = $14e0f24ef4ac5c92$var$WEEKEND_DATA[region] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\n\nfunction $14e0f24ef4ac5c92$export$ee9d87258e1d19ed(date, locale) {\n  return !$14e0f24ef4ac5c92$export$618d60ea299da42(date, locale);\n}\n\nfunction $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {\n  date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n  let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);\n  return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\n\nfunction $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\n\nfunction $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {\n  // Fast path for UTC.\n  if (timeZone === \"UTC\") return 0; // Fast path: for local timezone, use native Date.\n\n  if (timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)()) return new Date(ms).getTimezoneOffset() * -60000;\n  let {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n    second: second\n  } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);\n  let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\n\nconst $11d87f3f76e88657$var$formattersByTimeZone = new Map();\n\nfunction $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {\n  let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);\n\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat(\"en-US\", {\n      timeZone: timeZone,\n      hour12: false,\n      era: \"short\",\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\"\n    });\n    $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);\n  }\n\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts = {};\n\n  for (let part of parts) if (part.type !== \"literal\") namedParts[part.type] = part.value;\n\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === \"BC\" || namedParts.era === \"B\" ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === \"24\" ? 0 : +namedParts.hour,\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\n\nconst $11d87f3f76e88657$var$DAYMILLIS = 86400000;\n\nfunction $11d87f3f76e88657$export$136f38efe7caf549(date, timeZone) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date);\n  let earlier = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let later = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  return $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later);\n}\n\nfunction $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));\n}\n\nfunction $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {\n  let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;\n}\n\nfunction $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation = \"compatible\") {\n  let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date); // Fast path: if the time zone is UTC, use native Date.\n\n  if (timeZone === \"UTC\") return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime); // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n\n  if (timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)() && disambiguation === \"compatible\") {\n    dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)()); // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n\n    let date1 = new Date();\n    let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(dateTime.era, dateTime.year);\n    date1.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date1.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date1.getTime();\n  }\n\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n  let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n  if (valid.length === 1) return valid[0];\n  if (valid.length > 1) switch (disambiguation) {\n    // 'compatible' means 'earlier' for \"fall back\" transitions\n    case \"compatible\":\n    case \"earlier\":\n      return valid[0];\n\n    case \"later\":\n      return valid[valid.length - 1];\n\n    case \"reject\":\n      throw new RangeError(\"Multiple possible absolute times found\");\n  }\n\n  switch (disambiguation) {\n    case \"earlier\":\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n\n    case \"compatible\":\n    case \"later\":\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n\n    case \"reject\":\n      throw new RangeError(\"No such absolute time found\");\n  }\n}\n\nfunction $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone, disambiguation = \"compatible\") {\n  return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));\n}\n\nfunction $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {\n  let offset = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n  return new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\n\nfunction $11d87f3f76e88657$export$e57ff100d91bd4b9(date, timeZone) {\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(date.getTime(), timeZone);\n}\n\nfunction $11d87f3f76e88657$export$d7f92bcd3596b086(date) {\n  return $11d87f3f76e88657$export$e57ff100d91bd4b9(date, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\n\nfunction $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\n\nfunction $11d87f3f76e88657$export$6f4d78149f3f53ac(date) {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\n\nfunction $11d87f3f76e88657$export$4d0393e732857be5(date) {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\n\nfunction $11d87f3f76e88657$export$b21e0b124e224484(date, time) {\n  let hour = 0,\n      minute = 0,\n      second = 0,\n      millisecond = 0;\n  if (\"timeZone\" in date) ({\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  } = date);else if (\"hour\" in date && !time) return date;\n  if (time) ({\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  } = time);\n  return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);\n}\n\nfunction $11d87f3f76e88657$export$d33f79e3ffc3dc83(dateTime) {\n  return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\n\nfunction $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {\n  if (date.calendar.identifier === calendar.identifier) return date;\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(copy);\n  return copy;\n}\n\nfunction $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {\n  if (date instanceof (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)) {\n    if (date.timeZone === timeZone) return date;\n    return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);\n  }\n\n  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);\n}\n\nfunction $11d87f3f76e88657$export$83aac07b4c37b25(date) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return new Date(ms);\n}\n\nfunction $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);\n}\n\nfunction $11d87f3f76e88657$export$d9b67bc93c097491(date) {\n  return $11d87f3f76e88657$export$538b00033cc11c75(date, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\n\nconst $735220c2d4774dd3$var$ONE_HOUR = 3600000;\n\nfunction $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {\n  let mutableDate = date.copy();\n  let days = \"hour\" in mutableDate ? $735220c2d4774dd3$var$addTimeFields(mutableDate, duration) : 0;\n  $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  mutableDate.month += duration.months || 0;\n  $735220c2d4774dd3$var$balanceYearMonth(mutableDate);\n  $735220c2d4774dd3$var$constrainMonthDay(mutableDate);\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n  $735220c2d4774dd3$var$balanceDay(mutableDate);\n  if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate); // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n  // The behavior here is slightly different than when constraining in the `set` function in that\n  // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n  // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n\n  if (mutableDate.year < 1) {\n    mutableDate.year = 1;\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n\n  if (mutableDate.year > maxYear) {\n    var _mutableDate_calendar, _mutableDate_calendar_isInverseEra;\n\n    let isInverseEra = (_mutableDate_calendar_isInverseEra = (_mutableDate_calendar = mutableDate.calendar).isInverseEra) === null || _mutableDate_calendar_isInverseEra === void 0 ? void 0 : _mutableDate_calendar_isInverseEra.call(_mutableDate_calendar, mutableDate);\n    mutableDate.year = maxYear;\n    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  if (mutableDate.month < 1) {\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n\n  if (mutableDate.month > maxMonth) {\n    mutableDate.month = maxMonth;\n    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n  return mutableDate;\n}\n\nfunction $735220c2d4774dd3$var$addYears(date, years) {\n  var _date_calendar, _date_calendar_isInverseEra;\n\n  if ((_date_calendar_isInverseEra = (_date_calendar = date.calendar).isInverseEra) === null || _date_calendar_isInverseEra === void 0 ? void 0 : _date_calendar_isInverseEra.call(_date_calendar, date)) years = -years;\n  date.year += years;\n}\n\nfunction $735220c2d4774dd3$var$balanceYearMonth(date) {\n  while (date.month < 1) {\n    $735220c2d4774dd3$var$addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n\n  let monthsInYear = 0;\n\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    $735220c2d4774dd3$var$addYears(date, 1);\n  }\n}\n\nfunction $735220c2d4774dd3$var$balanceDay(date) {\n  while (date.day < 1) {\n    date.month--;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n  }\n}\n\nfunction $735220c2d4774dd3$var$constrainMonthDay(date) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\n\nfunction $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {\n  if (date.calendar.constrainDate) date.calendar.constrainDate(date);\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  $735220c2d4774dd3$var$constrainMonthDay(date);\n}\n\nfunction $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {\n  let inverseDuration = {};\n\n  for (let key in duration) if (typeof duration[key] === \"number\") inverseDuration[key] = -duration[key];\n\n  return inverseDuration;\n}\n\nfunction $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {\n  return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\n\nfunction $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {\n  let mutableDate = date.copy();\n  if (fields.era != null) mutableDate.era = fields.era;\n  if (fields.year != null) mutableDate.year = fields.year;\n  if (fields.month != null) mutableDate.month = fields.month;\n  if (fields.day != null) mutableDate.day = fields.day;\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);\n  return mutableDate;\n}\n\nfunction $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {\n  let mutableValue = value.copy();\n  if (fields.hour != null) mutableValue.hour = fields.hour;\n  if (fields.minute != null) mutableValue.minute = fields.minute;\n  if (fields.second != null) mutableValue.second = fields.second;\n  if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;\n  $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);\n  return mutableValue;\n}\n\nfunction $735220c2d4774dd3$var$balanceTime(time) {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1000);\n  time.minute += Math.floor(time.second / 60);\n  time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);\n  let days = Math.floor(time.hour / 24);\n  time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);\n  return days;\n}\n\nfunction $735220c2d4774dd3$export$7555de1e070510cb(time) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\n\nfunction $735220c2d4774dd3$var$nonNegativeMod(a, b) {\n  let result = a % b;\n  if (result < 0) result += b;\n  return result;\n}\n\nfunction $735220c2d4774dd3$var$addTimeFields(time, duration) {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return $735220c2d4774dd3$var$balanceTime(time);\n}\n\nfunction $735220c2d4774dd3$export$7ed87b6bc2506470(time, duration) {\n  let res = time.copy();\n  $735220c2d4774dd3$var$addTimeFields(res, duration);\n  return res;\n}\n\nfunction $735220c2d4774dd3$export$fe34d3a381cd7501(time, duration) {\n  return $735220c2d4774dd3$export$7ed87b6bc2506470(time, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\n\nfunction $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options) {\n  let mutable = value.copy();\n\n  switch (field) {\n    case \"era\":\n      {\n        let eras = value.calendar.getEras();\n        let eraIndex = eras.indexOf(value.era);\n        if (eraIndex < 0) throw new Error(\"Invalid era: \" + value.era);\n        eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);\n        mutable.era = eras[eraIndex]; // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n\n        $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n        break;\n      }\n\n    case \"year\":\n      var _mutable_calendar, _mutable_calendar_isInverseEra;\n\n      if ((_mutable_calendar_isInverseEra = (_mutable_calendar = mutable.calendar).isInverseEra) === null || _mutable_calendar_isInverseEra === void 0 ? void 0 : _mutable_calendar_isInverseEra.call(_mutable_calendar, mutable)) amount = -amount; // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n\n      mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);\n      if (mutable.year === -Infinity) mutable.year = 1;\n      if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);\n      break;\n\n    case \"month\":\n      mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    case \"day\":\n      mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n\n  if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n  return mutable;\n}\n\nfunction $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options) {\n  let mutable = value.copy();\n\n  switch (field) {\n    case \"hour\":\n      {\n        let hours = value.hour;\n        let min = 0;\n        let max = 23;\n\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          let isPM = hours >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        }\n\n        mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);\n        break;\n      }\n\n    case \"minute\":\n      mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    case \"second\":\n      mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    case \"millisecond\":\n      mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n\n  return mutable;\n}\n\nfunction $735220c2d4774dd3$var$cycleValue(value, amount, min, max, round = false) {\n  if (round) {\n    value += Math.sign(amount);\n    if (value < min) value = max;\n    let div = Math.abs(amount);\n    if (amount > 0) value = Math.ceil(value / div) * div;else value = Math.floor(value / div) * div;\n    if (value > max) value = min;\n  } else {\n    value += amount;\n    if (value < min) value = max - (min - value - 1);else if (value > max) value = min + (value - max - 1);\n  }\n\n  return value;\n}\n\nfunction $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {\n  let ms;\n\n  if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.days != null && duration.days !== 0) {\n    let res = $735220c2d4774dd3$export$e16d8520af44a096((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      days: duration.days\n    }); // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n\n    ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);\n  } else // Otherwise, preserve the offset of the original date.\n    ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset; // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n\n\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60000;\n  ms += (duration.hours || 0) * 3600000;\n  let res1 = (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone);\n  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(res1, dateTime.calendar);\n}\n\nfunction $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {\n  return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\n\nfunction $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options) {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case \"hour\":\n      {\n        let min = 0;\n        let max = 23;\n\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          let isPM = dateTime.hour >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        } // The minimum and maximum hour may be affected by daylight saving time.\n        // For example, it might jump forward at midnight, and skip 1am.\n        // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n        // the possible absolute times for the min and max, and find the maximum range\n        // that is within the current day.\n\n\n        let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);\n        let minDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: min\n        }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n        let minAbsolute = [(0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, \"earlier\"), (0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, \"later\")].filter(ms => (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === minDate.day)[0];\n        let maxDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: max\n        }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n        let maxAbsolute = [(0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, \"earlier\"), (0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, \"later\")].filter(ms => (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === maxDate.day).pop(); // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n        // This is done in hours from the Unix epoch so that cycleValue works correctly,\n        // and then converted back to milliseconds.\n\n        let ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;\n        let hours = Math.floor(ms / $735220c2d4774dd3$var$ONE_HOUR);\n        let remainder = ms % $735220c2d4774dd3$var$ONE_HOUR;\n        ms = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder; // Now compute the new timezone offset, and convert the absolute time back to local time.\n\n        return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n      }\n\n    case \"minute\":\n    case \"second\":\n    case \"millisecond\":\n      // @ts-ignore\n      return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options);\n\n    case \"era\":\n    case \"year\":\n    case \"month\":\n    case \"day\":\n      {\n        let res = $735220c2d4774dd3$export$d52ced6badfb9a4c((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), field, amount, options);\n        let ms1 = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);\n        return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms1, dateTime.timeZone), dateTime.calendar);\n      }\n\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n}\n\nfunction $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);\n  let res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields); // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n\n  if (res.compare(plainDateTime) === 0) return dateTime;\n  let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone, disambiguation);\n  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nconst $fae977aafc393c5c$var$TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $fae977aafc393c5c$var$DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst $fae977aafc393c5c$var$DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $fae977aafc393c5c$var$ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::(\\d{2}))?)?\\[(.*?)\\]$/;\nconst $fae977aafc393c5c$var$ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::(\\d{2}))?)|Z)$/;\n\nfunction $fae977aafc393c5c$export$c9698ec7f05a07e1(value) {\n  let m = value.match($fae977aafc393c5c$var$TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 time string: \" + value);\n  return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)($fae977aafc393c5c$var$parseNumber(m[1], 0, 23), m[2] ? $fae977aafc393c5c$var$parseNumber(m[2], 0, 59) : 0, m[3] ? $fae977aafc393c5c$var$parseNumber(m[3], 0, 59) : 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, Infinity) * 1000 : 0);\n}\n\nfunction $fae977aafc393c5c$export$6b862160d295c8e(value) {\n  let m = value.match($fae977aafc393c5c$var$DATE_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date string: \" + value);\n  let date = new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)($fae977aafc393c5c$var$parseNumber(m[1], 0, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\n\nfunction $fae977aafc393c5c$export$588937bcd60ade55(value) {\n  let m = value.match($fae977aafc393c5c$var$DATE_TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  let date = new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\n\nfunction $fae977aafc393c5c$export$fd7893f06e92a6a4(value, disambiguation) {\n  let m = value.match($fae977aafc393c5c$var$ZONED_DATE_TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  let date = new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(date);\n  let ms;\n\n  if (m[8]) {\n    var _m_;\n\n    date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : \"0\", 0, 59) * 60000;\n    ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(date) - date.offset; // Validate offset against parsed date.\n\n    let absolutes = (0, $11d87f3f76e88657$export$136f38efe7caf549)(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) throw new Error(`Offset ${$fae977aafc393c5c$var$offsetToString(date.offset)} is invalid for ${$fae977aafc393c5c$export$4223de14708adc63(date)} in ${date.timeZone}`);\n  } else // Convert to absolute and back to fix invalid times due to DST.\n    ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)((0, $11d87f3f76e88657$export$b21e0b124e224484)(plainDateTime), date.timeZone, disambiguation);\n\n  return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, date.timeZone);\n}\n\nfunction $fae977aafc393c5c$export$5adfdab05168c219(value, timeZone) {\n  let m = value.match($fae977aafc393c5c$var$ABSOLUTE_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  let date = new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, timeZone, 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  var _m_;\n\n  if (m[8]) date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : \"0\", 0, 59) * 60000;\n  return (0, $11d87f3f76e88657$export$538b00033cc11c75)(date, timeZone);\n}\n\nfunction $fae977aafc393c5c$export$8e384432362ed0f0(value) {\n  return $fae977aafc393c5c$export$5adfdab05168c219(value, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\n\nfunction $fae977aafc393c5c$var$parseNumber(value, min, max) {\n  let val = Number(value);\n  if (val < min || val > max) throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n  return val;\n}\n\nfunction $fae977aafc393c5c$export$f59dee82248f5ad4(time) {\n  return `${String(time.hour).padStart(2, \"0\")}:${String(time.minute).padStart(2, \"0\")}:${String(time.second).padStart(2, \"0\")}${time.millisecond ? String(time.millisecond / 1000).slice(1) : \"\"}`;\n}\n\nfunction $fae977aafc393c5c$export$60dfd74aa96791bd(date) {\n  let gregorianDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n  return `${String(gregorianDate.year).padStart(4, \"0\")}-${String(gregorianDate.month).padStart(2, \"0\")}-${String(gregorianDate.day).padStart(2, \"0\")}`;\n}\n\nfunction $fae977aafc393c5c$export$4223de14708adc63(date) {\n  // @ts-ignore\n  return `${$fae977aafc393c5c$export$60dfd74aa96791bd(date)}T${$fae977aafc393c5c$export$f59dee82248f5ad4(date)}`;\n}\n\nfunction $fae977aafc393c5c$var$offsetToString(offset) {\n  let sign = Math.sign(offset) < 0 ? \"-\" : \"+\";\n  offset = Math.abs(offset);\n  let offsetHours = Math.floor(offset / 3600000);\n  let offsetMinutes = offset % 3600000 / 60000;\n  return `${sign}${String(offsetHours).padStart(2, \"0\")}:${String(offsetMinutes).padStart(2, \"0\")}`;\n}\n\nfunction $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {\n  return `${$fae977aafc393c5c$export$4223de14708adc63(date)}${$fae977aafc393c5c$var$offsetToString(date.offset)}[${date.timeZone}]`;\n}\n\nfunction $35ea8db9cb2ccb90$var$shiftArgs(args) {\n  let calendar = typeof args[0] === \"object\" ? args.shift() : new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();\n  let era;\n  if (typeof args[0] === \"string\") era = args.shift();else {\n    let eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n  let year = args.shift();\n  let month = args.shift();\n  let day = args.shift();\n  return [calendar, era, year, month, day];\n}\n\nvar // This prevents TypeScript from allowing other types with the same fields to match.\n// i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n// If that behavior is desired, use the AnyCalendarDate interface instead.\n$35ea8db9cb2ccb90$var$_type = /*#__PURE__*/new WeakMap();\n\nclass $35ea8db9cb2ccb90$export$99faa760c7908e4f {\n  /** Returns a copy of this date. */\n  copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);\n  }\n  /** Returns a new `CalendarDate` with the given duration added to it. */\n\n\n  add(duration) {\n    return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);\n  }\n  /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);\n  }\n  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields) {\n    return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)(this, fields);\n  }\n  /**\n  * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);\n  }\n  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n\n\n  toDate(timeZone) {\n    return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone);\n  }\n  /** Converts the date to an ISO 8601 formatted string. */\n\n\n  toString() {\n    return (0, $fae977aafc393c5c$export$60dfd74aa96791bd)(this);\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n\n\n  compare(b) {\n    return (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);\n  }\n\n  constructor(...args) {\n    (0, $cUVuN$swchelperssrc_class_private_field_initmjs)(this, $35ea8db9cb2ccb90$var$_type, {\n      writable: true,\n      value: void 0\n    });\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n\n}\n\nvar // This prevents TypeScript from allowing other types with the same fields to match.\n$35ea8db9cb2ccb90$var$_type1 = /*#__PURE__*/new WeakMap();\n\nclass $35ea8db9cb2ccb90$export$680ea196effce5f {\n  /** Returns a copy of this time. */\n  copy() {\n    return new $35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `Time` with the given duration added to it. */\n\n\n  add(duration) {\n    return (0, $735220c2d4774dd3$export$7ed87b6bc2506470)(this, duration);\n  }\n  /** Returns a new `Time` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return (0, $735220c2d4774dd3$export$fe34d3a381cd7501)(this, duration);\n  }\n  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields) {\n    return (0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields);\n  }\n  /**\n  * Returns a new `Time` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);\n  }\n  /** Converts the time to an ISO 8601 formatted string. */\n\n\n  toString() {\n    return (0, $fae977aafc393c5c$export$f59dee82248f5ad4)(this);\n  }\n  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n\n\n  compare(b) {\n    return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, b);\n  }\n\n  constructor(hour = 0, minute = 0, second = 0, millisecond = 0) {\n    (0, $cUVuN$swchelperssrc_class_private_field_initmjs)(this, $35ea8db9cb2ccb90$var$_type1, {\n      writable: true,\n      value: void 0\n    });\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    (0, $735220c2d4774dd3$export$7555de1e070510cb)(this);\n  }\n\n}\n\nvar // This prevents TypeScript from allowing other types with the same fields to match.\n$35ea8db9cb2ccb90$var$_type2 = /*#__PURE__*/new WeakMap();\n\nclass $35ea8db9cb2ccb90$export$ca871e8dbb80966f {\n  /** Returns a copy of this date. */\n  copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `CalendarDateTime` with the given duration added to it. */\n\n\n  add(duration) {\n    return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);\n  }\n  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);\n  }\n  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields) {\n    return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)((0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields), fields);\n  }\n  /**\n  * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    switch (field) {\n      case \"era\":\n      case \"year\":\n      case \"month\":\n      case \"day\":\n        return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);\n\n      default:\n        return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);\n    }\n  }\n  /** Converts the date to a native JavaScript Date object in the given time zone. */\n\n\n  toDate(timeZone, disambiguation) {\n    return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone, disambiguation);\n  }\n  /** Converts the date to an ISO 8601 formatted string. */\n\n\n  toString() {\n    return (0, $fae977aafc393c5c$export$4223de14708adc63)(this);\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n\n\n  compare(b) {\n    let res = (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);\n    if (res === 0) return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, (0, $11d87f3f76e88657$export$b21e0b124e224484)(b));\n    return res;\n  }\n\n  constructor(...args) {\n    (0, $cUVuN$swchelperssrc_class_private_field_initmjs)(this, $35ea8db9cb2ccb90$var$_type2, {\n      writable: true,\n      value: void 0\n    });\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n\n}\n\nvar // This prevents TypeScript from allowing other types with the same fields to match.\n$35ea8db9cb2ccb90$var$_type3 = /*#__PURE__*/new WeakMap();\n\nclass $35ea8db9cb2ccb90$export$d3b7288e7994edea {\n  /** Returns a copy of this date. */\n  copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `ZonedDateTime` with the given duration added to it. */\n\n\n  add(duration) {\n    return (0, $735220c2d4774dd3$export$96b1d28349274637)(this, duration);\n  }\n  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return (0, $735220c2d4774dd3$export$6814caac34ca03c7)(this, duration);\n  }\n  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields, disambiguation) {\n    return (0, $735220c2d4774dd3$export$31b5430eb18be4f8)(this, fields, disambiguation);\n  }\n  /**\n  * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    return (0, $735220c2d4774dd3$export$9a297d111fc86b79)(this, field, amount, options);\n  }\n  /** Converts the date to a native JavaScript Date object. */\n\n\n  toDate() {\n    return (0, $11d87f3f76e88657$export$83aac07b4c37b25)(this);\n  }\n  /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n\n\n  toString() {\n    return (0, $fae977aafc393c5c$export$bf79f1ebf4b18792)(this);\n  }\n  /** Converts the date to an ISO 8601 formatted string in UTC. */\n\n\n  toAbsoluteString() {\n    return this.toDate().toISOString();\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n\n\n  compare(b) {\n    // TODO: Is this a bad idea??\n    return this.toDate().getTime() - (0, $11d87f3f76e88657$export$84c95a83c799e074)(b, this.timeZone).toDate().getTime();\n  }\n\n  constructor(...args) {\n    (0, $cUVuN$swchelperssrc_class_private_field_initmjs)(this, $35ea8db9cb2ccb90$var$_type3, {\n      writable: true,\n      value: void 0\n    });\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    let timeZone = args.shift();\n    let offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $62225008020f0a13$var$ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nconst $62225008020f0a13$var$ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nconst $62225008020f0a13$var$ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nconst $62225008020f0a13$var$ERA_NAMES = [\"meiji\", \"taisho\", \"showa\", \"heisei\", \"reiwa\"];\n\nfunction $62225008020f0a13$var$findEraFromGregorianDate(date) {\n  const idx = $62225008020f0a13$var$ERA_START_DATES.findIndex(([year, month, day]) => {\n    if (date.year < year) return true;\n    if (date.year === year && date.month < month) return true;\n    if (date.year === year && date.month === month && date.day < day) return true;\n    return false;\n  });\n  if (idx === -1) return $62225008020f0a13$var$ERA_START_DATES.length - 1;\n  if (idx === 0) return 0;\n  return idx - 1;\n}\n\nfunction $62225008020f0a13$var$toGregorian(date) {\n  let eraAddend = $62225008020f0a13$var$ERA_ADDENDS[$62225008020f0a13$var$ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) throw new Error(\"Unknown era: \" + date.era);\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.year + eraAddend, date.month, date.day);\n}\n\nclass $62225008020f0a13$export$b746ab2b60cdffbf extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n  fromJulianDay(jd) {\n    let date = super.fromJulianDay(jd);\n    let era = $62225008020f0a13$var$findEraFromGregorianDate(date);\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, $62225008020f0a13$var$ERA_NAMES[era], date.year - $62225008020f0a13$var$ERA_ADDENDS[era], date.month, date.day);\n  }\n\n  toJulianDay(date) {\n    return super.toJulianDay($62225008020f0a13$var$toGregorian(date));\n  }\n\n  balanceDate(date) {\n    let gregorianDate = $62225008020f0a13$var$toGregorian(date);\n    let era = $62225008020f0a13$var$findEraFromGregorianDate(gregorianDate);\n\n    if ($62225008020f0a13$var$ERA_NAMES[era] !== date.era) {\n      date.era = $62225008020f0a13$var$ERA_NAMES[era];\n      date.year = gregorianDate.year - $62225008020f0a13$var$ERA_ADDENDS[era];\n    } // Constrain in case we went before the first supported era.\n\n\n    this.constrainDate(date);\n  }\n\n  constrainDate(date) {\n    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    let end = $62225008020f0a13$var$ERA_END_DATES[idx];\n\n    if (end != null) {\n      let [endYear, endMonth, endDay] = end; // Constrain the year to the maximum possible value in the era.\n      // Then constrain the month and day fields within that.\n\n      let maxYear = endYear - $62225008020f0a13$var$ERA_ADDENDS[idx];\n      date.year = Math.max(1, Math.min(maxYear, date.year));\n\n      if (date.year === maxYear) {\n        date.month = Math.min(endMonth, date.month);\n        if (date.month === endMonth) date.day = Math.min(endDay, date.day);\n      }\n    }\n\n    if (date.year === 1 && idx >= 0) {\n      let [, startMonth, startDay] = $62225008020f0a13$var$ERA_START_DATES[idx];\n      date.month = Math.max(startMonth, date.month);\n      if (date.month === startMonth) date.day = Math.max(startDay, date.day);\n    }\n  }\n\n  getEras() {\n    return $62225008020f0a13$var$ERA_NAMES;\n  }\n\n  getYearsInEra(date) {\n    // Get the number of years in the era, taking into account the date's month and day fields.\n    let era = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    let cur = $62225008020f0a13$var$ERA_START_DATES[era];\n    let next = $62225008020f0a13$var$ERA_START_DATES[era + 1];\n    if (next == null) // 9999 gregorian is the maximum year allowed.\n      return 9999 - cur[0] + 1;\n    let years = next[0] - cur[0];\n    if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;\n    return years;\n  }\n\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($62225008020f0a13$var$toGregorian(date));\n  }\n\n  getMinimumMonthInYear(date) {\n    let start = $62225008020f0a13$var$getMinimums(date);\n    return start ? start[1] : 1;\n  }\n\n  getMinimumDayInMonth(date) {\n    let start = $62225008020f0a13$var$getMinimums(date);\n    return start && date.month === start[1] ? start[2] : 1;\n  }\n\n  constructor(...args) {\n    super(...args);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"japanese\");\n  }\n\n}\n\nfunction $62225008020f0a13$var$getMinimums(date) {\n  if (date.year === 1) {\n    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    return $62225008020f0a13$var$ERA_START_DATES[idx];\n  }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $8d73d47422ca7302$var$BUDDHIST_ERA_START = -543;\n\nclass $8d73d47422ca7302$export$42d20a78301dee44 extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n  fromJulianDay(jd) {\n    let gregorianDate = super.fromJulianDay(jd);\n    let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(gregorianDate.era, gregorianDate.year);\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year - $8d73d47422ca7302$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);\n  }\n\n  toJulianDay(date) {\n    return super.toJulianDay($8d73d47422ca7302$var$toGregorian(date));\n  }\n\n  getEras() {\n    return [\"BE\"];\n  }\n\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($8d73d47422ca7302$var$toGregorian(date));\n  }\n\n  balanceDate() {}\n\n  constructor(...args) {\n    super(...args);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"buddhist\");\n  }\n\n}\n\nfunction $8d73d47422ca7302$var$toGregorian(date) {\n  let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)(date.year + $8d73d47422ca7302$var$BUDDHIST_ERA_START);\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $5f31bd6f0c8940b2$var$TAIWAN_ERA_START = 1911;\n\nfunction $5f31bd6f0c8940b2$var$gregorianYear(date) {\n  return date.era === \"minguo\" ? date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START : 1 - date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n}\n\nfunction $5f31bd6f0c8940b2$var$gregorianToTaiwan(year) {\n  let y = year - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n  if (y > 0) return [\"minguo\", y];else return [\"before_minguo\", 1 - y];\n}\n\nclass $5f31bd6f0c8940b2$export$65e01080afcb0799 extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n  fromJulianDay(jd) {\n    let date = super.fromJulianDay(jd);\n    let extendedYear = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);\n    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan(extendedYear);\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, date.month, date.day);\n  }\n\n  toJulianDay(date) {\n    return super.toJulianDay($5f31bd6f0c8940b2$var$toGregorian(date));\n  }\n\n  getEras() {\n    return [\"before_minguo\", \"minguo\"];\n  }\n\n  balanceDate(date) {\n    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan($5f31bd6f0c8940b2$var$gregorianYear(date));\n    date.era = era;\n    date.year = year;\n  }\n\n  isInverseEra(date) {\n    return date.era === \"before_minguo\";\n  }\n\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($5f31bd6f0c8940b2$var$toGregorian(date));\n  }\n\n  getYearsInEra(date) {\n    return date.era === \"before_minguo\" ? 9999 : 9999 - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n  }\n\n  constructor(...args) {\n    super(...args);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"roc\") // Republic of China\n    ;\n  }\n\n}\n\nfunction $5f31bd6f0c8940b2$var$toGregorian(date) {\n  let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)($5f31bd6f0c8940b2$var$gregorianYear(date));\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\n\nfunction $f3ed2e4472ae7e25$var$isLeapYear(year) {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(y0, 2820) + 474;\n  return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)((y1 + 38) * 31, 128) < 31;\n}\n\nfunction $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, day) {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(y0, 2820) + 474;\n  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n  return $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset + day;\n}\n\nclass $f3ed2e4472ae7e25$export$37fccdbfd14c5939 {\n  fromJulianDay(jd) {\n    let d0 = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(475, 1, 1);\n    let n2820 = Math.floor(d0 / 1029983);\n    let d1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(d0, 1029983);\n    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n    let year = 474 + 2820 * n2820 + y2820;\n    if (year <= 0) year--;\n    let yDay = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, 1, 1) + 1;\n    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n    let day = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, 1) + 1;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);\n  }\n\n  toJulianDay(date) {\n    return $f3ed2e4472ae7e25$var$persianToJulianDay(date.year, date.month, date.day);\n  }\n\n  getMonthsInYear() {\n    return 12;\n  }\n\n  getDaysInMonth(date) {\n    if (date.month <= 6) return 31;\n    if (date.month <= 11) return 30;\n    return $f3ed2e4472ae7e25$var$isLeapYear(date.year) ? 30 : 29;\n  }\n\n  getEras() {\n    return [\"AP\"];\n  }\n\n  getYearsInEra() {\n    // 9378-10-10 persian is 9999-12-31 gregorian.\n    // Round down to 9377 to set the maximum full year.\n    return 9377;\n  }\n\n  constructor() {\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"persian\");\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n// Starts in 78 AD,\n\n\nconst $82c358003bdda0a8$var$INDIAN_ERA_START = 78; // The Indian year starts 80 days later than the Gregorian year.\n\nconst $82c358003bdda0a8$var$INDIAN_YEAR_START = 80;\n\nclass $82c358003bdda0a8$export$39f31c639fa15726 extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n  fromJulianDay(jd) {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd); // Year in Saka era\n\n    let indianYear = date.year - $82c358003bdda0a8$var$INDIAN_ERA_START; // Day number in Gregorian year (starting from 0)\n\n    let yDay = jd - (0, $3b62074eb05584b2$export$f297eb839006d339)(date.era, date.year, 1, 1);\n    let leapMonth;\n\n    if (yDay < $82c358003bdda0a8$var$INDIAN_YEAR_START) {\n      //  Day is at the end of the preceding Saka year\n      indianYear--; // Days in leapMonth this year, previous Gregorian year\n\n      leapMonth = (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year - 1) ? 31 : 30;\n      yDay += leapMonth + 155 + 90 + 10;\n    } else {\n      // Days in leapMonth this year\n      leapMonth = (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year) ? 31 : 30;\n      yDay -= $82c358003bdda0a8$var$INDIAN_YEAR_START;\n    }\n\n    let indianMonth;\n    let indianDay;\n\n    if (yDay < leapMonth) {\n      indianMonth = 1;\n      indianDay = yDay + 1;\n    } else {\n      let mDay = yDay - leapMonth;\n\n      if (mDay < 155) {\n        indianMonth = Math.floor(mDay / 31) + 2;\n        indianDay = mDay % 31 + 1;\n      } else {\n        mDay -= 155;\n        indianMonth = Math.floor(mDay / 30) + 7;\n        indianDay = mDay % 30 + 1;\n      }\n    }\n\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, indianYear, indianMonth, indianDay);\n  }\n\n  toJulianDay(date) {\n    let extendedYear = date.year + $82c358003bdda0a8$var$INDIAN_ERA_START;\n    let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)(extendedYear);\n    let leapMonth;\n    let jd;\n\n    if ((0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(year)) {\n      leapMonth = 31;\n      jd = (0, $3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 21);\n    } else {\n      leapMonth = 30;\n      jd = (0, $3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 22);\n    }\n\n    if (date.month === 1) return jd + date.day - 1;\n    jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n    if (date.month >= 8) jd += (date.month - 7) * 30;\n    jd += date.day - 1;\n    return jd;\n  }\n\n  getDaysInMonth(date) {\n    if (date.month === 1 && (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year + $82c358003bdda0a8$var$INDIAN_ERA_START)) return 31;\n    if (date.month >= 2 && date.month <= 6) return 31;\n    return 30;\n  }\n\n  getYearsInEra() {\n    // 9999-12-31 gregorian is 9920-10-10 indian.\n    // Round down to 9919 for the last full year.\n    return 9919;\n  }\n\n  getEras() {\n    return [\"saka\"];\n  }\n\n  balanceDate() {}\n\n  constructor(...args) {\n    super(...args);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"indian\");\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\n\nconst $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\n\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;\nconst $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;\n\nfunction $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {\n  return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;\n}\n\nfunction $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(calendar, year, month, day);\n}\n\nfunction $f2f3e0e3a817edbd$var$isLeapYear(year) {\n  return (14 + 11 * year) % 30 < 11;\n}\n\nclass $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);\n  }\n\n  toJulianDay(date) {\n    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year)) length++;\n    return length;\n  }\n\n  getMonthsInYear() {\n    return 12;\n  }\n\n  getDaysInYear(date) {\n    return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;\n  }\n\n  getYearsInEra() {\n    // 9999 gregorian\n    return 9665;\n  }\n\n  getEras() {\n    return [\"AH\"];\n  }\n\n  constructor() {\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"islamic-civil\");\n  }\n\n}\n\nclass $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);\n  }\n\n  toJulianDay(date) {\n    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n\n  constructor(...args) {\n    super(...args);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"islamic-tbla\");\n  }\n\n} // Generated by scripts/generate-umalqura.js\n\n\nconst $f2f3e0e3a817edbd$var$UMALQURA_DATA = \"qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=\";\nlet $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;\nlet $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;\n\nfunction $f2f3e0e3a817edbd$var$umalquraYearStart(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\n\nfunction $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {\n  let idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;\n  let mask = 0x01 << 11 - (month - 1);\n  if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;else return 30;\n}\n\nfunction $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {\n  let day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);\n\n  for (let i = 1; i < month; i++) day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n\n  return day;\n}\n\nfunction $f2f3e0e3a817edbd$var$umalquraYearLength(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\n\nclass $f2f3e0e3a817edbd$export$5baab4758c231076 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    let days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;\n    let startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);\n    let endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) return super.fromJulianDay(jd);else {\n      let y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n\n      while (d > 0) {\n        y++;\n        d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;\n        let yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);\n\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n          m = 1;\n\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n          }\n\n          break;\n        }\n      }\n\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, y, m, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m) + 1);\n    }\n  }\n\n  toJulianDay(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.toJulianDay(date);\n    return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n\n  getDaysInMonth(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInMonth(date);\n    return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);\n  }\n\n  getDaysInYear(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInYear(date);\n    return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);\n  }\n\n  constructor() {\n    super();\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"islamic-umalqura\");\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH) $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {\n      $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);\n      let yearStart = 0;\n\n      for (let year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++) {\n        $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;\n\n        for (let i = 1; i <= 12; i++) yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n      }\n    }\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997; // Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\n\nconst $7c5f6fbf42389787$var$HOUR_PARTS = 1080;\nconst $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS; // An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\n\nconst $7c5f6fbf42389787$var$MONTH_DAYS = 29;\nconst $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;\nconst $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;\n\nfunction $7c5f6fbf42389787$var$isLeapYear(year) {\n  return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(year * 7 + 1, 19) < 7;\n} // Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\n\n\nfunction $7c5f6fbf42389787$var$hebrewDelay1(year) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n  if ((0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(3 * (day + 1), 7) < 3) day += 1;\n  return day;\n} // Check for delay in start of new year due to length of adjacent years\n\n\nfunction $7c5f6fbf42389787$var$hebrewDelay2(year) {\n  let last = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);\n  let present = $7c5f6fbf42389787$var$hebrewDelay1(year);\n  let next = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);\n  if (next - present === 356) return 2;\n  if (present - last === 382) return 1;\n  return 0;\n}\n\nfunction $7c5f6fbf42389787$var$startOfYear(year) {\n  return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);\n}\n\nfunction $7c5f6fbf42389787$var$getDaysInYear(year) {\n  return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);\n}\n\nfunction $7c5f6fbf42389787$var$getYearType(year) {\n  let yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);\n  if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.\n\n  switch (yearLength) {\n    case 353:\n      return 0;\n    // deficient\n\n    case 354:\n      return 1;\n    // normal\n\n    case 355:\n      return 2;\n    // complete\n  }\n}\n\nfunction $7c5f6fbf42389787$var$getDaysInMonth(year, month) {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year)) month++; // First of all, dispose of fixed-length 29 day months\n\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;\n  let yearType = $7c5f6fbf42389787$var$getYearType(year); // If it's Heshvan, days depend on length of year\n\n  if (month === 2) return yearType === 2 ? 30 : 29; // Similarly, Kislev varies with the length of year\n\n  if (month === 3) return yearType === 0 ? 29 : 30; // Adar I only exists in leap years\n\n  if (month === 6) return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;\n  return 30;\n}\n\nclass $7c5f6fbf42389787$export$ca405048b8fb5af {\n  fromJulianDay(jd) {\n    let d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;\n    let m = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS; // Months (approx)\n\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n\n    let ys = $7c5f6fbf42389787$var$startOfYear(year); // 1st day of year\n\n    let dayOfYear = Math.floor(d - ys); // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n\n    while (dayOfYear < 1) {\n      year--;\n      ys = $7c5f6fbf42389787$var$startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    } // Now figure out which month we're in, and the date within that month\n\n\n    let month = 1;\n    let monthStart = 0;\n\n    while (monthStart < dayOfYear) {\n      monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n      month++;\n    }\n\n    month--;\n    monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n    let day = dayOfYear - monthStart;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);\n  }\n\n  toJulianDay(date) {\n    let jd = $7c5f6fbf42389787$var$startOfYear(date.year);\n\n    for (let month = 1; month < date.month; month++) jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);\n\n    return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;\n  }\n\n  getDaysInMonth(date) {\n    return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(date) {\n    return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;\n  }\n\n  getDaysInYear(date) {\n    return $7c5f6fbf42389787$var$getDaysInYear(date.year);\n  }\n\n  getYearsInEra() {\n    // 6239 gregorian\n    return 9999;\n  }\n\n  getEras() {\n    return [\"AM\"];\n  }\n\n  balanceYearMonth(date, previousDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;\n    }\n  }\n\n  constructor() {\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"hebrew\");\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;\nconst $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665; // The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\n\nconst $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;\n\nfunction $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {\n  return epoch // difference from Julian epoch to 1,1,1\n  + 365 * year // number of days from years\n  + Math.floor(year / 4) // extra day of leap year\n  + 30 * (month - 1 // number of days from months (1 based)\n  ) + day - 1 // number of days for present month (1 based)\n  ;\n}\n\nfunction $b956b2d7a6cf451f$var$julianDayToCE(epoch, jd) {\n  let year = Math.floor(4 * (jd - epoch) / 1461);\n  let month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);\n  return [year, month, day];\n}\n\nfunction $b956b2d7a6cf451f$var$getLeapDay(year) {\n  return Math.floor(year % 4 / 3);\n}\n\nfunction $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0) // not intercalary month\n    return 30;else // intercalary month 5 days + possible leap day\n    return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;\n}\n\nclass $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n    let era = \"AM\";\n\n    if (year <= 0) {\n      era = \"AA\";\n      year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    }\n\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);\n  }\n\n  toJulianDay(date) {\n    let year = date.year;\n    if (date.era === \"AA\") year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    return $b956b2d7a6cf451f$var$getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear() {\n    return 13;\n  }\n\n  getDaysInYear(date) {\n    return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);\n  }\n\n  getYearsInEra(date) {\n    // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n    // Round down to 9991 for the last full year.\n    // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n    return date.era === \"AA\" ? 9999 : 9991;\n  }\n\n  getEras() {\n    return [\"AA\", \"AM\"];\n  }\n\n  constructor() {\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"ethiopic\");\n  }\n\n}\n\nclass $b956b2d7a6cf451f$export$d72e0c37005a4914 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n    year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, \"AA\", year, month, day);\n  }\n\n  getEras() {\n    return [\"AA\"];\n  }\n\n  getYearsInEra() {\n    // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n    return 9999;\n  }\n\n  constructor(...args) {\n    super(...args);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"ethioaa\") // also known as 'ethiopic-amete-alem' in ICU\n    ;\n  }\n\n}\n\nclass $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$COPTIC_EPOCH, jd);\n    let era = \"CE\";\n\n    if (year <= 0) {\n      era = \"BCE\";\n      year = 1 - year;\n    }\n\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);\n  }\n\n  toJulianDay(date) {\n    let year = date.year;\n    if (date.era === \"BCE\") year = 1 - year;\n    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    let year = date.year;\n    if (date.era === \"BCE\") year = 1 - year;\n    return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);\n  }\n\n  isInverseEra(date) {\n    return date.era === \"BCE\";\n  }\n\n  balanceDate(date) {\n    if (date.year <= 0) {\n      date.era = date.era === \"BCE\" ? \"CE\" : \"BCE\";\n      date.year = 1 - date.year;\n    }\n  }\n\n  getEras() {\n    return [\"BCE\", \"CE\"];\n  }\n\n  getYearsInEra(date) {\n    // 9999-12-30 gregorian is 9716-02-20 coptic.\n    // Round down to 9715 for the last full year.\n    // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n    return date.era === \"BCE\" ? 9999 : 9715;\n  }\n\n  constructor(...args) {\n    super(...args);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"coptic\");\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nfunction $64244302c3013299$export$dd0bbc9b26defe37(name) {\n  switch (name) {\n    case \"buddhist\":\n      return new (0, $8d73d47422ca7302$export$42d20a78301dee44)();\n\n    case \"ethiopic\":\n      return new (0, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d)();\n\n    case \"ethioaa\":\n      return new (0, $b956b2d7a6cf451f$export$d72e0c37005a4914)();\n\n    case \"coptic\":\n      return new (0, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1)();\n\n    case \"hebrew\":\n      return new (0, $7c5f6fbf42389787$export$ca405048b8fb5af)();\n\n    case \"indian\":\n      return new (0, $82c358003bdda0a8$export$39f31c639fa15726)();\n\n    case \"islamic-civil\":\n      return new (0, $f2f3e0e3a817edbd$export$2066795aadd37bfc)();\n\n    case \"islamic-tbla\":\n      return new (0, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7)();\n\n    case \"islamic-umalqura\":\n      return new (0, $f2f3e0e3a817edbd$export$5baab4758c231076)();\n\n    case \"japanese\":\n      return new (0, $62225008020f0a13$export$b746ab2b60cdffbf)();\n\n    case \"persian\":\n      return new (0, $f3ed2e4472ae7e25$export$37fccdbfd14c5939)();\n\n    case \"roc\":\n      return new (0, $5f31bd6f0c8940b2$export$65e01080afcb0799)();\n\n    case \"gregory\":\n    default:\n      return new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();\n  }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nlet $fb18d541ea1ad717$var$formatterCache = new Map();\n\nclass $fb18d541ea1ad717$export$ad991b66133851cf {\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value) {\n    return this.formatter.format(value);\n  }\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n\n\n  formatToParts(value) {\n    return this.formatter.formatToParts(value);\n  }\n  /** Formats a date range as a string. */\n\n\n  formatRange(start, end) {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === \"function\") // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    if (end < start) throw new RangeError(\"End date must be >= start date\"); // Very basic fallback for old browsers.\n\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n  /** Formats a date range as an array of parts. */\n\n\n  formatRangeToParts(start, end) {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === \"function\") // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    if (end < start) throw new RangeError(\"End date must be >= start date\");\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [...startParts.map(p => ({ ...p,\n      source: \"startRange\"\n    })), {\n      type: \"literal\",\n      value: \" – \",\n      source: \"shared\"\n    }, ...endParts.map(p => ({ ...p,\n      source: \"endRange\"\n    }))];\n  }\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n\n\n  resolvedOptions() {\n    let resolvedOptions = this.formatter.resolvedOptions();\n\n    if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === \"h11\" || this.resolvedHourCycle === \"h12\";\n    } // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n    // https://bugs.webkit.org/show_bug.cgi?id=241564\n\n\n    if (resolvedOptions.calendar === \"ethiopic-amete-alem\") resolvedOptions.calendar = \"ethioaa\";\n    return resolvedOptions;\n  }\n\n  constructor(locale, options = {}) {\n    this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n\n} // There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\n\n\nconst $fb18d541ea1ad717$var$hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: \"h11\"\n  },\n  false: {}\n};\n\nfunction $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options = {}) {\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === \"boolean\" && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {\n    options = { ...options\n    };\n    let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split(\"-\")[0]];\n    let defaultHourCycle = options.hour12 ? \"h12\" : \"h23\";\n    options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : \"\");\n  if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;\n\nfunction $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {\n  if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat(\"en-US\", {\n    hour: \"numeric\",\n    hour12: false\n  }).format(new Date(2020, 2, 3, 0)) === \"24\";\n  return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;\n}\n\nlet $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;\n\nfunction $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {\n  if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat(\"fr\", {\n    hour: \"numeric\",\n    hour12: false\n  }).resolvedOptions().hourCycle === \"h12\";\n  return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;\n}\n\nfunction $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {\n  if (!options.timeStyle && !options.hour) return undefined; // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, \"\");\n  locale += (locale.includes(\"-u-\") ? \"\" : \"-u\") + \"-nu-latn\";\n  let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, { ...options,\n    timeZone: undefined // use local timezone\n\n  });\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === \"hour\").value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === \"hour\").value, 10);\n  if (min === 0 && max === 23) return \"h23\";\n  if (min === 24 && max === 23) return \"h24\";\n  if (min === 0 && max === 11) return \"h11\";\n  if (min === 12 && max === 11) return \"h12\";\n  throw new Error(\"Unexpected hour cycle result\");\n}\n\nexport { $35ea8db9cb2ccb90$export$99faa760c7908e4f as CalendarDate, $35ea8db9cb2ccb90$export$ca871e8dbb80966f as CalendarDateTime, $35ea8db9cb2ccb90$export$680ea196effce5f as Time, $35ea8db9cb2ccb90$export$d3b7288e7994edea as ZonedDateTime, $3b62074eb05584b2$export$80ee6245ec4f29ec as GregorianCalendar, $62225008020f0a13$export$b746ab2b60cdffbf as JapaneseCalendar, $8d73d47422ca7302$export$42d20a78301dee44 as BuddhistCalendar, $5f31bd6f0c8940b2$export$65e01080afcb0799 as TaiwanCalendar, $f3ed2e4472ae7e25$export$37fccdbfd14c5939 as PersianCalendar, $82c358003bdda0a8$export$39f31c639fa15726 as IndianCalendar, $f2f3e0e3a817edbd$export$2066795aadd37bfc as IslamicCivilCalendar, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 as IslamicTabularCalendar, $f2f3e0e3a817edbd$export$5baab4758c231076 as IslamicUmalquraCalendar, $7c5f6fbf42389787$export$ca405048b8fb5af as HebrewCalendar, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d as EthiopicCalendar, $b956b2d7a6cf451f$export$d72e0c37005a4914 as EthiopicAmeteAlemCalendar, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 as CopticCalendar, $64244302c3013299$export$dd0bbc9b26defe37 as createCalendar, $11d87f3f76e88657$export$93522d1a439f3617 as toCalendarDate, $11d87f3f76e88657$export$b21e0b124e224484 as toCalendarDateTime, $11d87f3f76e88657$export$d33f79e3ffc3dc83 as toTime, $11d87f3f76e88657$export$b4a036af3fc0b032 as toCalendar, $11d87f3f76e88657$export$84c95a83c799e074 as toZoned, $11d87f3f76e88657$export$538b00033cc11c75 as toTimeZone, $11d87f3f76e88657$export$d9b67bc93c097491 as toLocalTimeZone, $14e0f24ef4ac5c92$export$ea39ec197993aef0 as isSameDay, $14e0f24ef4ac5c92$export$a18c89cbd24170ff as isSameMonth, $14e0f24ef4ac5c92$export$5841f9eb9773f25f as isSameYear, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee as isEqualDay, $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2 as isEqualMonth, $14e0f24ef4ac5c92$export$ea840f5a6dda8147 as isEqualYear, $14e0f24ef4ac5c92$export$629b0a497aa65267 as isToday, $14e0f24ef4ac5c92$export$2061056d06d7cdf7 as getDayOfWeek, $14e0f24ef4ac5c92$export$461939dd4422153 as now, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3 as today, $14e0f24ef4ac5c92$export$126c91c941de7e as getHoursInDay, $14e0f24ef4ac5c92$export$aa8b41735afcabd2 as getLocalTimeZone, $14e0f24ef4ac5c92$export$a5a3b454ada2268e as startOfMonth, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4 as startOfWeek, $14e0f24ef4ac5c92$export$f91e89d3d0406102 as startOfYear, $14e0f24ef4ac5c92$export$a2258d9c4118825c as endOfMonth, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e as endOfWeek, $14e0f24ef4ac5c92$export$8b7aa55c66d5569e as endOfYear, $14e0f24ef4ac5c92$export$5412ac11713b72ad as getMinimumMonthInYear, $14e0f24ef4ac5c92$export$b2f4953d301981d5 as getMinimumDayInMonth, $14e0f24ef4ac5c92$export$ccc1b2479e7dd654 as getWeeksInMonth, $14e0f24ef4ac5c92$export$5c333a116e949cdd as minDate, $14e0f24ef4ac5c92$export$a75f2bff57811055 as maxDate, $14e0f24ef4ac5c92$export$618d60ea299da42 as isWeekend, $14e0f24ef4ac5c92$export$ee9d87258e1d19ed as isWeekday, $fae977aafc393c5c$export$6b862160d295c8e as parseDate, $fae977aafc393c5c$export$588937bcd60ade55 as parseDateTime, $fae977aafc393c5c$export$c9698ec7f05a07e1 as parseTime, $fae977aafc393c5c$export$5adfdab05168c219 as parseAbsolute, $fae977aafc393c5c$export$8e384432362ed0f0 as parseAbsoluteToLocal, $fae977aafc393c5c$export$fd7893f06e92a6a4 as parseZonedDateTime, $fb18d541ea1ad717$export$ad991b66133851cf as DateFormatter };","map":{"version":3,"sources":["packages/@internationalized/date/src/index.ts","packages/@internationalized/date/src/CalendarDate.ts","packages/@internationalized/date/src/manipulation.ts","packages/@internationalized/date/src/conversion.ts","packages/@internationalized/date/src/calendars/GregorianCalendar.ts","packages/@internationalized/date/src/utils.ts","packages/@internationalized/date/src/queries.ts","packages/@internationalized/date/src/weekStartData.ts","packages/@internationalized/date/src/string.ts","packages/@internationalized/date/src/calendars/JapaneseCalendar.ts","packages/@internationalized/date/src/calendars/BuddhistCalendar.ts","packages/@internationalized/date/src/calendars/TaiwanCalendar.ts","packages/@internationalized/date/src/calendars/PersianCalendar.ts","packages/@internationalized/date/src/calendars/IndianCalendar.ts","packages/@internationalized/date/src/calendars/IslamicCalendar.ts","packages/@internationalized/date/src/calendars/HebrewCalendar.ts","packages/@internationalized/date/src/calendars/EthiopicCalendar.ts","packages/@internationalized/date/src/createCalendar.ts","packages/@internationalized/date/src/DateFormatter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {\n  AnyCalendarDate,\n  AnyTime,\n  AnyDateTime,\n  Calendar,\n  DateDuration,\n  TimeDuration,\n  DateTimeDuration,\n  DateFields,\n  TimeFields,\n  DateField,\n  TimeField,\n  Disambiguation,\n  CycleOptions,\n  CycleTimeOptions\n} from './types';\n\nexport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nexport {GregorianCalendar} from './calendars/GregorianCalendar';\nexport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nexport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nexport {TaiwanCalendar} from './calendars/TaiwanCalendar';\nexport {PersianCalendar} from './calendars/PersianCalendar';\nexport {IndianCalendar} from './calendars/IndianCalendar';\nexport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nexport {HebrewCalendar} from './calendars/HebrewCalendar';\nexport {EthiopicCalendar, EthiopicAmeteAlemCalendar, CopticCalendar} from './calendars/EthiopicCalendar';\nexport {createCalendar} from './createCalendar';\nexport {toCalendarDate, toCalendarDateTime, toTime, toCalendar, toZoned, toTimeZone, toLocalTimeZone} from './conversion';\nexport {\n  isSameDay,\n  isSameMonth,\n  isSameYear,\n  isEqualDay,\n  isEqualMonth,\n  isEqualYear,\n  isToday,\n  getDayOfWeek,\n  now,\n  today,\n  getHoursInDay,\n  getLocalTimeZone,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  getMinimumMonthInYear,\n  getMinimumDayInMonth,\n  getWeeksInMonth,\n  minDate,\n  maxDate,\n  isWeekend,\n  isWeekday\n} from './queries';\nexport {\n  parseDate,\n  parseDateTime,\n  parseTime,\n  parseAbsolute,\n  parseAbsoluteToLocal,\n  parseZonedDateTime\n} from './string';\nexport {DateFormatter} from './DateFormatter';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {add, addTime, addZoned, constrain, constrainTime, cycleDate, cycleTime, cycleZoned, set, setTime, setZoned, subtract, subtractTime, subtractZoned} from './manipulation';\nimport {AnyCalendarDate, AnyTime, Calendar, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {compareDate, compareTime} from './queries';\nimport {dateTimeToString, dateToString, timeToString, zonedDateTimeToString} from './string';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {toCalendarDateTime, toDate, toZoned, zonedToDate} from './conversion';\n\nfunction shiftArgs(args: any[]) {\n  let calendar: Calendar = typeof args[0] === 'object'\n    ? args.shift()\n    : new GregorianCalendar();\n\n  let era: string;\n  if (typeof args[0] === 'string') {\n    era = args.shift();\n  } else {\n    let eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n\n  let year = args.shift();\n  let month = args.shift();\n  let day = args.shift();\n\n  return [calendar, era, year, month, day];\n}\n\n/** A CalendarDate represents a date without any time components in a specific calendar system. */\nexport class CalendarDate {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n  // If that behavior is desired, use the AnyCalendarDate interface instead.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n\n  constructor(year: number, month: number, day: number);\n  constructor(era: string, year: number, month: number, day: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDate {\n    if (this.era) {\n      return new CalendarDate(this.calendar, this.era, this.year, this.month, this.day);\n    } else {\n      return new CalendarDate(this.calendar, this.year, this.month, this.day);\n    }\n  }\n\n  /** Returns a new `CalendarDate` with the given duration added to it. */\n  add(duration: DateDuration): CalendarDate {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n  subtract(duration: DateDuration): CalendarDate {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields): CalendarDate {\n    return set(this, fields);\n  }\n\n  /**\n   * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField, amount: number, options?: CycleOptions): CalendarDate {\n    return cycleDate(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n  toDate(timeZone: string): Date {\n    return toDate(this, timeZone);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: AnyCalendarDate): number {\n    return compareDate(this, b);\n  }\n}\n\n/** A Time represents a clock time without any date components. */\nexport class Time {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The hour, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(\n    hour: number = 0,\n    minute: number = 0,\n    second: number = 0,\n    millisecond: number = 0\n  ) {\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    constrainTime(this);\n  }\n\n  /** Returns a copy of this time. */\n  copy(): Time {\n    return new Time(this.hour, this.minute, this.second, this.millisecond);\n  }\n\n  /** Returns a new `Time` with the given duration added to it. */\n  add(duration: TimeDuration) {\n    return addTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given duration subtracted from it. */\n  subtract(duration: TimeDuration) {\n    return subtractTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: TimeFields) {\n    return setTime(this, fields);\n  }\n\n  /**\n   * Returns a new `Time` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleTime(this, field, amount, options);\n  }\n\n  /** Converts the time to an ISO 8601 formatted string. */\n  toString() {\n    return timeToString(this);\n  }\n\n  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n  compare(b: AnyTime) {\n    return compareTime(this, b);\n  }\n}\n\n/** A CalendarDateTime represents a date and time without a time zone, in a specific calendar system. */\nexport class CalendarDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDateTime {\n    if (this.era) {\n      return new CalendarDateTime(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new CalendarDateTime(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration): CalendarDateTime {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration): CalendarDateTime {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields): CalendarDateTime {\n    return set(setTime(this, fields), fields);\n  }\n\n  /**\n   * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime {\n    switch (field) {\n      case 'era':\n      case 'year':\n      case 'month':\n      case 'day':\n        return cycleDate(this, field, amount, options);\n      default:\n        return cycleTime(this, field, amount, options);\n    }\n  }\n\n  /** Converts the date to a native JavaScript Date object in the given time zone. */\n  toDate(timeZone: string, disambiguation?: Disambiguation): Date {\n    return toDate(this, timeZone, disambiguation);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateTimeToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number {\n    let res = compareDate(this, b);\n    if (res === 0) {\n      return compareTime(this, toCalendarDateTime(b));\n    }\n\n    return res;\n  }\n}\n\n/** A ZonedDateTime represents a date and time in a specific time zone and calendar system. */\nexport class ZonedDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n  /** The IANA time zone identifier that this date and time is represented in. */\n  public readonly timeZone: string;\n  /** The UTC offset for this time, in seconds. */\n  public readonly offset: number;\n\n  constructor(year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    let timeZone = args.shift();\n    let offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): ZonedDateTime {\n    if (this.era) {\n      return new ZonedDateTime(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new ZonedDateTime(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration) {\n    return addZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration) {\n    return subtractZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields, disambiguation?: Disambiguation) {\n    return setZoned(this, fields, disambiguation);\n  }\n\n  /**\n   * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleZoned(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object. */\n  toDate() {\n    return zonedToDate(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n  toString() {\n    return zonedDateTimeToString(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string in UTC. */\n  toAbsoluteString() {\n    return this.toDate().toISOString();\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime) {\n    // TODO: Is this a bad idea??\n    return this.toDate().getTime() - toZoned(b, this.timeZone).toDate().getTime();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, toAbsolute, toCalendar, toCalendarDateTime} from './conversion';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst ONE_HOUR = 3600000;\n\nexport function add(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function add(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration) {\n  let mutableDate: Mutable<AnyCalendarDate | AnyDateTime> = date.copy();\n  let days = 'hour' in mutableDate ? addTimeFields(mutableDate, duration) : 0;\n\n  addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) {\n    mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  }\n\n  mutableDate.month += duration.months || 0;\n\n  balanceYearMonth(mutableDate);\n  constrainMonthDay(mutableDate);\n\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n\n  balanceDay(mutableDate);\n\n  if (mutableDate.calendar.balanceDate) {\n    mutableDate.calendar.balanceDate(mutableDate);\n  }\n\n  // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n  // The behavior here is slightly different than when constraining in the `set` function in that\n  // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n  // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n  if (mutableDate.year < 1) {\n    mutableDate.year = 1;\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n  if (mutableDate.year > maxYear) {\n    let isInverseEra = mutableDate.calendar.isInverseEra?.(mutableDate);\n    mutableDate.year = maxYear;\n    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  if (mutableDate.month < 1) {\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n  if (mutableDate.month > maxMonth) {\n    mutableDate.month = maxMonth;\n    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n  return mutableDate;\n}\n\nfunction addYears(date: Mutable<AnyCalendarDate>, years: number) {\n  if (date.calendar.isInverseEra?.(date)) {\n    years = -years;\n  }\n\n  date.year += years;\n}\n\nfunction balanceYearMonth(date: Mutable<AnyCalendarDate>) {\n  while (date.month < 1) {\n    addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n\n  let monthsInYear = 0;\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    addYears(date, 1);\n  }\n}\n\nfunction balanceDay(date: Mutable<AnyCalendarDate>) {\n  while (date.day < 1) {\n    date.month--;\n    balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    balanceYearMonth(date);\n  }\n}\n\nfunction constrainMonthDay(date: Mutable<AnyCalendarDate>) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\n\nexport function constrain(date: Mutable<AnyCalendarDate>) {\n  if (date.calendar.constrainDate) {\n    date.calendar.constrainDate(date);\n  }\n\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  constrainMonthDay(date);\n}\n\nexport function invertDuration(duration: DateTimeDuration): DateTimeDuration {\n  let inverseDuration = {};\n  for (let key in duration) {\n    if (typeof duration[key] === 'number') {\n      inverseDuration[key] = -duration[key];\n    }\n  }\n\n  return inverseDuration;\n}\n\nexport function subtract(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function subtract(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function subtract(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime {\n  return add(date, invertDuration(duration));\n}\n\nexport function set(date: CalendarDateTime, fields: DateFields): CalendarDateTime;\nexport function set(date: CalendarDate, fields: DateFields): CalendarDate;\nexport function set(date: CalendarDate | CalendarDateTime, fields: DateFields) {\n  let mutableDate: Mutable<AnyCalendarDate> = date.copy();\n\n  if (fields.era != null) {\n    mutableDate.era = fields.era;\n  }\n\n  if (fields.year != null) {\n    mutableDate.year = fields.year;\n  }\n\n  if (fields.month != null) {\n    mutableDate.month = fields.month;\n  }\n\n  if (fields.day != null) {\n    mutableDate.day = fields.day;\n  }\n\n  constrain(mutableDate);\n  return mutableDate;\n}\n\nexport function setTime(value: CalendarDateTime, fields: TimeFields): CalendarDateTime;\nexport function setTime(value: Time, fields: TimeFields): Time;\nexport function setTime(value: Time | CalendarDateTime, fields: TimeFields) {\n  let mutableValue: Mutable<Time | CalendarDateTime> = value.copy();\n\n  if (fields.hour != null) {\n    mutableValue.hour = fields.hour;\n  }\n\n  if (fields.minute != null) {\n    mutableValue.minute = fields.minute;\n  }\n\n  if (fields.second != null) {\n    mutableValue.second = fields.second;\n  }\n\n  if (fields.millisecond != null) {\n    mutableValue.millisecond = fields.millisecond;\n  }\n\n  constrainTime(mutableValue);\n  return mutableValue;\n}\n\nfunction balanceTime(time: Mutable<AnyTime>): number {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = nonNegativeMod(time.millisecond, 1000);\n\n  time.minute += Math.floor(time.second / 60);\n  time.second = nonNegativeMod(time.second, 60);\n\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = nonNegativeMod(time.minute, 60);\n\n  let days = Math.floor(time.hour / 24);\n  time.hour = nonNegativeMod(time.hour, 24);\n\n  return days;\n}\n\nexport function constrainTime(time: Mutable<AnyTime>) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\n\nfunction nonNegativeMod(a: number, b: number) {\n  let result = a % b;\n  if (result < 0) {\n    result += b;\n  }\n  return result;\n}\n\nfunction addTimeFields(time: Mutable<AnyTime>, duration: TimeDuration): number {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return balanceTime(time);\n}\n\nexport function addTime(time: Time, duration: TimeDuration): Time {\n  let res = time.copy();\n  addTimeFields(res, duration);\n  return res;\n}\n\nexport function subtractTime(time: Time, duration: TimeDuration): Time {\n  return addTime(time, invertDuration(duration));\n}\n\nexport function cycleDate(value: CalendarDateTime, field: DateField, amount: number, options?: CycleOptions): CalendarDateTime;\nexport function cycleDate(value: CalendarDate, field: DateField, amount: number, options?: CycleOptions): CalendarDate;\nexport function cycleDate(value: CalendarDate | CalendarDateTime, field: DateField, amount: number, options?: CycleOptions) {\n  let mutable: Mutable<CalendarDate | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'era': {\n      let eras = value.calendar.getEras();\n      let eraIndex = eras.indexOf(value.era);\n      if (eraIndex < 0) {\n        throw new Error('Invalid era: ' + value.era);\n      }\n      eraIndex = cycleValue(eraIndex, amount, 0, eras.length - 1, options?.round);\n      mutable.era = eras[eraIndex];\n\n      // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n      constrain(mutable);\n      break;\n    }\n    case 'year': {\n      if (mutable.calendar.isInverseEra?.(mutable)) {\n        amount = -amount;\n      }\n\n      // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n      mutable.year = cycleValue(value.year, amount, -Infinity, 9999, options?.round);\n      if (mutable.year === -Infinity) {\n        mutable.year = 1;\n      }\n\n      if (mutable.calendar.balanceYearMonth) {\n        mutable.calendar.balanceYearMonth(mutable, value);\n      }\n      break;\n    }\n    case 'month':\n      mutable.month = cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options?.round);\n      break;\n    case 'day':\n      mutable.day = cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  if (value.calendar.balanceDate) {\n    value.calendar.balanceDate(mutable);\n  }\n\n  constrain(mutable);\n  return mutable;\n}\n\nexport function cycleTime(value: CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime;\nexport function cycleTime(value: Time, field: TimeField, amount: number, options?: CycleTimeOptions): Time;\nexport function cycleTime(value: Time | CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions) {\n  let mutable: Mutable<Time | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'hour': {\n      let hours = value.hour;\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = hours >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n      mutable.hour = cycleValue(hours, amount, min, max, options?.round);\n      break;\n    }\n    case 'minute':\n      mutable.minute = cycleValue(value.minute, amount, 0, 59, options?.round);\n      break;\n    case 'second':\n      mutable.second = cycleValue(value.second, amount, 0, 59, options?.round);\n      break;\n    case 'millisecond':\n      mutable.millisecond = cycleValue(value.millisecond, amount, 0, 999, options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  return mutable;\n}\n\nfunction cycleValue(value: number, amount: number, min: number, max: number, round = false) {\n  if (round) {\n    value += Math.sign(amount);\n\n    if (value < min) {\n      value = max;\n    }\n\n    let div = Math.abs(amount);\n    if (amount > 0) {\n      value = Math.ceil(value / div) * div;\n    } else {\n      value = Math.floor(value / div) * div;\n    }\n\n    if (value > max) {\n      value = min;\n    }\n  } else {\n    value += amount;\n    if (value < min) {\n      value = max - (min - value - 1);\n    } else if (value > max) {\n      value = min + (value - max - 1);\n    }\n  }\n\n  return value;\n}\n\nexport function addZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  let ms: number;\n  if ((duration.years != null && duration.years !== 0) || (duration.months != null && duration.months !== 0) || (duration.days != null && duration.days !== 0)) {\n    let res = add(toCalendarDateTime(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      days: duration.days\n    });\n\n    // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n    ms = toAbsolute(res, dateTime.timeZone);\n  } else {\n    // Otherwise, preserve the offset of the original date.\n    ms = epochFromDate(dateTime) - dateTime.offset;\n  }\n\n  // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60 * 1000;\n  ms += (duration.hours || 0) * 60 * 60 * 1000;\n\n  let res = fromAbsolute(ms, dateTime.timeZone);\n  return toCalendar(res, dateTime.calendar);\n}\n\nexport function subtractZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  return addZoned(dateTime, invertDuration(duration));\n}\n\nexport function cycleZoned(dateTime: ZonedDateTime, field: DateField | TimeField, amount: number, options?: CycleTimeOptions): ZonedDateTime {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case 'hour': {\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = dateTime.hour >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n\n      // The minimum and maximum hour may be affected by daylight saving time.\n      // For example, it might jump forward at midnight, and skip 1am.\n      // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n      // the possible absolute times for the min and max, and find the maximum range\n      // that is within the current day.\n      let plainDateTime = toCalendarDateTime(dateTime);\n      let minDate = toCalendar(setTime(plainDateTime, {hour: min}), new GregorianCalendar());\n      let minAbsolute = [toAbsolute(minDate, dateTime.timeZone, 'earlier'), toAbsolute(minDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === minDate.day)[0];\n\n      let maxDate = toCalendar(setTime(plainDateTime, {hour: max}), new GregorianCalendar());\n      let maxAbsolute = [toAbsolute(maxDate, dateTime.timeZone, 'earlier'), toAbsolute(maxDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === maxDate.day).pop();\n\n      // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n      // This is done in hours from the Unix epoch so that cycleValue works correctly,\n      // and then converted back to milliseconds.\n      let ms = epochFromDate(dateTime) - dateTime.offset;\n      let hours = Math.floor(ms / ONE_HOUR);\n      let remainder = ms % ONE_HOUR;\n      ms = cycleValue(\n        hours,\n        amount,\n        Math.floor(minAbsolute / ONE_HOUR),\n        Math.floor(maxAbsolute / ONE_HOUR),\n        options?.round\n      ) * ONE_HOUR + remainder;\n\n      // Now compute the new timezone offset, and convert the absolute time back to local time.\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    case 'minute':\n    case 'second':\n    case 'millisecond':\n      // @ts-ignore\n      return cycleTime(dateTime, field, amount, options);\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day': {\n      let res = cycleDate(toCalendarDateTime(dateTime), field, amount, options);\n      let ms = toAbsolute(res, dateTime.timeZone);\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n}\n\nexport function setZoned(dateTime: ZonedDateTime, fields: DateFields & TimeFields, disambiguation?: Disambiguation): ZonedDateTime {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  let plainDateTime = toCalendarDateTime(dateTime);\n  let res = setTime(set(plainDateTime, fields), fields);\n\n  // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n  if (res.compare(plainDateTime) === 0) {\n    return dateTime;\n  }\n\n  let ms = toAbsolute(res, dateTime.timeZone, disambiguation);\n  return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, Calendar, DateFields, Disambiguation, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {constrain} from './manipulation';\nimport {getExtendedYear, GregorianCalendar} from './calendars/GregorianCalendar';\nimport {getLocalTimeZone} from './queries';\nimport {Mutable} from './utils';\n\nexport function epochFromDate(date: AnyDateTime) {\n  date = toCalendar(date, new GregorianCalendar());\n  let year = getExtendedYear(date.era, date.year);\n  return epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\n\nfunction epochFromParts(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\n\nexport function getTimeZoneOffset(ms: number, timeZone: string) {\n  // Fast path for UTC.\n  if (timeZone === 'UTC') {\n    return 0;\n  }\n\n  // Fast path: for local timezone, use native Date.\n  if (timeZone === getLocalTimeZone()) {\n    return new Date(ms).getTimezoneOffset() * -60 * 1000;\n  }\n\n  let {year, month, day, hour, minute, second} = getTimeZoneParts(ms, timeZone);\n  let utc = epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\n\nconst formattersByTimeZone = new Map<string, Intl.DateTimeFormat>();\n\nfunction getTimeZoneParts(ms: number, timeZone: string) {\n  let formatter = formattersByTimeZone.get(timeZone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat('en-US', {\n      timeZone,\n      hour12: false,\n      era: 'short',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    });\n\n    formattersByTimeZone.set(timeZone, formatter);\n  }\n\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts: {[name: string]: string} = {};\n  for (let part of parts) {\n    if (part.type !== 'literal') {\n      namedParts[part.type] = part.value;\n    }\n  }\n\n\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === 'BC' || namedParts.era === 'B' ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === '24' ? 0 : +namedParts.hour, // bugs.chromium.org/p/chromium/issues/detail?id=1045791\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\n\nconst DAYMILLIS = 86400000;\n\nexport function possibleAbsolutes(date: CalendarDateTime, timeZone: string): number[] {\n  let ms = epochFromDate(date);\n  let earlier = ms - getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let later = ms - getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  return getValidWallTimes(date, timeZone, earlier, later);\n}\n\nfunction getValidWallTimes(date: CalendarDateTime, timeZone: string, earlier: number, later: number): number[] {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => isValidWallTime(date, timeZone, absolute));\n}\n\nfunction isValidWallTime(date: CalendarDateTime, timeZone: string, absolute: number) {\n  let parts = getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year\n    && date.month === parts.month\n    && date.day === parts.day\n    && date.hour === parts.hour\n    && date.minute === parts.minute\n    && date.second === parts.second;\n}\n\nexport function toAbsolute(date: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): number {\n  let dateTime = toCalendarDateTime(date);\n\n  // Fast path: if the time zone is UTC, use native Date.\n  if (timeZone === 'UTC') {\n    return epochFromDate(dateTime);\n  }\n\n  // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n  if (timeZone === getLocalTimeZone() && disambiguation === 'compatible') {\n    dateTime = toCalendar(dateTime, new GregorianCalendar());\n\n    // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n    let date = new Date();\n    let year = getExtendedYear(dateTime.era, dateTime.year);\n    date.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date.getTime();\n  }\n\n  let ms = epochFromDate(dateTime);\n  let offsetBefore = getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let offsetAfter = getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  let valid = getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n\n  if (valid.length === 1) {\n    return valid[0];\n  }\n\n  if (valid.length > 1) {\n    switch (disambiguation) {\n      // 'compatible' means 'earlier' for \"fall back\" transitions\n      case 'compatible':\n      case 'earlier':\n        return valid[0];\n      case 'later':\n        return valid[valid.length - 1];\n      case 'reject':\n        throw new RangeError('Multiple possible absolute times found');\n    }\n  }\n\n  switch (disambiguation) {\n    case 'earlier':\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n    case 'compatible':\n    case 'later':\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n    case 'reject':\n      throw new RangeError('No such absolute time found');\n  }\n}\n\nexport function toDate(dateTime: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): Date {\n  return new Date(toAbsolute(dateTime, timeZone, disambiguation));\n}\n\nexport function fromAbsolute(ms: number, timeZone: string): ZonedDateTime {\n  let offset = getTimeZoneOffset(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n\n  return new ZonedDateTime(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\n\nexport function fromDate(date: Date, timeZone: string): ZonedDateTime {\n  return fromAbsolute(date.getTime(), timeZone);\n}\n\nexport function fromDateToLocal(date: Date): ZonedDateTime {\n  return fromDate(date, getLocalTimeZone());\n}\n\n/** Converts a value with date components such as a `CalendarDateTime` or `ZonedDateTime` into a `CalendarDate`. */\nexport function toCalendarDate(dateTime: AnyCalendarDate): CalendarDate {\n  return new CalendarDate(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\n\nexport function toDateFields(date: AnyCalendarDate): DateFields {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\n\nexport function toTimeFields(date: AnyTime): TimeFields {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\n\n/**\n * Converts a date value to a `CalendarDateTime`. An optional `Time` value can be passed to set the time\n * of the resulting value, otherwise it will default to midnight.\n */\nexport function toCalendarDateTime(date: CalendarDate | CalendarDateTime | ZonedDateTime, time?: AnyTime): CalendarDateTime {\n  let hour = 0, minute = 0, second = 0, millisecond = 0;\n  if ('timeZone' in date) {\n    ({hour, minute, second, millisecond} = date);\n  } else if ('hour' in date && !time) {\n    return date;\n  }\n\n  if (time) {\n    ({hour, minute, second, millisecond} = time);\n  }\n\n  return new CalendarDateTime(\n    date.calendar,\n    date.era,\n    date.year,\n    date.month,\n    date.day,\n    hour,\n    minute,\n    second,\n    millisecond\n  );\n}\n\n/** Extracts the time components from a value containing a date and time. */\nexport function toTime(dateTime: CalendarDateTime | ZonedDateTime): Time {\n  return new Time(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\n\n/** Converts a date from one calendar system to another. */\nexport function toCalendar<T extends AnyCalendarDate>(date: T, calendar: Calendar): T {\n  if (date.calendar.identifier === calendar.identifier) {\n    return date;\n  }\n\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy: Mutable<T> = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  constrain(copy);\n  return copy;\n}\n\n/**\n * Converts a date value to a `ZonedDateTime` in the provided time zone. The `disambiguation` option can be set\n * to control how values that fall on daylight saving time changes are interpreted.\n */\nexport function toZoned(date: CalendarDate | CalendarDateTime | ZonedDateTime, timeZone: string, disambiguation?: Disambiguation): ZonedDateTime {\n  if (date instanceof ZonedDateTime) {\n    if (date.timeZone === timeZone) {\n      return date;\n    }\n\n    return toTimeZone(date, timeZone);\n  }\n\n  let ms = toAbsolute(date, timeZone, disambiguation);\n  return fromAbsolute(ms, timeZone);\n}\n\nexport function zonedToDate(date: ZonedDateTime) {\n  let ms = epochFromDate(date) - date.offset;\n  return new Date(ms);\n}\n\n/** Converts a `ZonedDateTime` from one time zone to another. */\nexport function toTimeZone(date: ZonedDateTime, timeZone: string): ZonedDateTime {\n  let ms = epochFromDate(date) - date.offset;\n  return toCalendar(fromAbsolute(ms, timeZone), date.calendar);\n}\n\n/** Converts the given `ZonedDateTime` into the user's local time zone. */\nexport function toLocalTimeZone(date: ZonedDateTime): ZonedDateTime {\n  return toTimeZone(date, getLocalTimeZone());\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst EPOCH = 1721426; // 001/01/03 Julian C.E.\nexport function gregorianToJulianDay(era: string, year: number, month: number, day: number): number {\n  year = getExtendedYear(era, year);\n\n  let y1 = year - 1;\n  let monthOffset = -2;\n  if (month <= 2) {\n    monthOffset = 0;\n  } else if (isLeapYear(year)) {\n    monthOffset = -1;\n  }\n\n  return (\n    EPOCH -\n    1 +\n    365 * y1 +\n    Math.floor(y1 / 4) -\n    Math.floor(y1 / 100) +\n    Math.floor(y1 / 400) +\n    Math.floor((367 * month - 362) / 12 + monthOffset + day)\n  );\n}\n\nexport function isLeapYear(year: number): boolean {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function getExtendedYear(era: string, year: number): number {\n  return era === 'BC' ? 1 - year : year;\n}\n\nexport function fromExtendedYear(year: number): [string, number] {\n  let era = 'AD';\n  if (year <= 0) {\n    era = 'BC';\n    year = 1 - year;\n  }\n\n  return [era, year];\n}\n\nconst daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\n\n/**\n * The Gregorian calendar is the most commonly used calendar system in the world. It supports two eras: BC, and AD.\n * Years always contain 12 months, and 365 or 366 days depending on whether it is a leap year.\n */\nexport class GregorianCalendar implements Calendar {\n  identifier = 'gregory';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let jd0 = jd;\n    let depoch = jd0 - EPOCH;\n    let quadricent = Math.floor(depoch / 146097);\n    let dqc = mod(depoch, 146097);\n    let cent = Math.floor(dqc / 36524);\n    let dcent = mod(dqc, 36524);\n    let quad = Math.floor(dcent / 1461);\n    let dquad = mod(dcent, 1461);\n    let yindex = Math.floor(dquad / 365);\n\n    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n    let [era, year] = fromExtendedYear(extendedYear);\n    let yearDay = jd0 - gregorianToJulianDay(era, year, 1, 1);\n    let leapAdj = 2;\n    if (jd0 < gregorianToJulianDay(era, year, 3, 1)) {\n      leapAdj = 0;\n    } else if (isLeapYear(year)) {\n      leapAdj = 1;\n    }\n    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n    let day = jd0 - gregorianToJulianDay(era, year, month, 1) + 1;\n\n    return new CalendarDate(era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return gregorianToJulianDay(date.era, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return daysInMonth[isLeapYear(date.year) ? 'leapyear' : 'standard'][date.month - 1];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 366 : 365;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getYearsInEra(date: AnyCalendarDate): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['BC', 'AD'];\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BC';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BC' ? 'AD' : 'BC';\n      date.year = 1 - date.year;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CalendarDate, CalendarDateTime} from './CalendarDate';\n\nexport type Mutable<T> = {\n  -readonly[P in keyof T]: T[P]\n};\n\nexport function mod(amount: number, numerator: number): number {\n  return amount - numerator * Math.floor(amount / numerator);\n}\n\nexport function copy(date: CalendarDate): Mutable<CalendarDate> {\n  if (date.era) {\n    return new CalendarDate(date.calendar, date.era, date.year, date.month, date.day);\n  } else {\n    return new CalendarDate(date.calendar, date.year, date.month, date.day);\n  }\n}\n\nexport function copyDateTime(date: CalendarDateTime): Mutable<CalendarDateTime> {\n  if (date.era) {\n    return new CalendarDateTime(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n  } else {\n    return new CalendarDateTime(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyTime} from './types';\nimport {CalendarDate, CalendarDateTime, ZonedDateTime} from './CalendarDate';\nimport {fromAbsolute, toAbsolute, toCalendar, toCalendarDate} from './conversion';\nimport {weekStartData} from './weekStartData';\n\ntype DateValue = CalendarDate | CalendarDateTime | ZonedDateTime;\n\n/** Returns whether the given dates occur on the same day, regardless of the time or calendar system. */\nexport function isSameDay(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, using the calendar system of the first date. */\nexport function isSameMonth(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, using the calendar system of the first date. */\nexport function isSameYear(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the given dates occur on the same day, and are of the same calendar system. */\nexport function isEqualDay(a: DateValue, b: DateValue): boolean {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, and are of the same calendar system. */\nexport function isEqualMonth(a: DateValue, b: DateValue): boolean {\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, and are of the same calendar system. */\nexport function isEqualYear(a: DateValue, b: DateValue): boolean {\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the date is today in the given time zone. */\nexport function isToday(date: DateValue, timeZone: string): boolean {\n  return isSameDay(date, today(timeZone));\n}\n\n/**\n * Returns the day of week for the given date and locale. Days are numbered from zero to six,\n * where zero is the first day of the week in the given locale. For example, in the United States,\n * the first day of the week is Sunday, but in France it is Monday.\n */\nexport function getDayOfWeek(date: DateValue, locale: string): number {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1 - getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  return dayOfWeek;\n}\n\n/** Returns the current time in the given time zone. */\nexport function now(timeZone: string): ZonedDateTime {\n  return fromAbsolute(Date.now(), timeZone);\n}\n\n/** Returns today's date in the given time zone. */\nexport function today(timeZone: string): CalendarDate {\n  return toCalendarDate(now(timeZone));\n}\n\nexport function compareDate(a: AnyCalendarDate, b: AnyCalendarDate): number {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\n\nexport function compareTime(a: AnyTime, b: AnyTime): number {\n  return timeToMs(a) - timeToMs(b);\n}\n\nfunction timeToMs(a: AnyTime): number {\n  return a.hour * 60 * 60 * 1000 + a.minute * 60 * 1000 + a.second * 1000 + a.millisecond;\n}\n\n/**\n * Returns the number of hours in the given date and time zone.\n * Usually this is 24, but it could be 23 or 25 if the date is on a daylight saving transition.\n */\nexport function getHoursInDay(a: CalendarDate, timeZone: string): number {\n  let ms = toAbsolute(a, timeZone);\n  let tomorrow = a.add({days: 1});\n  let tomorrowMs = toAbsolute(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\n\nlet localTimeZone = null;\n\n/** Returns the time zone identifier for the current user. */\nexport function getLocalTimeZone(): string {\n  // TODO: invalidate this somehow?\n  if (localTimeZone == null) {\n    localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  return localTimeZone;\n}\n\n/** Returns the first date of the month for the given date. */\nexport function startOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function startOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function startOfMonth(date: CalendarDate): CalendarDate;\nexport function startOfMonth(date: DateValue): DateValue;\nexport function startOfMonth(date: DateValue): DateValue {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({days: date.day - 1});\n}\n\n/** Returns the last date of the month for the given date. */\nexport function endOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function endOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function endOfMonth(date: CalendarDate): CalendarDate;\nexport function endOfMonth(date: DateValue): DateValue;\nexport function endOfMonth(date: DateValue): DateValue {\n  return date.add({days: date.calendar.getDaysInMonth(date) - date.day});\n}\n\n/** Returns the first day of the year for the given date. */\nexport function startOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function startOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function startOfYear(date: CalendarDate): CalendarDate;\nexport function startOfYear(date: DateValue): DateValue;\nexport function startOfYear(date: DateValue): DateValue {\n  return startOfMonth(date.subtract({months: date.month - 1}));\n}\n\n/** Returns the last day of the year for the given date. */\nexport function endOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function endOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function endOfYear(date: CalendarDate): CalendarDate;\nexport function endOfYear(date: DateValue): DateValue;\nexport function endOfYear(date: DateValue): DateValue {\n  return endOfMonth(date.add({months: date.calendar.getMonthsInYear(date) - date.month}));\n}\n\nexport function getMinimumMonthInYear(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumMonthInYear) {\n    return date.calendar.getMinimumMonthInYear(date);\n  }\n\n  return 1;\n}\n\nexport function getMinimumDayInMonth(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumDayInMonth) {\n    return date.calendar.getMinimumDayInMonth(date);\n  }\n\n  return 1;\n}\n\n/** Returns the first date of the week for the given date and locale. */\nexport function startOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function startOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function startOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function startOfWeek(date: DateValue, locale: string): DateValue;\nexport function startOfWeek(date: DateValue, locale: string): DateValue {\n  let dayOfWeek = getDayOfWeek(date, locale);\n  return date.subtract({days: dayOfWeek});\n}\n\n/** Returns the last date of the week for the given date and locale. */\nexport function endOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function endOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function endOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function endOfWeek(date: DateValue, locale: string): DateValue {\n  return startOfWeek(date, locale).add({days: 6});\n}\n\nconst cachedRegions = new Map<string, string>();\n\nfunction getRegion(locale: string) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = cachedRegions.get(locale);\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      cachedRegions.set(locale, region);\n    }\n    return region;\n  }\n\n  // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n  let part = locale.split('-')[1];\n  return part === 'u' ? null : part;\n}\n\nfunction getWeekStart(locale: string) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = getRegion(locale);\n  return weekStartData[region] || 0;\n}\n\n/** Returns the number of weeks in the given month and locale. */\nexport function getWeeksInMonth(date: DateValue, locale: string): number {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil((getDayOfWeek(startOfMonth(date), locale) + days) / 7);\n}\n\n/** Returns the lesser of the two provider dates. */\nexport function minDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) <= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\n/** Returns the greater of the two provider dates. */\nexport function maxDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) >= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\nconst WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\n\n/** Returns whether the given date is on a weekend in the given locale. */\nexport function isWeekend(date: DateValue, locale: string): boolean {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  let region = getRegion(locale);\n  // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n  let [start, end] = WEEKEND_DATA[region] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\n\n/** Returns whether the given date is on a weekday in the given locale. */\nexport function isWeekday(date: DateValue, locale: string): boolean {\n  return !isWeekend(date, locale);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\nexport const weekStartData = {\n  '001': 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AT: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyDateTime, Disambiguation} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, possibleAbsolutes, toAbsolute, toCalendar, toCalendarDateTime, toTimeZone} from './conversion';\nimport {getLocalTimeZone} from './queries';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::(\\d{2}))?)?\\[(.*?)\\]$/;\nconst ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::(\\d{2}))?)|Z)$/;\n\n/** Parses an ISO 8601 time string. */\nexport function parseTime(value: string): Time {\n  let m = value.match(TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 time string: ' + value);\n  }\n\n  return new Time(\n    parseNumber(m[1], 0, 23),\n    m[2] ? parseNumber(m[2], 0, 59) : 0,\n    m[3] ? parseNumber(m[3], 0, 59) : 0,\n    m[4] ? parseNumber(m[4], 0, Infinity) * 1000 : 0\n  );\n}\n\n/** Parses an ISO 8601 date string, with no time components. */\nexport function parseDate(value: string): CalendarDate {\n  let m = value.match(DATE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date string: ' + value);\n  }\n\n  let date: Mutable<CalendarDate> = new CalendarDate(\n    parseNumber(m[1], 0, 9999),\n    parseNumber(m[2], 1, 12),\n    1\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDate;\n}\n\n/** Parses an ISO 8601 date and time string, with no time zone. */\nexport function parseDateTime(value: string): CalendarDateTime {\n  let m = value.match(DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<CalendarDateTime> = new CalendarDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDateTime;\n}\n\n/**\n * Parses an ISO 8601 date and time string with a time zone extension and optional UTC offset\n * (e.g. \"2021-11-07T00:45[America/Los_Angeles]\" or \"2021-11-07T00:45-07:00[America/Los_Angeles]\").\n * Ambiguous times due to daylight saving time transitions are resolved according to the `disambiguation`\n * parameter.\n */\nexport function parseZonedDateTime(value: string, disambiguation?: Disambiguation): ZonedDateTime {\n  let m = value.match(ZONED_DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[10],\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  let plainDateTime = toCalendarDateTime(date as ZonedDateTime);\n\n  let ms: number;\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n    ms = epochFromDate(date as ZonedDateTime) - date.offset;\n\n    // Validate offset against parsed date.\n    let absolutes = possibleAbsolutes(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) {\n      throw new Error(`Offset ${offsetToString(date.offset)} is invalid for ${dateTimeToString(date)} in ${date.timeZone}`);\n    }\n  } else {\n    // Convert to absolute and back to fix invalid times due to DST.\n    ms = toAbsolute(toCalendarDateTime(plainDateTime), date.timeZone, disambiguation);\n  }\n\n  return fromAbsolute(ms, date.timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the provided time zone.\n */\nexport function parseAbsolute(value: string, timeZone: string): ZonedDateTime {\n  let m = value.match(ABSOLUTE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    timeZone,\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n  }\n\n  return toTimeZone(date as ZonedDateTime, timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the user's local time zone.\n */\nexport function parseAbsoluteToLocal(value: string): ZonedDateTime {\n  return parseAbsolute(value, getLocalTimeZone());\n}\n\nfunction parseNumber(value: string, min: number, max: number) {\n  let val = Number(value);\n  if (val < min || val > max) {\n    throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n  }\n\n  return val;\n}\n\nexport function timeToString(time: Time): string {\n  return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;\n}\n\nexport function dateToString(date: CalendarDate): string {\n  let gregorianDate = toCalendar(date, new GregorianCalendar());\n  return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;\n}\n\nexport function dateTimeToString(date: AnyDateTime): string {\n  // @ts-ignore\n  return `${dateToString(date)}T${timeToString(date)}`;\n}\n\nfunction offsetToString(offset: number) {\n  let sign = Math.sign(offset) < 0 ? '-' : '+';\n  offset = Math.abs(offset);\n  let offsetHours = Math.floor(offset / (60 * 60 * 1000));\n  let offsetMinutes = (offset % (60 * 60 * 1000)) / (60 * 1000);\n  return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;\n}\n\nexport function zonedDateTimeToString(date: ZonedDateTime): string {\n  return `${dateTimeToString(date)}${offsetToString(date.offset)}[${date.timeZone}]`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nconst ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nconst ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nconst ERA_NAMES = ['meiji', 'taisho', 'showa', 'heisei', 'reiwa'];\n\nfunction findEraFromGregorianDate(date: AnyCalendarDate) {\n  const idx = ERA_START_DATES.findIndex(([year, month, day]) => {\n    if (date.year < year) {\n      return true;\n    }\n\n    if (date.year === year && date.month < month) {\n      return true;\n    }\n\n    if (date.year === year && date.month === month && date.day < day) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (idx === -1) {\n    return ERA_START_DATES.length - 1;\n  }\n\n  if (idx === 0) {\n    return 0;\n  }\n\n  return idx - 1;\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let eraAddend = ERA_ADDENDS[ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) {\n    throw new Error('Unknown era: ' + date.era);\n  }\n\n  return new CalendarDate(\n    date.year + eraAddend,\n    date.month,\n    date.day\n  );\n}\n\n/**\n * The Japanese calendar is based on the Gregorian calendar, but with eras for the reign of each Japanese emperor.\n * Whenever a new emperor ascends to the throne, a new era begins and the year starts again from 1.\n * Note that eras before 1868 (Gregorian) are not currently supported by this implementation.\n */\nexport class JapaneseCalendar extends GregorianCalendar {\n  identifier = 'japanese';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let era = findEraFromGregorianDate(date);\n\n    return new CalendarDate(\n      this,\n      ERA_NAMES[era],\n      date.year - ERA_ADDENDS[era],\n      date.month,\n      date.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let gregorianDate = toGregorian(date);\n    let era = findEraFromGregorianDate(gregorianDate);\n\n    if (ERA_NAMES[era] !== date.era) {\n      date.era = ERA_NAMES[era];\n      date.year = gregorianDate.year - ERA_ADDENDS[era];\n    }\n\n    // Constrain in case we went before the first supported era.\n    this.constrainDate(date);\n  }\n\n  constrainDate(date: Mutable<AnyCalendarDate>) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    let end = ERA_END_DATES[idx];\n    if (end != null) {\n      let [endYear, endMonth, endDay] = end;\n\n      // Constrain the year to the maximum possible value in the era.\n      // Then constrain the month and day fields within that.\n      let maxYear = endYear - ERA_ADDENDS[idx];\n      date.year = Math.max(1, Math.min(maxYear, date.year));\n      if (date.year === maxYear) {\n        date.month = Math.min(endMonth, date.month);\n\n        if (date.month === endMonth) {\n          date.day = Math.min(endDay, date.day);\n        }\n      }\n    }\n\n    if (date.year === 1 && idx >= 0) {\n      let [, startMonth, startDay] = ERA_START_DATES[idx];\n      date.month = Math.max(startMonth, date.month);\n\n      if (date.month === startMonth) {\n        date.day = Math.max(startDay, date.day);\n      }\n    }\n  }\n\n  getEras() {\n    return ERA_NAMES;\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // Get the number of years in the era, taking into account the date's month and day fields.\n    let era = ERA_NAMES.indexOf(date.era);\n    let cur = ERA_START_DATES[era];\n    let next = ERA_START_DATES[era + 1];\n    if (next == null) {\n      // 9999 gregorian is the maximum year allowed.\n      return 9999 - cur[0] + 1;\n    }\n\n    let years = next[0] - cur[0];\n\n    if (date.month < next[1] || (date.month === next[1] && date.day < next[2])) {\n      years++;\n    }\n\n    return years;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  getMinimumMonthInYear(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start ? start[1] : 1;\n  }\n\n  getMinimumDayInMonth(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start && date.month === start[1] ? start[2] : 1;\n  }\n}\n\nfunction getMinimums(date: AnyCalendarDate) {\n  if (date.year === 1) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    return ERA_START_DATES[idx];\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\n\nconst BUDDHIST_ERA_START = -543;\n\n/**\n * The Buddhist calendar is the same as the Gregorian calendar, but counts years\n * starting from the birth of Buddha in 543 BC (Gregorian). It supports only one\n * era, identified as 'BE'.\n */\nexport class BuddhistCalendar extends GregorianCalendar {\n  identifier = 'buddhist';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorianDate = super.fromJulianDay(jd);\n    let year = getExtendedYear(gregorianDate.era, gregorianDate.year);\n    return new CalendarDate(\n      this,\n      year - BUDDHIST_ERA_START,\n      gregorianDate.month,\n      gregorianDate.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['BE'];\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  balanceDate() {}\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(date.year + BUDDHIST_ERA_START);\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst TAIWAN_ERA_START = 1911;\n\nfunction gregorianYear(date: AnyCalendarDate) {\n  return date.era === 'minguo'\n    ? date.year + TAIWAN_ERA_START\n    : 1 - date.year + TAIWAN_ERA_START;\n}\n\nfunction gregorianToTaiwan(year: number): [string, number] {\n  let y = year - TAIWAN_ERA_START;\n  if (y > 0) {\n    return ['minguo', y];\n  } else {\n    return ['before_minguo', 1 - y];\n  }\n}\n\n/**\n * The Taiwanese calendar is the same as the Gregorian calendar, but years\n * are numbered starting from 1912 (Gregorian). Two eras are supported:\n * 'before_minguo' and 'minguo'.\n */\nexport class TaiwanCalendar extends GregorianCalendar {\n  identifier = 'roc'; // Republic of China\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let extendedYear = getExtendedYear(date.era, date.year);\n    let [era, year] = gregorianToTaiwan(extendedYear);\n    return new CalendarDate(this, era, year, date.month, date.day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['before_minguo', 'minguo'];\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let [era, year] = gregorianToTaiwan(gregorianYear(date));\n    date.era = era;\n    date.year = year;\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'before_minguo';\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    return date.era === 'before_minguo' ? 9999 : 9999 - TAIWAN_ERA_START;\n  }\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(gregorianYear(date));\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod} from '../utils';\n\nconst PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\n\nfunction isLeapYear(year: number): boolean {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n\n  return mod((y1 + 38) * 31, 128) < 31;\n}\n\nfunction persianToJulianDay(year: number, month: number, day: number): number {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n\n  return (\n    PERSIAN_EPOCH -\n    1 +\n    1029983 * Math.floor(y0 / 2820) +\n    365 * (y1 - 1) +\n    Math.floor((31 * y1 - 5) / 128) +\n    offset +\n    day\n  );\n}\n\n/**\n * The Persian calendar is the main calendar used in Iran and Afghanistan. It has 12 months\n * in each year, the first 6 of which have 31 days, and the next 5 have 30 days. The 12th month\n * has either 29 or 30 days depending on whether it is a leap year. The Persian year starts\n * around the March equinox.\n */\nexport class PersianCalendar implements Calendar {\n  identifier = 'persian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d0 = jd - persianToJulianDay(475, 1, 1);\n    let n2820 = Math.floor(d0 / 1029983);\n    let d1 = mod(d0, 1029983);\n    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n    let year = 474 + 2820 * n2820 + y2820;\n    if (year <= 0) {\n      year--;\n    }\n\n    let yDay = jd - persianToJulianDay(year, 1, 1) + 1;\n    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n    let day = jd - persianToJulianDay(year, month, 1) + 1;\n\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return persianToJulianDay(date.year, date.month, date.day);\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month <= 6) {\n      return 31;\n    }\n\n    if (date.month <= 11) {\n      return 30;\n    }\n\n    return isLeapYear(date.year) ? 30 : 29;\n  }\n\n  getEras() {\n    return ['AP'];\n  }\n\n  getYearsInEra(): number {\n    // 9378-10-10 persian is 9999-12-31 gregorian.\n    // Round down to 9377 to set the maximum full year.\n    return 9377;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, GregorianCalendar, gregorianToJulianDay, isLeapYear} from './GregorianCalendar';\n\n// Starts in 78 AD,\nconst INDIAN_ERA_START = 78;\n\n// The Indian year starts 80 days later than the Gregorian year.\nconst INDIAN_YEAR_START = 80;\n\n/**\n * The Indian National Calendar is similar to the Gregorian calendar, but with\n * years numbered since the Saka era in 78 AD (Gregorian). There are 12 months\n * in each year, with either 30 or 31 days. Only one era identifier is supported: 'saka'.\n */\nexport class IndianCalendar extends GregorianCalendar {\n  identifier = 'indian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd);\n\n    // Year in Saka era\n    let indianYear = date.year - INDIAN_ERA_START;\n\n    // Day number in Gregorian year (starting from 0)\n    let yDay = jd - gregorianToJulianDay(date.era, date.year, 1, 1);\n\n    let leapMonth: number;\n    if (yDay < INDIAN_YEAR_START) {\n      //  Day is at the end of the preceding Saka year\n      indianYear--;\n\n      // Days in leapMonth this year, previous Gregorian year\n      leapMonth = isLeapYear(date.year - 1) ? 31 : 30;\n      yDay += leapMonth + (31 * 5) + (30 * 3) + 10;\n    } else {\n      // Days in leapMonth this year\n      leapMonth = isLeapYear(date.year) ? 31 : 30;\n      yDay -= INDIAN_YEAR_START;\n    }\n\n    let indianMonth: number;\n    let indianDay: number;\n    if (yDay < leapMonth) {\n      indianMonth = 1;\n      indianDay = yDay + 1;\n    } else {\n      let mDay = yDay - leapMonth;\n      if (mDay < (31 * 5)) {\n        indianMonth = Math.floor(mDay / 31) + 2;\n        indianDay = (mDay % 31) + 1;\n      } else {\n        mDay -= 31 * 5;\n        indianMonth = Math.floor(mDay / 30) + 7;\n        indianDay = (mDay % 30) + 1;\n      }\n    }\n\n    return new CalendarDate(this, indianYear, indianMonth, indianDay);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let extendedYear = date.year + INDIAN_ERA_START;\n    let [era, year] = fromExtendedYear(extendedYear);\n\n    let leapMonth: number;\n    let jd: number;\n    if (isLeapYear(year)) {\n      leapMonth = 31;\n      jd = gregorianToJulianDay(era, year, 3, 21);\n    } else {\n      leapMonth = 30;\n      jd = gregorianToJulianDay(era, year, 3, 22);\n    }\n\n    if (date.month === 1) {\n      return jd + date.day - 1;\n    }\n\n    jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n\n    if (date.month >= 8) {\n      jd += (date.month - 7) * 30;\n    }\n\n    jd += date.day - 1;\n    return jd;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month === 1 && isLeapYear(date.year + INDIAN_ERA_START)) {\n      return 31;\n    }\n\n    if (date.month >= 2 && date.month <= 6) {\n      return 31;\n    }\n\n    return 30;\n  }\n\n  getYearsInEra(): number {\n    // 9999-12-31 gregorian is 9920-10-10 indian.\n    // Round down to 9919 for the last full year.\n    return 9919;\n  }\n\n  getEras() {\n    return ['saka'];\n  }\n\n  balanceDate() {}\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\n\nconst CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nconst ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nconst UMALQURA_YEAR_START = 1300;\nconst UMALQURA_YEAR_END = 1600;\nconst UMALQURA_START_DAYS = 460322;\n\nfunction islamicToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return day +\n    Math.ceil(29.5 * (month - 1)) +\n    (year - 1) * 354 +\n    Math.floor((3 + 11 * year) / 30) +\n    epoch - 1;\n}\n\nfunction julianDayToIslamic(calendar: Calendar, epoch: number, jd: number) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - islamicToJulianDay(epoch, year, month, 1) + 1;\n\n  return new CalendarDate(calendar, year, month, day);\n}\n\nfunction isLeapYear(year: number): boolean {\n  return (14 + 11 * year) % 30 < 11;\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The civil variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Friday, July 16 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicCivilCalendar implements Calendar {\n  identifier = 'islamic-civil';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, CIVIL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(CIVIL_EPOC, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && isLeapYear(date.year)) {\n      length++;\n    }\n\n    return length;\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 355 : 354;\n  }\n\n  getYearsInEra(): number {\n    // 9999 gregorian\n    return 9665;\n  }\n\n  getEras() {\n    return ['AH'];\n  }\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The tabular variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Thursday, July 15 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicTabularCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-tbla';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, ASTRONOMICAL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n}\n\n// Generated by scripts/generate-umalqura.js\nconst UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';\nlet UMALQURA_MONTHLENGTH: Uint16Array;\nlet UMALQURA_YEAR_START_TABLE: Uint32Array;\n\nfunction umalquraYearStart(year: number): number {\n  return UMALQURA_START_DAYS + UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\nfunction umalquraMonthLength(year: number, month: number): number {\n  let idx = (year - UMALQURA_YEAR_START);\n  let mask = (0x01 << (11 - (month - 1)));\n  if ((UMALQURA_MONTHLENGTH[idx] & mask) === 0) {\n    return 29;\n  } else {\n    return 30;\n  }\n}\n\nfunction umalquraMonthStart(year: number, month: number): number {\n  let day = umalquraYearStart(year);\n  for (let i = 1; i < month; i++) {\n    day += umalquraMonthLength(year, i);\n  }\n  return day;\n}\n\nfunction umalquraYearLength(year: number): number {\n  return UMALQURA_YEAR_START_TABLE[year + 1 - UMALQURA_YEAR_START] - UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The Umalqura variant is primarily used in Saudi Arabia. It is a lunar calendar, based on astronomical\n * calculations that predict the sighting of a crescent moon. Month and year lengths vary between years\n * depending on these calculations.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicUmalquraCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-umalqura';\n\n  constructor() {\n    super();\n    if (!UMALQURA_MONTHLENGTH) {\n      UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob(UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n    }\n\n    if (!UMALQURA_YEAR_START_TABLE) {\n      UMALQURA_YEAR_START_TABLE = new Uint32Array(UMALQURA_YEAR_END - UMALQURA_YEAR_START + 1);\n\n      let yearStart = 0;\n      for (let year = UMALQURA_YEAR_START; year <= UMALQURA_YEAR_END; year++) {\n        UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START] = yearStart;\n        for (let i = 1; i <= 12; i++) {\n          yearStart += umalquraMonthLength(year, i);\n        }\n      }\n    }\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let days = jd - CIVIL_EPOC;\n    let startDays = umalquraYearStart(UMALQURA_YEAR_START);\n    let endDays = umalquraYearStart(UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) {\n      return super.fromJulianDay(jd);\n    } else {\n      let y = UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n      while (d > 0) {\n        y++;\n        d = days - umalquraYearStart(y) + 1;\n        let yearLength = umalquraYearLength(y);\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = umalquraMonthLength(y, m);\n          m = 1;\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = umalquraMonthLength(y, m);\n          }\n          break;\n        }\n      }\n\n      return new CalendarDate(this, y, m, (days - umalquraMonthStart(y, m) + 1));\n    }\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.toJulianDay(date);\n    }\n\n    return CIVIL_EPOC + umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInMonth(date);\n    }\n\n    return umalquraMonthLength(date.year, date.month);\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInYear(date);\n    }\n\n    return umalquraYearLength(date.year);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst HEBREW_EPOCH = 347997;\n\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nconst HOUR_PARTS = 1080;\nconst DAY_PARTS  = 24 * HOUR_PARTS;\n\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nconst MONTH_DAYS = 29;\nconst MONTH_FRACT = 12 * HOUR_PARTS + 793;\nconst MONTH_PARTS = MONTH_DAYS * DAY_PARTS + MONTH_FRACT;\n\nfunction isLeapYear(year: number) {\n  return mod(year * 7 + 1, 19) < 7;\n}\n\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction hebrewDelay1(year: number) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n\n  if (mod(3 * (day + 1), 7) < 3) {\n    day += 1;\n  }\n\n  return day;\n}\n\n// Check for delay in start of new year due to length of adjacent years\nfunction hebrewDelay2(year: number) {\n  let last = hebrewDelay1(year - 1);\n  let present = hebrewDelay1(year);\n  let next = hebrewDelay1(year + 1);\n\n  if (next - present === 356) {\n    return 2;\n  }\n\n  if (present - last === 382) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction startOfYear(year: number) {\n  return hebrewDelay1(year) + hebrewDelay2(year);\n}\n\nfunction getDaysInYear(year: number) {\n  return startOfYear(year + 1) - startOfYear(year);\n}\n\nfunction getYearType(year: number) {\n  let yearLength = getDaysInYear(year);\n\n  if (yearLength > 380) {\n    yearLength -= 30; // Subtract length of leap month.\n  }\n\n  switch (yearLength) {\n    case 353:\n      return 0; // deficient\n    case 354:\n      return 1; // normal\n    case 355:\n      return 2; // complete\n  }\n}\n\nfunction getDaysInMonth(year: number, month: number): number {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !isLeapYear(year)) {\n    month++;\n  }\n\n  // First of all, dispose of fixed-length 29 day months\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) {\n    return 29;\n  }\n\n  let yearType = getYearType(year);\n\n  // If it's Heshvan, days depend on length of year\n  if (month === 2) {\n    return yearType === 2 ? 30 : 29;\n  }\n\n  // Similarly, Kislev varies with the length of year\n  if (month === 3) {\n    return yearType === 0 ? 29 : 30;\n  }\n\n  // Adar I only exists in leap years\n  if (month === 6) {\n    return isLeapYear(year) ? 30 : 0;\n  }\n\n  return 30;\n}\n\n/**\n * The Hebrew calendar is used in Israel and around the world by the Jewish faith.\n * Years include either 12 or 13 months depending on whether it is a leap year.\n * In leap years, an extra month is inserted at month 6.\n */\nexport class HebrewCalendar implements Calendar {\n  identifier = 'hebrew';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d = jd - HEBREW_EPOCH;\n    let m = (d * DAY_PARTS) / MONTH_PARTS;           // Months (approx)\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n    let ys = startOfYear(year);                      // 1st day of year\n    let dayOfYear = Math.floor(d - ys);\n\n    // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n    while (dayOfYear < 1) {\n      year--;\n      ys = startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    }\n\n    // Now figure out which month we're in, and the date within that month\n    let month = 1;\n    let monthStart = 0;\n    while (monthStart < dayOfYear) {\n      monthStart += getDaysInMonth(year, month);\n      month++;\n    }\n\n    month--;\n    monthStart -= getDaysInMonth(year, month);\n\n    let day = dayOfYear - monthStart;\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let jd = startOfYear(date.year);\n    for (let month = 1; month < date.month; month++) {\n      jd += getDaysInMonth(date.year, month);\n    }\n\n    return jd + date.day + HEBREW_EPOCH;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 13 : 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return getDaysInYear(date.year);\n  }\n\n  getYearsInEra(): number {\n    // 6239 gregorian\n    return 9999;\n  }\n\n  getEras() {\n    return ['AM'];\n  }\n\n  balanceYearMonth(date: Mutable<AnyCalendarDate>, previousDate: AnyCalendarDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if (isLeapYear(previousDate.year) && !isLeapYear(date.year) && previousDate.month > 6) {\n        date.month--;\n      } else if (!isLeapYear(previousDate.year) && isLeapYear(date.year) && previousDate.month > 6) {\n        date.month++;\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {Mutable} from '../utils';\n\nconst ETHIOPIC_EPOCH = 1723856;\nconst COPTIC_EPOCH = 1824665;\n\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nconst AMETE_MIHRET_DELTA = 5500;\n\nfunction ceToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return (\n    epoch                   // difference from Julian epoch to 1,1,1\n    + 365 * year            // number of days from years\n    + Math.floor(year / 4)  // extra day of leap year\n    + 30 * (month - 1)      // number of days from months (1 based)\n    + day - 1               // number of days for present month (1 based)\n  );\n}\n\nfunction julianDayToCE(epoch: number, jd: number) {\n  let year = Math.floor((4 * (jd - epoch)) / 1461);\n  let month = 1 + Math.floor((jd - ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - ceToJulianDay(epoch, year, month, 1);\n  return [year, month, day];\n}\n\nfunction getLeapDay(year: number) {\n  return Math.floor((year % 4) / 3);\n}\n\nfunction getDaysInMonth(year: number, month: number) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0) {\n    // not intercalary month\n    return 30;\n  } else {\n    // intercalary month 5 days + possible leap day\n    return getLeapDay(year) + 5;\n  }\n}\n\n/**\n * The Ethiopic calendar system is the official calendar used in Ethiopia.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'AA' and 'AM'.\n */\nexport class EthiopicCalendar implements Calendar {\n  identifier = 'ethiopic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(ETHIOPIC_EPOCH, jd);\n    let era = 'AM';\n    if (year <= 0) {\n      era = 'AA';\n      year += AMETE_MIHRET_DELTA;\n    }\n\n    return new CalendarDate(this, era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'AA') {\n      year -= AMETE_MIHRET_DELTA;\n    }\n\n    return ceToJulianDay(ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(): number {\n    return 13;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return 365 + getLeapDay(date.year);\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n    // Round down to 9991 for the last full year.\n    // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n    return date.era === 'AA' ? 9999 : 9991;\n  }\n\n  getEras() {\n    return ['AA', 'AM'];\n  }\n}\n\n/**\n * The Ethiopic (Amete Alem) calendar is the same as the modern Ethiopic calendar,\n * except years were measured from a different epoch. Only one era is supported: 'AA'.\n */\nexport class EthiopicAmeteAlemCalendar extends EthiopicCalendar {\n  identifier = 'ethioaa'; // also known as 'ethiopic-amete-alem' in ICU\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(ETHIOPIC_EPOCH, jd);\n    year += AMETE_MIHRET_DELTA;\n    return new CalendarDate(this, 'AA', year, month, day);\n  }\n\n  getEras() {\n    return ['AA'];\n  }\n\n  getYearsInEra(): number {\n    // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n    return 9999;\n  }\n}\n\n/**\n * The Coptic calendar is similar to the Ethiopic calendar.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'BCE' and 'CE'.\n */\nexport class CopticCalendar extends EthiopicCalendar {\n  identifier = 'coptic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(COPTIC_EPOCH, jd);\n    let era = 'CE';\n    if (year <= 0) {\n      era = 'BCE';\n      year = 1 - year;\n    }\n\n    return new CalendarDate(this, era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return ceToJulianDay(COPTIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return getDaysInMonth(year, date.month);\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BCE';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BCE' ? 'CE' : 'BCE';\n      date.year = 1 - date.year;\n    }\n  }\n\n  getEras() {\n    return ['BCE', 'CE'];\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // 9999-12-30 gregorian is 9716-02-20 coptic.\n    // Round down to 9715 for the last full year.\n    // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n    return date.era === 'BCE' ? 9999 : 9715;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nimport {Calendar} from './types';\nimport {CopticCalendar, EthiopicAmeteAlemCalendar, EthiopicCalendar} from './calendars/EthiopicCalendar';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {HebrewCalendar} from './calendars/HebrewCalendar';\nimport {IndianCalendar} from './calendars/IndianCalendar';\nimport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nimport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nimport {PersianCalendar} from './calendars/PersianCalendar';\nimport {TaiwanCalendar} from './calendars/TaiwanCalendar';\n\n/** Creates a `Calendar` instance from a Unicode calendar identifier string. */\nexport function createCalendar(name: string): Calendar {\n  switch (name) {\n    case 'buddhist':\n      return new BuddhistCalendar();\n    case 'ethiopic':\n      return new EthiopicCalendar();\n    case 'ethioaa':\n      return new EthiopicAmeteAlemCalendar();\n    case 'coptic':\n      return new CopticCalendar();\n    case 'hebrew':\n      return new HebrewCalendar();\n    case 'indian':\n      return new IndianCalendar();\n    case 'islamic-civil':\n      return new IslamicCivilCalendar();\n    case 'islamic-tbla':\n      return new IslamicTabularCalendar();\n    case 'islamic-umalqura':\n      return new IslamicUmalquraCalendar();\n    case 'japanese':\n      return new JapaneseCalendar();\n    case 'persian':\n      return new PersianCalendar();\n    case 'roc':\n      return new TaiwanCalendar();\n    case 'gregory':\n    default:\n      return new GregorianCalendar();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.DateTimeFormat>();\n\ninterface ResolvedDateTimeFormatOptions extends Intl.ResolvedDateTimeFormatOptions {\n  hourCycle?: Intl.DateTimeFormatOptions['hourCycle']\n}\n\ninterface DateRangeFormatPart extends Intl.DateTimeFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/** A wrapper around Intl.DateTimeFormat that fixes various browser bugs, and polyfills new features. */\nexport class DateFormatter implements Intl.DateTimeFormat {\n  private formatter: Intl.DateTimeFormat;\n  private options: Intl.DateTimeFormatOptions;\n  private resolvedHourCycle: Intl.DateTimeFormatOptions['hourCycle'];\n\n  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {\n    this.formatter = getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value: Date): string {\n    return this.formatter.format(value);\n  }\n\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  formatToParts(value: Date): Intl.DateTimeFormatPart[] {\n    return this.formatter.formatToParts(value);\n  }\n\n  /** Formats a date range as a string. */\n  formatRange(start: Date, end: Date): string {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n\n  /** Formats a date range as an array of parts. */\n  formatRangeToParts(start: Date, end: Date): DateRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as DateRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as DateRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): ResolvedDateTimeFormatOptions {\n    let resolvedOptions = this.formatter.resolvedOptions() as ResolvedDateTimeFormatOptions;\n    if (hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) {\n        this.resolvedHourCycle = getResolvedHourCycle(resolvedOptions.locale, this.options);\n      }\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n\n    // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n    // https://bugs.webkit.org/show_bug.cgi?id=241564\n    if (resolvedOptions.calendar === 'ethiopic-amete-alem') {\n      resolvedOptions.calendar = 'ethioaa';\n    }\n\n    return resolvedOptions;\n  }\n}\n\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {\n    // All locales use h23 for 24 hour time. None use h24.\n  }\n};\n\nfunction getCachedDateFormatter(locale: string, options: Intl.DateTimeFormatOptions = {}): Intl.DateTimeFormat {\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && hasBuggyHour12Behavior()) {\n    options = {...options};\n    let pref = hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref ?? defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet _hasBuggyHour12Behavior: boolean = null;\nfunction hasBuggyHour12Behavior() {\n  if (_hasBuggyHour12Behavior == null) {\n    _hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      hour12: false\n    }).format(new Date(2020, 2, 3, 0)) === '24';\n  }\n\n  return _hasBuggyHour12Behavior;\n}\n\nlet _hasBuggyResolvedHourCycle: boolean = null;\nfunction hasBuggyResolvedHourCycle() {\n  if (_hasBuggyResolvedHourCycle == null) {\n    _hasBuggyResolvedHourCycle = (new Intl.DateTimeFormat('fr', {\n      hour: 'numeric',\n      hour12: false\n    }).resolvedOptions() as ResolvedDateTimeFormatOptions).hourCycle === 'h12';\n  }\n\n  return _hasBuggyResolvedHourCycle;\n}\n\nfunction getResolvedHourCycle(locale: string, options: Intl.DateTimeFormatOptions) {\n  if (!options.timeStyle && !options.hour) {\n    return undefined;\n  }\n\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = getCachedDateFormatter(locale, {\n    ...options,\n    timeZone: undefined // use local timezone\n  });\n\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour').value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour').value, 10);\n\n  if (min === 0 && max === 23) {\n    return 'h23';\n  }\n\n  if (min === 24 && max === 23) {\n    return 'h24';\n  }\n\n  if (min === 0 && max === 11) {\n    return 'h11';\n  }\n\n  if (min === 12 && max === 11) {\n    return 'h12';\n  }\n\n  throw new Error('Unexpected hour cycle result');\n}\n"]},"metadata":{},"sourceType":"module"}