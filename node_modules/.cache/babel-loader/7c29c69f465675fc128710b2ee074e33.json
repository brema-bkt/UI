{"ast":null,"code":"import $6nfFC$swchelperssrc_define_propertymjs from \"@swc/helpers/src/_define_property.mjs\";\nimport $6nfFC$react, { useRef as $6nfFC$useRef, useContext as $6nfFC$useContext, useMemo as $6nfFC$useMemo, useEffect as $6nfFC$useEffect, useState as $6nfFC$useState, useCallback as $6nfFC$useCallback } from \"react\";\nimport { useLayoutEffect as $6nfFC$useLayoutEffect, runAfterTransition as $6nfFC$runAfterTransition, focusWithoutScrolling as $6nfFC$focusWithoutScrolling, mergeProps as $6nfFC$mergeProps, useSyncRef as $6nfFC$useSyncRef } from \"@react-aria/utils\";\nimport { getInteractionModality as $6nfFC$getInteractionModality, isFocusVisible as $6nfFC$isFocusVisible, useFocusVisibleListener as $6nfFC$useFocusVisibleListener, useFocus as $6nfFC$useFocus, useFocusWithin as $6nfFC$useFocusWithin, useKeyboard as $6nfFC$useKeyboard } from \"@react-aria/interactions\";\nimport $6nfFC$clsx from \"clsx\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $6a99195332edec8b$export$80f3e147d781571c(element) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if ((0, $6nfFC$getInteractionModality)() === \"virtual\") {\n    let lastFocusedElement = document.activeElement;\n    (0, $6nfFC$runAfterTransition)(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) (0, $6nfFC$focusWithoutScrolling)(element);\n    });\n  } else (0, $6nfFC$focusWithoutScrolling)(element);\n}\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nfunction $645f2e67b85a24c9$var$isStyleVisible(element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) return false;\n  let {\n    display: display,\n    visibility: visibility\n  } = element.style;\n  let isVisible = display !== \"none\" && visibility !== \"hidden\" && visibility !== \"collapse\";\n\n  if (isVisible) {\n    const {\n      getComputedStyle: getComputedStyle\n    } = element.ownerDocument.defaultView;\n    let {\n      display: computedDisplay,\n      visibility: computedVisibility\n    } = getComputedStyle(element);\n    isVisible = computedDisplay !== \"none\" && computedVisibility !== \"hidden\" && computedVisibility !== \"collapse\";\n  }\n\n  return isVisible;\n}\n\nfunction $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {\n  return !element.hasAttribute(\"hidden\") && (element.nodeName === \"DETAILS\" && childElement && childElement.nodeName !== \"SUMMARY\" ? element.hasAttribute(\"open\") : true);\n}\n\nfunction $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {\n  return element.nodeName !== \"#comment\" && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));\n}\n\nconst $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/(0, $6nfFC$react).createContext(null);\nlet $9bf71ea28793e738$var$activeScope = null;\n\nfunction $9bf71ea28793e738$export$20e40289641fbbb6(props) {\n  let {\n    children: children,\n    contain: contain,\n    restoreFocus: restoreFocus,\n    autoFocus: autoFocus\n  } = props;\n  let startRef = (0, $6nfFC$useRef)();\n  let endRef = (0, $6nfFC$useRef)();\n  let scopeRef = (0, $6nfFC$useRef)([]);\n  let ctx = (0, $6nfFC$useContext)($9bf71ea28793e738$var$FocusContext);\n\n  var _ctx_scopeRef; // The parent scope is based on the JSX tree, using context.\n  // However, if a new scope mounts outside the active scope (e.g. DialogContainer launched from a menu),\n  // we want the parent scope to be the active scope instead.\n\n\n  let ctxParent = (_ctx_scopeRef = ctx === null || ctx === void 0 ? void 0 : ctx.scopeRef) !== null && _ctx_scopeRef !== void 0 ? _ctx_scopeRef : null;\n  let parentScope = (0, $6nfFC$useMemo)(() => $9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope) && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, ctxParent) ? $9bf71ea28793e738$var$activeScope : ctxParent, [ctxParent]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n  }, [children, parentScope]); // add to the focus scope tree in render order because useEffects/useLayoutEffects run children first whereas render runs parent first\n  // which matters when constructing a tree\n\n  if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope) && !$9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$export$d06fae2ee68b101e.addTreeNode(scopeRef, parentScope);\n  let node = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n  node.contain = contain;\n  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);\n  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus); // this layout effect needs to run last so that focusScopeTree cleanup happens at the last moment possible\n\n  (0, $6nfFC$useLayoutEffect)(() => {\n    if (scopeRef) return () => {\n      // Scope may have been re-parented.\n      let parentScope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).parent.scopeRef; // Restore the active scope on unmount if this scope or a descendant scope is active.\n      // Parent effect cleanups run before children, so we need to check if the\n      // parent scope actually still exists before restoring the active scope to it.\n\n      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;\n      $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);\n    };\n  }, [scopeRef, parentScope]);\n  let focusManager = $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef);\n  return /*#__PURE__*/(0, $6nfFC$react).createElement($9bf71ea28793e738$var$FocusContext.Provider, {\n    value: {\n      scopeRef: scopeRef,\n      focusManager: focusManager\n    }\n  }, /*#__PURE__*/(0, $6nfFC$react).createElement(\"span\", {\n    \"data-focus-scope-start\": true,\n    hidden: true,\n    ref: startRef\n  }), children, /*#__PURE__*/(0, $6nfFC$react).createElement(\"span\", {\n    \"data-focus-scope-end\": true,\n    hidden: true,\n    ref: endRef\n  }));\n}\n\nfunction $9bf71ea28793e738$export$10c5169755ce7bd7() {\n  var _useContext;\n\n  return (_useContext = (0, $6nfFC$useContext)($9bf71ea28793e738$var$FocusContext)) === null || _useContext === void 0 ? void 0 : _useContext.focusManager;\n}\n\nfunction $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {\n  return {\n    focusNext(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode();\n\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode();\n      }\n\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusPrevious(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode();\n\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode();\n      }\n\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusLast(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode();\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    }\n\n  };\n}\n\nconst $9bf71ea28793e738$var$focusableElements = [\"input:not([disabled]):not([type=hidden])\", \"select:not([disabled])\", \"textarea:not([disabled])\", \"button:not([disabled])\", \"a[href]\", \"area[href]\", \"summary\", \"iframe\", \"object\", \"embed\", \"audio[controls]\", \"video[controls]\", \"[contenteditable]\"];\nconst $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(\":not([hidden]),\") + \",[tabindex]:not([disabled]):not([hidden])\";\n$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction $9bf71ea28793e738$var$getScopeRoot(scope) {\n  return scope[0].parentElement;\n}\n\nfunction $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) return false;\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {\n  let focusedNode = (0, $6nfFC$useRef)();\n  let raf = (0, $6nfFC$useRef)(null);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = null;\n      }\n\n      return;\n    } // Handle the Tab key to contain focus within the scope\n\n\n    let onKeyDown = e => {\n      if (e.key !== \"Tab\" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef)) return;\n      let focusedElement = document.activeElement;\n      let scope = scopeRef.current;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: true\n      }, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      }\n\n      e.preventDefault();\n      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);\n    };\n\n    let onFocus = e => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(e.target, scopeRef.current)) {\n        $9bf71ea28793e738$var$activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) focusedNode.current.focus();else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = e.target;\n    };\n\n    let onBlur = e => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(document.activeElement, scopeRef)) {\n          $9bf71ea28793e738$var$activeScope = scopeRef;\n\n          if (document.body.contains(e.target)) {\n            focusedNode.current = e.target;\n            focusedNode.current.focus();\n          } else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n        }\n      });\n    };\n\n    document.addEventListener(\"keydown\", onKeyDown, false);\n    document.addEventListener(\"focusin\", onFocus, false);\n    scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    scope.forEach(element => element.addEventListener(\"focusout\", onBlur, false));\n    return () => {\n      document.removeEventListener(\"keydown\", onKeyDown, false);\n      document.removeEventListener(\"focusin\", onFocus, false);\n      scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n      scope.forEach(element => element.removeEventListener(\"focusout\", onBlur, false));\n    };\n  }, [scopeRef, contain]); // eslint-disable-next-line arrow-body-style\n\n  (0, $6nfFC$useEffect)(() => {\n    return () => {\n      if (raf.current) cancelAnimationFrame(raf.current);\n    };\n  }, [raf]);\n}\n\nfunction $9bf71ea28793e738$var$isElementInAnyScope(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element);\n}\n\nfunction $9bf71ea28793e738$var$isElementInScope(element, scope) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction $9bf71ea28793e738$var$isElementInChildScope(element, scope = null) {\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {\n    scopeRef: s\n  } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {\n    if ($9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;\n  }\n\n  return false;\n}\n\nfunction $9bf71ea28793e738$export$1258395f99bf9cbf(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element, $9bf71ea28793e738$var$activeScope);\n}\n\nfunction $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {\n  var _focusScopeTree_getTreeNode;\n\n  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;\n\n  while (parent) {\n    if (parent.scopeRef === ancestor) return true;\n    parent = parent.parent;\n  }\n\n  return false;\n}\n\nfunction $9bf71ea28793e738$var$focusElement(element, scroll = false) {\n  if (element != null && !scroll) try {\n    (0, $6a99195332edec8b$export$80f3e147d781571c)(element);\n  } catch (err) {// ignore\n  } else if (element != null) try {\n    element.focus();\n  } catch (err1) {// ignore\n  }\n}\n\nfunction $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {\n  let sentinel = scope[0].previousElementSibling;\n  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n    tabbable: tabbable\n  }, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode(); // If the scope does not contain a tabbable element, use the first focusable element.\n\n  if (tabbable && !nextNode) {\n    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n      tabbable: false\n    }, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  $9bf71ea28793e738$var$focusElement(nextNode);\n}\n\nfunction $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {\n  const autoFocusRef = (0, $6nfFC$react).useRef(autoFocus);\n  (0, $6nfFC$useEffect)(() => {\n    if (autoFocusRef.current) {\n      $9bf71ea28793e738$var$activeScope = scopeRef;\n      if (!$9bf71ea28793e738$var$isElementInScope(document.activeElement, $9bf71ea28793e738$var$activeScope.current)) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);\n    }\n\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  (0, $6nfFC$useLayoutEffect)(() => {\n    if (restore || contain) return;\n    let scope = scopeRef.current;\n\n    let onFocus = e => {\n      let target = e.target;\n      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;\n    };\n\n    document.addEventListener(\"focusin\", onFocus, false);\n    scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    return () => {\n      document.removeEventListener(\"focusin\", onFocus, false);\n      scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\n\nfunction $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) return false;\n    scope = scope.parent;\n  }\n\n  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;\n}\n\nfunction $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  const nodeToRestoreRef = (0, $6nfFC$useRef)(typeof document !== \"undefined\" ? document.activeElement : null); // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n\n  (0, $6nfFC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    if (!restoreFocus || contain) return;\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) $9bf71ea28793e738$var$activeScope = scopeRef;\n    };\n\n    document.addEventListener(\"focusin\", onFocus, false);\n    scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    return () => {\n      document.removeEventListener(\"focusin\", onFocus, false);\n      scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]); // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n\n  (0, $6nfFC$useLayoutEffect)(() => {\n    if (!restoreFocus) return;\n    $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current; // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n\n    let onKeyDown = e => {\n      if (e.key !== \"Tab\" || e.altKey || e.ctrlKey || e.metaKey) return;\n      let focusedElement = document.activeElement;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;\n      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore; // Create a DOM tree walker that matches all tabbable elements\n\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(document.body, {\n        tabbable: true\n      }); // Find the next tabbable element after the currently focused element\n\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n        $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = null;\n      } // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n\n\n      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore; // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n\n        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);else // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n          // then move focus to the body.\n          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);\n      }\n    };\n\n    if (!contain) document.addEventListener(\"keydown\", onKeyDown, true);\n    return () => {\n      if (!contain) document.removeEventListener(\"keydown\", onKeyDown, true);\n      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore; // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n\n      if (restoreFocus && nodeToRestore && ($9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current) || document.activeElement === document.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (document.activeElement === document.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n\n            while (treeNode) {\n              if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {\n                $9bf71ea28793e738$var$focusElement(treeNode.nodeToRestore);\n                return;\n              }\n\n              treeNode = treeNode.parent;\n            } // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n\n\n            treeNode = clonedTree.getTreeNode(scopeRef);\n\n            while (treeNode) {\n              if (treeNode.scopeRef && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {\n                $9bf71ea28793e738$var$focusFirstInScope(treeNode.scopeRef.current, true);\n                return;\n              }\n\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n\nfunction $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {\n  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      var _opts_from; // Skip nodes inside the starting node.\n\n\n      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;\n      if (node.matches(selector) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;\n      return NodeFilter.FILTER_SKIP;\n    }\n\n  });\n  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;\n  return walker;\n}\n\nfunction $9bf71ea28793e738$export$c5251b9e124bf29(ref, defaultOptions = {}) {\n  return {\n    focusNext(opts = {}) {\n      let root = ref.current;\n      if (!root) return;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || document.activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;\n      let nextNode = walker.nextNode();\n\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode();\n      }\n\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusPrevious(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || document.activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;else {\n        let next = $9bf71ea28793e738$var$last(walker);\n        if (next) $9bf71ea28793e738$var$focusElement(next, true);\n        return next;\n      }\n      let previousNode = walker.previousNode();\n\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = $9bf71ea28793e738$var$last(walker);\n      }\n\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let next = $9bf71ea28793e738$var$last(walker);\n      if (next) $9bf71ea28793e738$var$focusElement(next, true);\n      return next;\n    }\n\n  };\n}\n\nfunction $9bf71ea28793e738$var$last(walker) {\n  let next;\n  let last;\n\n  do {\n    last = walker.lastChild();\n    if (last) next = last;\n  } while (last);\n\n  return next;\n}\n\nclass $9bf71ea28793e738$var$Tree {\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef, parent, nodeToRestore) {\n    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);\n    let node = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: scopeRef\n    });\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) node.nodeToRestore = nodeToRestore;\n  }\n\n  removeTreeNode(scopeRef) {\n    // never remove the root\n    if (scopeRef === null) return;\n    let node = this.fastMap.get(scopeRef);\n    let parentNode = node.parent; // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n\n    for (let current of this.traverse()) if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;\n\n    let children = node.children;\n    parentNode.removeChild(node);\n    if (children.length > 0) children.forEach(child => parentNode.addChild(child));\n    this.fastMap.delete(node.scopeRef);\n  } // Pre Order Depth First\n\n\n  *traverse(node = this.root) {\n    if (node.scopeRef != null) yield node;\n    if (node.children.length > 0) for (let child of node.children) yield* this.traverse(child);\n  }\n\n  clone() {\n    let newTree = new $9bf71ea28793e738$var$Tree();\n\n    for (let node of this.traverse()) newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);\n\n    return newTree;\n  }\n\n  constructor() {\n    (0, $6nfFC$swchelperssrc_define_propertymjs)(this, \"fastMap\", new Map());\n    this.root = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: null\n    });\n    this.fastMap.set(null, this.root);\n  }\n\n}\n\nclass $9bf71ea28793e738$var$TreeNode {\n  addChild(node) {\n    this.children.push(node);\n    node.parent = this;\n  }\n\n  removeChild(node) {\n    this.children.splice(this.children.indexOf(node), 1);\n    node.parent = undefined;\n  }\n\n  constructor(props) {\n    (0, $6nfFC$swchelperssrc_define_propertymjs)(this, \"children\", []);\n    (0, $6nfFC$swchelperssrc_define_propertymjs)(this, \"contain\", false);\n    this.scopeRef = props.scopeRef;\n  }\n\n}\n\nlet $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {\n  let {\n    autoFocus = false,\n    isTextInput: isTextInput,\n    within: within\n  } = props;\n  let state = (0, $6nfFC$useRef)({\n    isFocused: false,\n    isFocusVisible: autoFocus || (0, $6nfFC$isFocusVisible)()\n  });\n  let [isFocused, setFocused] = (0, $6nfFC$useState)(false);\n  let [isFocusVisibleState, setFocusVisible] = (0, $6nfFC$useState)(() => state.current.isFocused && state.current.isFocusVisible);\n  let updateState = (0, $6nfFC$useCallback)(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n  let onFocusChange = (0, $6nfFC$useCallback)(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n  (0, $6nfFC$useFocusVisibleListener)(isFocusVisible => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {\n    isTextInput: isTextInput\n  });\n  let {\n    focusProps: focusProps\n  } = (0, $6nfFC$useFocus)({\n    isDisabled: within,\n    onFocusChange: onFocusChange\n  });\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $6nfFC$useFocusWithin)({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n  return {\n    isFocused: isFocused,\n    isFocusVisible: state.current.isFocused && isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n\nfunction $907718708eab68af$export$1a38b4ad7f578e1d(props) {\n  let {\n    children: children,\n    focusClass: focusClass,\n    focusRingClass: focusRingClass\n  } = props;\n  let {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $f7dceffc5ad7768b$export$4e328f61c538687f)(props);\n  let child = (0, $6nfFC$react).Children.only(children);\n  return /*#__PURE__*/(0, $6nfFC$react).cloneElement(child, (0, $6nfFC$mergeProps)(child.props, { ...focusProps,\n    className: (0, $6nfFC$clsx)({\n      [focusClass || \"\"]: isFocused,\n      [focusRingClass || \"\"]: isFocusVisible\n    })\n  }));\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nlet $e6afbd83fe6ebbd2$var$FocusableContext = /*#__PURE__*/(0, $6nfFC$react).createContext(null);\n\nfunction $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {\n  let context = (0, $6nfFC$useContext)($e6afbd83fe6ebbd2$var$FocusableContext) || {};\n  (0, $6nfFC$useSyncRef)(context, ref); // eslint-disable-next-line\n\n  let {\n    ref: _,\n    ...otherProps\n  } = context;\n  return otherProps;\n}\n/**\n * Provides DOM props to the nearest focusable child.\n */\n\n\nfunction $e6afbd83fe6ebbd2$var$FocusableProvider(props, ref) {\n  let {\n    children: children,\n    ...otherProps\n  } = props;\n  let context = { ...otherProps,\n    ref: ref\n  };\n  return /*#__PURE__*/(0, $6nfFC$react).createElement($e6afbd83fe6ebbd2$var$FocusableContext.Provider, {\n    value: context\n  }, children);\n}\n\nlet $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 = /*#__PURE__*/(0, $6nfFC$react).forwardRef($e6afbd83fe6ebbd2$var$FocusableProvider);\n\nfunction $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {\n  let {\n    focusProps: focusProps\n  } = (0, $6nfFC$useFocus)(props);\n  let {\n    keyboardProps: keyboardProps\n  } = (0, $6nfFC$useKeyboard)(props);\n  let interactions = (0, $6nfFC$mergeProps)(focusProps, keyboardProps);\n  let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = (0, $6nfFC$useRef)(props.autoFocus);\n  (0, $6nfFC$useEffect)(() => {\n    if (autoFocusRef.current && domRef.current) (0, $6a99195332edec8b$export$80f3e147d781571c)(domRef.current);\n    autoFocusRef.current = false;\n  }, [domRef]);\n  return {\n    focusableProps: (0, $6nfFC$mergeProps)({ ...interactions,\n      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n    }, interactionProps)\n  };\n}\n\nexport { $9bf71ea28793e738$export$20e40289641fbbb6 as FocusScope, $9bf71ea28793e738$export$10c5169755ce7bd7 as useFocusManager, $9bf71ea28793e738$export$2d6ec8fc375ceafa as getFocusableTreeWalker, $9bf71ea28793e738$export$c5251b9e124bf29 as createFocusManager, $9bf71ea28793e738$export$1258395f99bf9cbf as isElementInChildOfActiveScope, $907718708eab68af$export$1a38b4ad7f578e1d as FocusRing, $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 as FocusableProvider, $e6afbd83fe6ebbd2$export$4c014de7c8940b4c as useFocusable, $f7dceffc5ad7768b$export$4e328f61c538687f as useFocusRing, $6a99195332edec8b$export$80f3e147d781571c as focusSafely };","map":{"version":3,"sources":["packages/@react-aria/focus/src/index.ts","packages/@react-aria/focus/src/FocusScope.tsx","packages/@react-aria/focus/src/focusSafely.ts","packages/@react-aria/focus/src/isElementVisible.ts","packages/@react-aria/focus/src/FocusRing.tsx","packages/@react-aria/focus/src/useFocusRing.ts","packages/@react-aria/focus/src/useFocusable.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {FocusScope, useFocusManager, getFocusableTreeWalker, createFocusManager, isElementInChildOfActiveScope} from './FocusScope';\nexport {FocusRing} from './FocusRing';\nexport {FocusableProvider, useFocusable} from './useFocusable';\nexport {useFocusRing} from './useFocusRing';\nexport {focusSafely} from './focusSafely';\n\nexport type {FocusScopeProps, FocusManager, FocusManagerOptions} from './FocusScope';\nexport type {FocusRingProps} from './FocusRing';\nexport type {FocusableAria, FocusableOptions, FocusableProviderProps} from './useFocusable';\nexport type {AriaFocusRingProps, FocusRingAria} from './useFocusRing';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusSafely} from './focusSafely';\nimport {isElementVisible} from './isElementVisible';\nimport React, {ReactNode, RefObject, useContext, useEffect, useMemo, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n\nexport interface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\nexport interface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: Element,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean,\n  /** A callback that determines whether the given element is focused. */\n  accept?: (node: Element) => boolean\n}\n\nexport interface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): FocusableElement,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): FocusableElement,\n  /** Moves focus to the first focusable or tabbable element in the focus scope. */\n  focusFirst(opts?: FocusManagerOptions): FocusableElement,\n    /** Moves focus to the last focusable or tabbable element in the focus scope. */\n  focusLast(opts?: FocusManagerOptions): FocusableElement\n}\n\ntype ScopeRef = RefObject<Element[]>;\ninterface IFocusContext {\n  scopeRef: ScopeRef,\n  focusManager: FocusManager\n}\n\nconst FocusContext = React.createContext<IFocusContext>(null);\n\nlet activeScope: ScopeRef = null;\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps) {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>();\n  let endRef = useRef<HTMLSpanElement>();\n  let scopeRef = useRef<Element[]>([]);\n  let ctx = useContext(FocusContext);\n\n  // The parent scope is based on the JSX tree, using context.\n  // However, if a new scope mounts outside the active scope (e.g. DialogContainer launched from a menu),\n  // we want the parent scope to be the active scope instead.\n  let ctxParent = ctx?.scopeRef ?? null;\n  let parentScope = useMemo(() => activeScope && focusScopeTree.getTreeNode(activeScope) && !isAncestorScope(activeScope, ctxParent) ? activeScope : ctxParent, [ctxParent]);\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n  }, [children, parentScope]);\n\n  // add to the focus scope tree in render order because useEffects/useLayoutEffects run children first whereas render runs parent first\n  // which matters when constructing a tree\n  if (focusScopeTree.getTreeNode(parentScope) && !focusScopeTree.getTreeNode(scopeRef)) {\n    focusScopeTree.addTreeNode(scopeRef, parentScope);\n  }\n\n  let node = focusScopeTree.getTreeNode(scopeRef);\n  node.contain = contain;\n\n  useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  // this layout effect needs to run last so that focusScopeTree cleanup happens at the last moment possible\n  useLayoutEffect(() => {\n    if (scopeRef) {\n      return () => {\n        // Scope may have been re-parented.\n        let parentScope = focusScopeTree.getTreeNode(scopeRef).parent.scopeRef;\n\n        // Restore the active scope on unmount if this scope or a descendant scope is active.\n        // Parent effect cleanups run before children, so we need to check if the\n        // parent scope actually still exists before restoring the active scope to it.\n        if (\n          (scopeRef === activeScope || isAncestorScope(scopeRef, activeScope)) &&\n          (!parentScope || focusScopeTree.getTreeNode(parentScope))\n        ) {\n          activeScope = parentScope;\n        }\n        focusScopeTree.removeTreeNode(scopeRef);\n      };\n    }\n  }, [scopeRef, parentScope]);\n\n  let focusManager = createFocusManagerForScope(scopeRef);\n\n  return (\n    <FocusContext.Provider value={{scopeRef, focusManager}}>\n      <span data-focus-scope-start hidden ref={startRef} />\n      {children}\n      <span data-focus-scope-end hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager {\n  return useContext(FocusContext)?.focusManager;\n}\n\nfunction createFocusManagerForScope(scopeRef: React.RefObject<Element[]>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode() as FocusableElement;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable, accept} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable, accept} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nconst focusableElements = [\n  'input:not([disabled]):not([type=hidden])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'a[href]',\n  'area[href]',\n  'summary',\n  'iframe',\n  'object',\n  'embed',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]'\n];\n\nconst FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n\nfocusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst TABBABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction getScopeRoot(scope: Element[]) {\n  return scope[0].parentElement;\n}\n\nfunction shouldContainFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<Element[]>, contain: boolean) {\n  let focusedNode = useRef<FocusableElement>();\n\n  let raf = useRef(null);\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = null;\n      }\n      return;\n    }\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef)) {\n        return;\n      }\n\n      let focusedElement = document.activeElement;\n      let scope = scopeRef.current;\n      if (!isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: true}, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode())  as FocusableElement;\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = (e) => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) && isElementInScope(e.target, scopeRef.current)) {\n        activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if (shouldContainFocus(scopeRef) && !isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else if (shouldContainFocus(scopeRef)) {\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (shouldContainFocus(scopeRef) && !isElementInChildScope(document.activeElement, scopeRef)) {\n          activeScope = scopeRef;\n          if (document.body.contains(e.target)) {\n            focusedNode.current = e.target;\n            focusedNode.current.focus();\n          } else if (activeScope) {\n            focusFirstInScope(activeScope.current);\n          }\n        }\n      });\n    };\n\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element) {\n  return isElementInChildScope(element);\n}\n\nfunction isElementInScope(element: Element, scope: Element[]) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction isElementInChildScope(element: Element, scope: ScopeRef = null) {\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {scopeRef: s} of focusScopeTree.traverse(focusScopeTree.getTreeNode(scope))) {\n    if (isElementInScope(element, s.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/** @private */\nexport function isElementInChildOfActiveScope(element: Element) {\n  return isElementInChildScope(element, activeScope);\n}\n\nfunction isAncestorScope(ancestor: ScopeRef, scope: ScopeRef) {\n  let parent = focusScopeTree.getTreeNode(scope)?.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) {\n      return true;\n    }\n    parent = parent.parent;\n  }\n  return false;\n}\n\nfunction focusElement(element: FocusableElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n\nfunction focusFirstInScope(scope: Element[], tabbable:boolean = true) {\n  let sentinel = scope[0].previousElementSibling;\n  let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable}, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: false}, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  focusElement(nextNode as FocusableElement);\n}\n\nfunction useAutoFocus(scopeRef: RefObject<Element[]>, autoFocus: boolean) {\n  const autoFocusRef = React.useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      activeScope = scopeRef;\n      if (!isElementInScope(document.activeElement, activeScope.current)) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction useActiveScopeTracker(scopeRef: RefObject<Element[]>, restore: boolean, contain: boolean) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  useLayoutEffect(() => {\n    if (restore || contain) {\n      return;\n    }\n\n    let scope = scopeRef.current;\n\n    let onFocus = (e: FocusEvent) => {\n      let target = e.target as Element;\n      if (isElementInScope(target, scopeRef.current)) {\n        activeScope = scopeRef;\n      } else if (!isElementInAnyScope(target)) {\n        activeScope = null;\n      }\n    };\n\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\n\nfunction shouldRestoreFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return scope?.scopeRef === scopeRef;\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<Element[]>, restoreFocus: boolean, contain: boolean) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  const nodeToRestoreRef = useRef(typeof document !== 'undefined' ? document.activeElement as FocusableElement : null);\n\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!restoreFocus || contain) {\n      return;\n    }\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!activeScope || isAncestorScope(activeScope, scopeRef)) {\n        activeScope = scopeRef;\n      }\n    };\n\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    if (!restoreFocus) {\n      return;\n    }\n\n    focusScopeTree.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement as FocusableElement;\n      if (!isElementInScope(focusedElement, scopeRef.current)) {\n        return;\n      }\n      let nodeToRestore = focusScopeTree.getTreeNode(scopeRef).nodeToRestore;\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(document.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n        focusScopeTree.getTreeNode(scopeRef).nodeToRestore = null;\n      }\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n        } while (isElementInScope(nextElement, scopeRef.current));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          focusElement(nextElement, true);\n        } else {\n           // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n           // then move focus to the body.\n           // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!isElementInAnyScope(nodeToRestore)) {\n            focusedElement.blur();\n          } else {\n            focusElement(nodeToRestore, true);\n          }\n        }\n      }\n    };\n\n    if (!contain) {\n      document.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        document.removeEventListener('keydown', onKeyDown, true);\n      }\n      let nodeToRestore = focusScopeTree.getTreeNode(scopeRef).nodeToRestore;\n\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      if (\n        restoreFocus\n        && nodeToRestore\n        && (\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          isElementInScope(document.activeElement, scopeRef.current)\n          || (document.activeElement === document.body && shouldRestoreFocus(scopeRef))\n        )\n      ) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = focusScopeTree.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (document.activeElement === document.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {\n                focusElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && focusScopeTree.getTreeNode(treeNode.scopeRef)) {\n                focusFirstInScope(treeNode.scopeRef.current, true);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: Element, opts?: FocusManagerOptions, scope?: Element[]) {\n  let selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(\n    root,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if ((node as Element).matches(selector)\n          && isElementVisible(node as Element)\n          && (!scope || isElementInScope(node as Element, scope))\n          && (!opts?.accept || opts.accept(node as Element))\n        ) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    }\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\nexport function createFocusManager(ref: RefObject<Element>, defaultOptions: FocusManagerOptions = {}): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      }\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      } else {\n        let next = last(walker);\n        if (next) {\n          focusElement(next, true);\n        }\n        return next;\n      }\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = last(walker);\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let next = last(walker);\n      if (next) {\n        focusElement(next, true);\n      }\n      return next;\n    }\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: FocusableElement;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n\n\nclass Tree {\n  private root: TreeNode;\n  private fastMap = new Map<ScopeRef, TreeNode>();\n\n  constructor() {\n    this.root = new TreeNode({scopeRef: null});\n    this.fastMap.set(null, this.root);\n  }\n\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data: ScopeRef) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef: ScopeRef, parent: ScopeRef, nodeToRestore?: FocusableElement) {\n    let parentNode = this.fastMap.get(parent ?? null);\n    let node = new TreeNode({scopeRef});\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) {\n      node.nodeToRestore = nodeToRestore;\n    }\n  }\n\n  removeTreeNode(scopeRef: ScopeRef) {\n    // never remove the root\n    if (scopeRef === null) {\n      return;\n    }\n    let node = this.fastMap.get(scopeRef);\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) {\n      if (\n        current !== node &&\n        node.nodeToRestore &&\n        current.nodeToRestore &&\n        node.scopeRef.current &&\n        isElementInScope(current.nodeToRestore, node.scopeRef.current)\n      ) {\n        current.nodeToRestore = node.nodeToRestore;\n      }\n    }\n    let children = node.children;\n    parentNode.removeChild(node);\n    if (children.length > 0) {\n      children.forEach(child => parentNode.addChild(child));\n    }\n    this.fastMap.delete(node.scopeRef);\n  }\n\n  // Pre Order Depth First\n  *traverse(node: TreeNode = this.root): Generator<TreeNode> {\n    if (node.scopeRef != null) {\n      yield node;\n    }\n    if (node.children.length > 0) {\n      for (let child of node.children) {\n        yield* this.traverse(child);\n      }\n    }\n  }\n\n  clone(): Tree {\n    let newTree = new Tree();\n    for (let node of this.traverse()) {\n      newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);\n    }\n    return newTree;\n  }\n}\n\nclass TreeNode {\n  public scopeRef: ScopeRef;\n  public nodeToRestore: FocusableElement;\n  public parent: TreeNode;\n  public children: TreeNode[] = [];\n  public contain = false;\n\n  constructor(props: {scopeRef: ScopeRef}) {\n    this.scopeRef = props.scopeRef;\n  }\n  addChild(node: TreeNode) {\n    this.children.push(node);\n    node.parent = this;\n  }\n  removeChild(node: TreeNode) {\n    this.children.splice(this.children.indexOf(node), 1);\n    node.parent = undefined;\n  }\n}\n\nexport let focusScopeTree = new Tree();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusWithoutScrolling, runAfterTransition} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\n\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\nexport function focusSafely(element: FocusableElement) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if (getInteractionModality() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) {\n        focusWithoutScrolling(element);\n      }\n    });\n  } else {\n    focusWithoutScrolling(element);\n  }\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction isStyleVisible(element: Element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {\n    return false;\n  }\n\n  let {display, visibility} = element.style;\n\n  let isVisible = (\n    display !== 'none' &&\n    visibility !== 'hidden' &&\n    visibility !== 'collapse'\n  );\n\n  if (isVisible) {\n    const {getComputedStyle} = element.ownerDocument.defaultView;\n    let {display: computedDisplay, visibility: computedVisibility} = getComputedStyle(element);\n\n    isVisible = (\n      computedDisplay !== 'none' &&\n      computedVisibility !== 'hidden' &&\n      computedVisibility !== 'collapse'\n    );\n  }\n\n  return isVisible;\n}\n\nfunction isAttributeVisible(element: Element, childElement?: Element) {\n  return (\n    !element.hasAttribute('hidden') &&\n    (element.nodeName === 'DETAILS' &&\n      childElement &&\n      childElement.nodeName !== 'SUMMARY'\n      ? element.hasAttribute('open')\n      : true)\n  );\n}\n\n/**\n * Adapted from https://github.com/testing-library/jest-dom and \n * https://github.com/vuejs/vue-test-utils-next/.\n * Licensed under the MIT License.\n * @param element - Element to evaluate for display or visibility.\n */  \nexport function isElementVisible(element: Element, childElement?: Element) {\n  return (\n    element.nodeName !== '#comment' &&\n    isStyleVisible(element) &&\n    isAttributeVisible(element, childElement) &&\n    (!element.parentElement || isElementVisible(element.parentElement, element))\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport clsx from 'clsx';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ReactElement} from 'react';\nimport {useFocusRing} from './useFocusRing';\n\nexport interface FocusRingProps {\n  /** Child element to apply CSS classes to. */\n  children: ReactElement,\n  /** CSS class to apply when the element is focused. */\n  focusClass?: string,\n  /** CSS class to apply when the element has keyboard focus. */\n  focusRingClass?: string,\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default false\n   */\n  within?: boolean,\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\n/**\n * A utility component that applies a CSS class when an element has keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function FocusRing(props: FocusRingProps) {\n  let {children, focusClass, focusRingClass} = props;\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing(props);\n  let child = React.Children.only(children);\n\n  return React.cloneElement(child, mergeProps(child.props, {\n    ...focusProps,\n    className: clsx({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  }));\n}\n","import {DOMAttributes} from '@react-types/shared';\nimport {isFocusVisible, useFocus, useFocusVisibleListener, useFocusWithin} from '@react-aria/interactions';\nimport {useCallback, useState} from 'react';\nimport {useRef} from 'react';\n\nexport interface AriaFocusRingProps {\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default 'false'\n   */\n  within?: boolean,\n\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusRingAria {\n  /** Whether the element is currently focused. */\n  isFocused: boolean,\n\n  /** Whether keyboard focus should be visible. */\n  isFocusVisible: boolean,\n\n  /** Props to apply to the container element with the focus ring. */\n  focusProps: DOMAttributes\n}\n\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function useFocusRing(props: AriaFocusRingProps = {}): FocusRingAria {\n  let {\n    autoFocus = false,\n    isTextInput,\n    within\n  } = props;\n  let state = useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || isFocusVisible()\n  });\n  let [isFocused, setFocused] = useState(false);\n  let [isFocusVisibleState, setFocusVisible] = useState(() => state.current.isFocused && state.current.isFocusVisible);\n\n  let updateState = useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n\n  let onFocusChange = useCallback(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n\n  useFocusVisibleListener((isFocusVisible) => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {isTextInput});\n\n  let {focusProps} = useFocus({\n    isDisabled: within,\n    onFocusChange\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n\n  return {\n    isFocused,\n    isFocusVisible: state.current.isFocused && isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableDOMProps, FocusableElement, FocusableProps} from '@react-types/shared';\nimport {focusSafely} from './';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport React, {MutableRefObject, ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useFocus, useKeyboard} from '@react-aria/interactions';\n\nexport interface FocusableOptions extends FocusableProps, FocusableDOMProps {\n  /** Whether focus should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusableProviderProps extends DOMAttributes {\n  /** The child element to provide DOM props to. */\n  children?: ReactNode\n}\n\ninterface FocusableContextValue extends FocusableProviderProps {\n  ref?: MutableRefObject<FocusableElement>\n}\n\nlet FocusableContext = React.createContext<FocusableContextValue>(null);\n\nfunction useFocusableContext(ref: RefObject<FocusableElement>): FocusableContextValue {\n  let context = useContext(FocusableContext) || {};\n  useSyncRef(context, ref);\n\n  // eslint-disable-next-line\n  let {ref: _, ...otherProps} = context;\n  return otherProps;\n}\n\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction FocusableProvider(props: FocusableProviderProps, ref: RefObject<FocusableElement>) {\n  let {children, ...otherProps} = props;\n  let context = {\n    ...otherProps,\n    ref\n  };\n\n  return (\n    <FocusableContext.Provider value={context}>\n      {children}\n    </FocusableContext.Provider>\n  );\n}\n\nlet _FocusableProvider = React.forwardRef(FocusableProvider);\nexport {_FocusableProvider as FocusableProvider};\n\nexport interface FocusableAria {\n  /** Props for the focusable element. */\n  focusableProps: DOMAttributes\n}\n\n/**\n * Used to make an element focusable and capable of auto focus.\n */\nexport function useFocusable(props: FocusableOptions, domRef: RefObject<FocusableElement>): FocusableAria {\n  let {focusProps} = useFocus(props);\n  let {keyboardProps} = useKeyboard(props);\n  let interactions = mergeProps(focusProps, keyboardProps);\n  let domProps = useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = useRef(props.autoFocus);\n\n  useEffect(() => {\n    if (autoFocusRef.current && domRef.current) {\n      focusSafely(domRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [domRef]);\n\n  return {\n    focusableProps: mergeProps(\n      {\n        ...interactions,\n        tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n      },\n      interactionProps\n    )\n  };\n}\n"]},"metadata":{},"sourceType":"module"}