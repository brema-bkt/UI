{"ast":null,"code":"import $1DoQa$intlmessageformat from \"intl-messageformat\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n\nclass $d6fd23bc337660df$export$64839e615120df17 {\n  getStringForLocale(key, locale) {\n    let strings = this.messages[locale];\n\n    if (!strings) {\n      strings = $d6fd23bc337660df$var$getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    return string;\n  }\n\n  constructor(messages, defaultLocale = \"en-US\") {\n    // Clone messages so we don't modify the original object.\n    this.messages = { ...messages\n    };\n    this.defaultLocale = defaultLocale;\n  }\n\n}\n\nfunction $d6fd23bc337660df$var$getStringsForLocale(locale, strings, defaultLocale = \"en-US\") {\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale]; // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n\n  let language = $d6fd23bc337660df$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n\n  for (let key in strings) {\n    if (key.startsWith(language + \"-\")) return strings[key];\n  } // Nothing close, use english.\n\n\n  return strings[defaultLocale];\n}\n\nfunction $d6fd23bc337660df$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale) // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split(\"-\")[0];\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nclass $972eb555d604f491$export$526ebc05ff964723 {\n  format(key, variables) {\n    let message = this.cache[key];\n\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      message = new (0, $1DoQa$intlmessageformat)(msg, this.locale);\n      this.cache[key] = message;\n    }\n\n    let varCopy;\n    if (variables) varCopy = Object.keys(variables).reduce((acc, key) => {\n      acc[key] = variables[key] == null ? false : variables[key];\n      return acc;\n    }, {});\n    return message.format(varCopy);\n  }\n\n  constructor(locale, messages) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n}\n\nexport { $d6fd23bc337660df$export$64839e615120df17 as MessageDictionary, $972eb555d604f491$export$526ebc05ff964723 as MessageFormatter };","map":{"version":3,"sources":["packages/@internationalized/message/src/index.ts","packages/@internationalized/message/src/MessageDictionary.ts","packages/@internationalized/message/src/MessageFormatter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {LocalizedStrings} from './MessageDictionary';\nexport {MessageDictionary} from './MessageDictionary';\nexport {MessageFormatter} from './MessageFormatter';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type LocalizedStrings = {\n  [lang: string]: {\n    [key: string]: string\n  }\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class MessageDictionary {\n  private messages: LocalizedStrings;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.messages = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  getStringForLocale(key: string, locale: string) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale(locale: string, strings: LocalizedStrings, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FormatXMLElementFn, PrimitiveType} from 'intl-messageformat/src/formatters';\nimport IntlMessageFormat from 'intl-messageformat';\nimport {MessageDictionary} from './MessageDictionary';\n\n/**\n * Formats ICU Message strings to create localized strings from a MessageDictionary.\n */\nexport class MessageFormatter {\n  private locale: string;\n  private messages: MessageDictionary;\n  private cache: {[key: string]: IntlMessageFormat};\n\n  constructor(locale: string, messages: MessageDictionary) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n  format<T = void>(key: string, variables: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined) {\n    let message = this.cache[key];\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) {\n        throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      }\n\n      message = new IntlMessageFormat(msg, this.locale);\n      this.cache[key] = message;\n    }\n    let varCopy: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined;\n    if (variables) {\n      varCopy = Object.keys(variables).reduce((acc, key) => {\n        acc[key] = variables[key] == null ? false : variables[key];\n        return acc;\n      }, {});\n    }\n\n    return message.format(varCopy);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}