{"ast":null,"code":"var _jsxFileName = \"E:\\\\nft-minting-app-main\\\\src\\\\n2dpuller\\\\nftpuller.js\",\n    _s = $RefreshSig$();\n\nimport { ethers } from 'ethers';\nimport { useEffect, useState } from 'react';\nimport React from \"react\";\nimport axios from 'axios';\nimport NFTCollection from './NFTCollection.json';\nimport { Card, Container, Text, Grid, Button, Image } from '@nextui-org/react';\nimport { nftContract, key, displayAmount, mainnet } from './settings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NftPuller() {\n  _s();\n\n  const [nfts, setNfts] = useState([]);\n  const [loadingState, setLoadingState] = useState('not-loaded');\n  useEffect(() => {\n    generateNft();\n  }, [setNfts]);\n\n  async function refreshPage() {\n    window.location.reload();\n  }\n\n  async function generateNft() {\n    const provider = new ethers.providers.JsonRpcProvider(mainnet);\n    const wallet = \"0xb6e2533a1aF7AEa9E4fF6eF64eE522bF6F8CD228\";\n    const contract = new ethers.Contract(nftContract, NFTCollection, wallet);\n    const itemArray = [];\n    contract.totalSupply().then(result => {\n      let totalSup = parseInt(result, 16);\n      /*\r\n      Replace \"displayAmount\" with \"totalSup\"\r\n      below if you want to display all NFTs \r\n      in the collection BUT BE CAREFUL, it will render\r\n      every nft image and possibly freeze your server/browser!!\r\n      */\n\n      for (let i = 0; i < displayAmount; i++) {\n        var token = i + 1;\n        const owner = contract.ownerOf(token);\n        const rawUri = contract.tokenURI(token);\n        const Uri = Promise.resolve(rawUri);\n        const getUri = Uri.then(value => {\n          let str = value;\n          let cleanUri = str.replace('ipfs://', 'https://ipfs.io/ipfs/');\n          let metadata = axios.get(cleanUri).catch(function (error) {\n            console.log(error.toJSON());\n          });\n          return metadata;\n        });\n        getUri.then(value => {\n          let rawImg = value.data.image;\n          var name = value.data.name;\n          var desc = value.data.description;\n          let image = rawImg.replace('ipfs://', 'https://ipfs.io/ipfs/');\n          Promise.resolve(owner).then(value => {\n            let ownerW = value;\n            let meta = {\n              name: name,\n              img: image,\n              tokenId: token,\n              wallet: ownerW,\n              desc\n            };\n            console.log(meta);\n            itemArray.push(meta);\n          });\n        });\n      }\n    });\n    await new Promise(r => setTimeout(r, 5000));\n    setNfts(itemArray);\n    setLoadingState('loaded');\n  }\n\n  if (loadingState === 'loaded' && !nfts.length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: nfts.map((nft, i) => {\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Card.Image, {\n          src: nft.img\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"No Collections Retrieved\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 7\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    md: true,\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      h1: true,\n      css: {\n        marginLeft: '$10'\n      },\n      size: '40px',\n      children: \"NFT Collection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      css: {\n        marginLeft: '$10'\n      },\n      onPress: refreshPage,\n      children: \"Refresh NFTs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid.Container, {\n      gap: 3,\n      children: nfts.map((nft, i) => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              isHoverable: true,\n              css: {\n                mw: \"270px\",\n                marginRight: '$1',\n                boxShadow: '0px 2px 12px #000000'\n              },\n              variant: \"bordered\",\n              children: [/*#__PURE__*/_jsxDEV(Card.Image, {\n                src: nft.img\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n                md: true,\n                css: {\n                  background: \"$gradient\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(Text, {\n                  css: {\n                    color: '$white'\n                  },\n                  h2: true,\n                  children: nft.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Text, {\n                  h3: true,\n                  css: {\n                    color: '$white'\n                  },\n                  children: [\"NFT ID: \", nft.tokenId]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Text, {\n                  css: {\n                    color: '$white'\n                  },\n                  children: nft.desc\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 21\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 7\n  }, this);\n}\n\n_s(NftPuller, \"DL6OJ8B7YCUHYFOUoPi2JI8l+/o=\");\n\n_c = NftPuller;\n\nvar _c;\n\n$RefreshReg$(_c, \"NftPuller\");","map":{"version":3,"sources":["E:/nft-minting-app-main/src/n2dpuller/nftpuller.js"],"names":["ethers","useEffect","useState","React","axios","NFTCollection","Card","Container","Text","Grid","Button","Image","nftContract","key","displayAmount","mainnet","NftPuller","nfts","setNfts","loadingState","setLoadingState","generateNft","refreshPage","window","location","reload","provider","providers","JsonRpcProvider","wallet","contract","Contract","itemArray","totalSupply","then","result","totalSup","parseInt","i","token","owner","ownerOf","rawUri","tokenURI","Uri","Promise","resolve","getUri","value","str","cleanUri","replace","metadata","get","catch","error","console","log","toJSON","rawImg","data","image","name","desc","description","ownerW","meta","img","tokenId","push","r","setTimeout","length","map","nft","marginLeft","mw","marginRight","boxShadow","background","color"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers';\r\nimport { useEffect, useState } from 'react';\r\nimport React from \"react\";\r\nimport axios from 'axios';\r\nimport NFTCollection from './NFTCollection.json';\r\nimport { Card, Container, Text, Grid, Button, Image } from '@nextui-org/react';\r\nimport { nftContract, key, displayAmount, mainnet } from './settings';\r\n\r\n\r\nexport default function NftPuller() {\r\n  const [nfts, setNfts] = useState([])\r\n  const [loadingState, setLoadingState] = useState('not-loaded')\r\n  useEffect(() => {\r\n    generateNft();\r\n    }, [setNfts])\r\n    \r\n    async function refreshPage() {\r\n        window.location.reload();\r\n    }\r\n    async function generateNft() {\r\n      const provider = new ethers.providers.JsonRpcProvider(mainnet)\r\n      const wallet = \"0xb6e2533a1aF7AEa9E4fF6eF64eE522bF6F8CD228\";\r\n      const contract = new ethers.Contract(nftContract, NFTCollection, wallet);\r\n      const itemArray = [];\r\n      contract.totalSupply().then(result => {\r\n        let totalSup = parseInt(result, 16)\r\n  \r\n        /*\r\n        Replace \"displayAmount\" with \"totalSup\"\r\n        below if you want to display all NFTs \r\n        in the collection BUT BE CAREFUL, it will render\r\n        every nft image and possibly freeze your server/browser!!\r\n        */\r\n        for (let i = 0; i < displayAmount; i++) {\r\n\r\n\r\n          var token = i + 1                         \r\n          const owner = contract.ownerOf(token)\r\n          const rawUri = contract.tokenURI(token)\r\n          const Uri = Promise.resolve(rawUri)\r\n          const getUri = Uri.then(value => {\r\n            let str = value\r\n            let cleanUri = str.replace('ipfs://', 'https://ipfs.io/ipfs/')\r\n            let metadata = axios.get(cleanUri).catch(function (error) {\r\n              console.log(error.toJSON());\r\n            });\r\n            return metadata;\r\n          })\r\n          getUri.then(value => {\r\n            let rawImg = value.data.image\r\n            var name = value.data.name\r\n            var desc = value.data.description\r\n            let image = rawImg.replace('ipfs://', 'https://ipfs.io/ipfs/')\r\n            Promise.resolve(owner).then(value => {\r\n              let ownerW = value;\r\n              let meta = {\r\n                name: name,\r\n                img: image,\r\n                tokenId: token,\r\n                wallet: ownerW,\r\n                desc,\r\n              }\r\n              console.log(meta)\r\n              itemArray.push(meta)\r\n            })\r\n          })\r\n        }\r\n      })\r\n      await new Promise(r => setTimeout(r, 5000));\r\n      setNfts(itemArray)\r\n      setLoadingState('loaded');\r\n    }\r\n\r\nif (loadingState === 'loaded' && !nfts.length)\r\n\r\n    return (\r\n      <div >\r\n        {\r\n        nfts.map((nft, i) => {\r\n          <div>\r\n          <Card.Image src={nft.img} key={i}/>\r\n        <h2>No Collections Retrieved</h2>\r\n        </div>\r\n})}\r\n      </div>\r\n    )\r\n    return (\r\n      <Container md>\r\n        <Text h1 css={{marginLeft:'$10'}} size={'40px'}>NFT Collection</Text>\r\n        <Button css={{marginLeft: '$10'}} onPress={refreshPage}>Refresh NFTs</Button>\r\n      <Grid.Container gap={3}>\r\n        {nfts.map((nft, i) => {\r\n            return (\r\n              <Grid >\r\n                <a>\r\n                  <Card isHoverable key={i} css={{ mw: \"270px\", marginRight: '$1', boxShadow:'0px 2px 12px #000000' }} variant=\"bordered\">\r\n                    <Card.Image src={nft.img} />\r\n                    <Card.Body md css={{background:\"$gradient\"}}>\r\n                    <Text css={{color:'$white'}} h2>{nft.name}</Text>\r\n                    <Text h3 css={{color:'$white'}}>NFT ID: {nft.tokenId}</Text>\r\n                    <Text css={{color:'$white'}}>{nft.desc}</Text>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </a>\r\n              </Grid>\r\n            )\r\n          })}\r\n      </Grid.Container>\r\n    </Container>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}