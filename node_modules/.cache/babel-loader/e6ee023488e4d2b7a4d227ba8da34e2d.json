{"ast":null,"code":"import { mergeProps as $cE0pI$mergeProps, filterDOMProps as $cE0pI$filterDOMProps, chain as $cE0pI$chain } from \"@react-aria/utils\";\nimport { useFocusable as $cE0pI$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $cE0pI$usePress } from \"@react-aria/interactions\";\n\nfunction $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {\n  let {\n    elementType = 'button',\n    isDisabled: isDisabled,\n    onPress: onPress,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    preventFocusOnPress: // @ts-ignore - undocumented\n    preventFocusOnPress,\n    allowFocusWhenDisabled: // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href: href,\n    target: target,\n    rel: rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType === 'button') additionalProps = {\n    type: type,\n    disabled: isDisabled\n  };else additionalProps = {\n    role: 'button',\n    tabIndex: isDisabled ? undefined : 0,\n    href: elementType === 'a' && isDisabled ? undefined : href,\n    target: elementType === 'a' ? target : undefined,\n    type: elementType === 'input' ? type : undefined,\n    disabled: elementType === 'input' ? isDisabled : undefined,\n    'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n    rel: elementType === 'a' ? rel : undefined\n  };\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = $cE0pI$usePress({\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    onPress: onPress,\n    isDisabled: isDisabled,\n    preventFocusOnPress: preventFocusOnPress,\n    ref: ref\n  });\n  let {\n    focusableProps: focusableProps\n  } = $cE0pI$useFocusable(props, ref);\n  if (allowFocusWhenDisabled) focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  let buttonProps = $cE0pI$mergeProps(focusableProps, pressProps, $cE0pI$filterDOMProps(props, {\n    labelable: true\n  }));\n  return {\n    isPressed: isPressed,\n    buttonProps: $cE0pI$mergeProps(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      onClick: e => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n\nfunction $55f54f7887471b58$export$51e84d46ca0bc451(props, state, ref) {\n  const {\n    isSelected: isSelected\n  } = state;\n  const {\n    isPressed: isPressed,\n    buttonProps: buttonProps\n  } = $701a24aa0da5b062$export$ea18c227d4417cc3({ ...props,\n    onPress: $cE0pI$chain(state.toggle, props.onPress)\n  }, ref);\n  return {\n    isPressed: isPressed,\n    buttonProps: $cE0pI$mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\n\nexport { $701a24aa0da5b062$export$ea18c227d4417cc3 as useButton, $55f54f7887471b58$export$51e84d46ca0bc451 as useToggleButton };","map":{"version":3,"sources":["packages/@react-aria/button/src/useButton.ts","packages/@react-aria/button/src/useToggleButton.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaButtonProps} from '@react-types/button';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\n\nexport interface ButtonAria<T> {\n  /** Props for the button element. */\n  buttonProps: T,\n  /** Whether the button is currently pressed. */\n  isPressed: boolean\n}\n\n// Order with overrides is important: 'button' should be default\nexport function useButton(props: AriaButtonProps<'button'>, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useButton(props: AriaButtonProps<'a'>, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useButton(props: AriaButtonProps<'div'>, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useButton(props: AriaButtonProps<'input'>, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useButton(props: AriaButtonProps<'span'>, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<Element>): ButtonAria<DOMAttributes>;\n/**\n * Provides the behavior and accessibility implementation for a button component. Handles mouse, keyboard, and touch interactions,\n * focus behavior, and ARIA props for both native button elements and custom element types.\n * @param props - Props to be applied to the button.\n * @param ref - A ref to a DOM element for the button.\n */\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  let {\n    elementType = 'button',\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href,\n    target,\n    rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType === 'button') {\n    additionalProps = {\n      type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: 'button',\n      tabIndex: isDisabled ? undefined : 0,\n      href: elementType === 'a' && isDisabled ? undefined : href,\n      target: elementType === 'a' ? target : undefined,\n      type: elementType === 'input' ? type : undefined,\n      disabled: elementType === 'input' ? isDisabled : undefined,\n      'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n      rel: elementType === 'a' ? rel : undefined\n    };\n  }\n\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n    preventFocusOnPress,\n    ref\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  if (allowFocusWhenDisabled) {\n    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  }\n  let buttonProps = mergeProps(focusableProps, pressProps, filterDOMProps(props, {labelable: true}));\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      onClick: (e) => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaToggleButtonProps} from '@react-types/button';\nimport {ButtonAria, useButton} from './useButton';\nimport {chain} from '@react-aria/utils';\nimport {DOMAttributes} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {ToggleState} from '@react-stately/toggle';\n\nexport function useToggleButton(props: AriaToggleButtonProps<'a'>, state: ToggleState, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'button'>, state: ToggleState, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'div'>, state: ToggleState, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'input'>, state: ToggleState, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'span'>, state: ToggleState, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<Element>): ButtonAria<DOMAttributes>;\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  const {isSelected} = state;\n  const {isPressed, buttonProps} = useButton({\n    ...props,\n    onPress: chain(state.toggle, props.onPress)\n  }, ref);\n\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}