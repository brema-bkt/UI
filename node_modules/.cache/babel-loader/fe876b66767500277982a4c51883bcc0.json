{"ast":null,"code":"import { mergeProps as $4vDl6$mergeProps, filterDOMProps as $4vDl6$filterDOMProps, useId as $4vDl6$useId } from \"@react-aria/utils\";\nimport { useFocusable as $4vDl6$useFocusable, getFocusableTreeWalker as $4vDl6$getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { usePress as $4vDl6$usePress, useFocusWithin as $4vDl6$useFocusWithin } from \"@react-aria/interactions\";\nimport { useField as $4vDl6$useField } from \"@react-aria/label\";\nimport { useLocale as $4vDl6$useLocale } from \"@react-aria/i18n\";\nconst $884aeceb3d67f00f$export$3b7b268d09480394 = new WeakMap();\nconst $884aeceb3d67f00f$export$8e8b214e06dd397d = new WeakMap();\nconst $884aeceb3d67f00f$export$61c8d3f0151e21b2 = new WeakMap();\n\nfunction $0d5c49892c1215da$export$37b0961d2f4751e2(props, state, ref) {\n  let {\n    value: value,\n    children: children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  } = props;\n  const isDisabled = props.isDisabled || state.isDisabled;\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  let checked = state.selectedValue === value;\n\n  let onChange = e => {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n\n  let {\n    pressProps: pressProps\n  } = $4vDl6$usePress({\n    isDisabled: isDisabled\n  });\n  let {\n    focusableProps: focusableProps\n  } = $4vDl6$useFocusable($4vDl6$mergeProps(props, {\n    onFocus: () => state.setLastFocusedValue(value)\n  }), ref);\n  let interactions = $4vDl6$mergeProps(pressProps, focusableProps);\n  let domProps = $4vDl6$filterDOMProps(props, {\n    labelable: true\n  });\n  let tabIndex = state.lastFocusedValue === value || state.lastFocusedValue == null ? 0 : -1;\n  if (isDisabled) tabIndex = undefined;\n  return {\n    inputProps: $4vDl6$mergeProps(domProps, { ...interactions,\n      type: 'radio',\n      name: $884aeceb3d67f00f$export$3b7b268d09480394.get(state),\n      tabIndex: tabIndex,\n      disabled: isDisabled,\n      checked: checked,\n      value: value,\n      onChange: onChange,\n      'aria-describedby': [state.validationState === 'invalid' ? $884aeceb3d67f00f$export$61c8d3f0151e21b2.get(state) : null, $884aeceb3d67f00f$export$8e8b214e06dd397d.get(state)].filter(Boolean).join(' ') || undefined\n    }),\n    isDisabled: isDisabled,\n    isSelected: checked\n  };\n}\n\nfunction $430f30ed08ec25fa$export$62b9571f283ff5c2(props, state) {\n  let {\n    name: name,\n    validationState: validationState,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    isDisabled: isDisabled,\n    orientation = 'vertical'\n  } = props;\n  let {\n    direction: direction\n  } = $4vDl6$useLocale();\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = $4vDl6$useField({ ...props,\n    // Radio group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  $884aeceb3d67f00f$export$8e8b214e06dd397d.set(state, descriptionProps.id);\n  $884aeceb3d67f00f$export$61c8d3f0151e21b2.set(state, errorMessageProps.id);\n  let domProps = $4vDl6$filterDOMProps(props, {\n    labelable: true\n  }); // When the radio group loses focus, reset the focusable radio to null if\n  // there is no selection. This allows tabbing into the group from either\n  // direction to go to the first or last radio.\n\n  let {\n    focusWithinProps: focusWithinProps\n  } = $4vDl6$useFocusWithin({\n    onBlurWithin() {\n      if (!state.selectedValue) state.setLastFocusedValue(null);\n    }\n\n  });\n\n  let onKeyDown = e => {\n    let nextDir;\n\n    switch (e.key) {\n      case 'ArrowRight':\n        if (direction === 'rtl' && orientation !== 'vertical') nextDir = 'prev';else nextDir = 'next';\n        break;\n\n      case 'ArrowLeft':\n        if (direction === 'rtl' && orientation !== 'vertical') nextDir = 'next';else nextDir = 'prev';\n        break;\n\n      case 'ArrowDown':\n        nextDir = 'next';\n        break;\n\n      case 'ArrowUp':\n        nextDir = 'prev';\n        break;\n\n      default:\n        return;\n    }\n\n    e.preventDefault();\n    let walker = $4vDl6$getFocusableTreeWalker(e.currentTarget, {\n      from: e.target\n    });\n    let nextElem;\n\n    if (nextDir === 'next') {\n      nextElem = walker.nextNode();\n\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.firstChild();\n      }\n    } else {\n      nextElem = walker.previousNode();\n\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.lastChild();\n      }\n    }\n\n    if (nextElem) {\n      // Call focus on nextElem so that keyboard navigation scrolls the radio into view\n      nextElem.focus();\n      state.setSelectedValue(nextElem.value);\n    }\n  };\n\n  let groupName = $4vDl6$useId(name);\n  $884aeceb3d67f00f$export$3b7b268d09480394.set(state, groupName);\n  return {\n    radioGroupProps: $4vDl6$mergeProps(domProps, {\n      // https://www.w3.org/TR/wai-aria-1.2/#radiogroup\n      role: 'radiogroup',\n      onKeyDown: onKeyDown,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      'aria-disabled': isDisabled || undefined,\n      'aria-orientation': orientation,\n      ...fieldProps,\n      ...focusWithinProps\n    }),\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  };\n}\n\nexport { $0d5c49892c1215da$export$37b0961d2f4751e2 as useRadio, $430f30ed08ec25fa$export$62b9571f283ff5c2 as useRadioGroup };","map":{"version":3,"sources":["packages/@react-aria/radio/src/useRadio.ts","packages/@react-aria/radio/src/utils.ts","packages/@react-aria/radio/src/useRadioGroup.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioProps} from '@react-types/radio';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject} from 'react';\nimport {radioGroupDescriptionIds, radioGroupErrorMessageIds, radioGroupNames} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface RadioAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Whether the radio is disabled. */\n  isDisabled: boolean,\n  /** Whether the radio is currently selected. */\n  isSelected: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an individual\n * radio button in a radio group.\n * @param props - Props for the radio.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n * @param ref - Ref to the HTML input element.\n */\nexport function useRadio(props: AriaRadioProps, state: RadioGroupState, ref: RefObject<HTMLInputElement>): RadioAria {\n  let {\n    value,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  } = props;\n\n  const isDisabled = props.isDisabled || state.isDisabled;\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  let checked = state.selectedValue === value;\n\n  let onChange = (e) => {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n\n  let {pressProps} = usePress({\n    isDisabled\n  });\n\n  let {focusableProps} = useFocusable(mergeProps(props, {\n    onFocus: () => state.setLastFocusedValue(value)\n  }), ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n  let tabIndex = state.lastFocusedValue === value || state.lastFocusedValue == null ? 0 : -1;\n  if (isDisabled) {\n    tabIndex = undefined;\n  }\n\n  return {\n    inputProps: mergeProps(domProps, {\n      ...interactions,\n      type: 'radio',\n      name: radioGroupNames.get(state),\n      tabIndex,\n      disabled: isDisabled,\n      checked,\n      value,\n      onChange,\n      'aria-describedby': [\n        state.validationState === 'invalid' ? radioGroupErrorMessageIds.get(state) : null,\n        radioGroupDescriptionIds.get(state)\n      ].filter(Boolean).join(' ') || undefined\n    }),\n    isDisabled,\n    isSelected: checked\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupState} from '@react-stately/radio';\n\nexport const radioGroupNames = new WeakMap<RadioGroupState, string>();\nexport const radioGroupDescriptionIds = new WeakMap<RadioGroupState, string>();\nexport const radioGroupErrorMessageIds = new WeakMap<RadioGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioGroupProps} from '@react-types/radio';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {getFocusableTreeWalker} from '@react-aria/focus';\nimport {radioGroupDescriptionIds, radioGroupErrorMessageIds, radioGroupNames} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {useField} from '@react-aria/label';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLocale} from '@react-aria/i18n';\n\nexport interface RadioGroupAria {\n  /** Props for the radio group wrapper element. */\n  radioGroupProps: DOMAttributes,\n  /** Props for the radio group's visible label (if any). */\n  labelProps: DOMAttributes,\n  /** Props for the radio group description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the radio group error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a radio group component.\n * Radio groups allow users to select a single item from a list of mutually exclusive options.\n * @param props - Props for the radio group.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n */\nexport function useRadioGroup(props: AriaRadioGroupProps, state: RadioGroupState): RadioGroupAria {\n  let {\n    name,\n    validationState,\n    isReadOnly,\n    isRequired,\n    isDisabled,\n    orientation = 'vertical'\n  } = props;\n  let {direction} = useLocale();\n\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    // Radio group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  radioGroupDescriptionIds.set(state, descriptionProps.id);\n  radioGroupErrorMessageIds.set(state, errorMessageProps.id);\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // When the radio group loses focus, reset the focusable radio to null if\n  // there is no selection. This allows tabbing into the group from either\n  // direction to go to the first or last radio.\n  let {focusWithinProps} = useFocusWithin({\n    onBlurWithin() {\n      if (!state.selectedValue) {\n        state.setLastFocusedValue(null);\n      }\n    }\n  });\n\n  let onKeyDown = (e) => {\n    let nextDir;\n    switch (e.key) {\n      case 'ArrowRight':\n        if (direction === 'rtl' && orientation !== 'vertical') {\n          nextDir = 'prev';\n        } else {\n          nextDir = 'next';\n        }\n        break;\n      case 'ArrowLeft':\n        if (direction === 'rtl' && orientation !== 'vertical') {\n          nextDir = 'next';\n        } else {\n          nextDir = 'prev';\n        }\n        break;\n      case 'ArrowDown':\n        nextDir = 'next';\n        break;\n      case 'ArrowUp':\n        nextDir = 'prev';\n        break;\n      default:\n        return;\n    }\n    e.preventDefault();\n    let walker = getFocusableTreeWalker(e.currentTarget, {from: e.target});\n    let nextElem;\n    if (nextDir === 'next') {\n      nextElem = walker.nextNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.firstChild();\n      }\n    } else {\n      nextElem = walker.previousNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.lastChild();\n      }\n    }\n    if (nextElem) {\n      // Call focus on nextElem so that keyboard navigation scrolls the radio into view\n      nextElem.focus();\n      state.setSelectedValue(nextElem.value);\n    }\n  };\n\n  let groupName = useId(name);\n  radioGroupNames.set(state, groupName);\n\n  return {\n    radioGroupProps: mergeProps(domProps, {\n      // https://www.w3.org/TR/wai-aria-1.2/#radiogroup\n      role: 'radiogroup',\n      onKeyDown,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      'aria-disabled': isDisabled || undefined,\n      'aria-orientation': orientation,\n      ...fieldProps,\n      ...focusWithinProps\n    }),\n    labelProps,\n    descriptionProps,\n    errorMessageProps\n  };\n}\n"]},"metadata":{},"sourceType":"module"}