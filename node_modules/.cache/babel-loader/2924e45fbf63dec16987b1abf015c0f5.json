{"ast":null,"code":"import { mergeProps as $bx7SL$mergeProps, useSyncRef as $bx7SL$useSyncRef, useGlobalListeners as $bx7SL$useGlobalListeners, isVirtualClick as $bx7SL$isVirtualClick, focusWithoutScrolling as $bx7SL$focusWithoutScrolling, isVirtualPointerEvent as $bx7SL$isVirtualPointerEvent, isIOS as $bx7SL$isIOS, runAfterTransition as $bx7SL$runAfterTransition, useLayoutEffect as $bx7SL$useLayoutEffect, isMac as $bx7SL$isMac, useEvent as $bx7SL$useEvent, useDescription as $bx7SL$useDescription } from \"@react-aria/utils\";\nimport $bx7SL$react, { useRef as $bx7SL$useRef, useContext as $bx7SL$useContext, useState as $bx7SL$useState, useMemo as $bx7SL$useMemo, useEffect as $bx7SL$useEffect, useCallback as $bx7SL$useCallback } from \"react\"; // Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\n\nlet $14c0b72509d70225$var$state = 'default';\nlet $14c0b72509d70225$var$savedUserSelect = '';\nlet $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\n\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n  if ($bx7SL$isIOS()) {\n    if ($14c0b72509d70225$var$state === 'default') {\n      $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    $14c0b72509d70225$var$state = 'disabled';\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n  if ($bx7SL$isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if ($14c0b72509d70225$var$state !== 'disabled') return;\n    $14c0b72509d70225$var$state = 'restoring'; // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      $bx7SL$runAfterTransition(() => {\n        // Avoid race conditions\n        if ($14c0b72509d70225$var$state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || '';\n          $14c0b72509d70225$var$savedUserSelect = '';\n          $14c0b72509d70225$var$state = 'default';\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    {\n      if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n        let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n        if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;\n        if (target.getAttribute('style') === '') target.removeAttribute('style');\n        $14c0b72509d70225$var$modifiedElementMap.delete(target);\n      }\n    }\n}\n\nconst $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = $bx7SL$react.createContext(null);\n$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = 'PressResponderContext';\n\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  // Consume context from <PressResponder> and merge with props.\n  let context = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n\n  if (context) {\n    let {\n      register: register,\n      ...contextProps\n    } = context;\n    props = $bx7SL$mergeProps(contextProps, props);\n    register();\n  }\n\n  $bx7SL$useSyncRef(context, props.ref);\n  return props;\n}\n\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  let {\n    onPress: onPress1,\n    onPressChange: onPressChange1,\n    onPressStart: onPressStart1,\n    onPressEnd: onPressEnd1,\n    onPressUp: onPressUp1,\n    isDisabled: isDisabled1,\n    isPressed: isPressedProp,\n    preventFocusOnPress: preventFocusOnPress,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit,\n    allowTextSelectionOnPress: allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _,\n    ...domProps\n  } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n  let propsRef = $bx7SL$useRef(null);\n  propsRef.current = {\n    onPress: onPress1,\n    onPressChange: onPressChange1,\n    onPressStart: onPressStart1,\n    onPressEnd: onPressEnd1,\n    onPressUp: onPressUp1,\n    isDisabled: isDisabled1,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit\n  };\n  let [isPressed, setPressed] = $bx7SL$useState(false);\n  let ref = $bx7SL$useRef({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = $bx7SL$useGlobalListeners();\n  let pressProps1 = $bx7SL$useMemo(() => {\n    let state = ref.current;\n\n    let triggerPressStart = (originalEvent, pointerType) => {\n      let {\n        onPressStart: onPressStart,\n        onPressChange: onPressChange,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled || state.didFirePressStart) return;\n      if (onPressStart) onPressStart({\n        type: 'pressstart',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(true);\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = (originalEvent, pointerType, wasPressed = true) => {\n      let {\n        onPressEnd: onPressEnd,\n        onPressChange: onPressChange,\n        onPress: onPress,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (!state.didFirePressStart) return;\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n      if (onPressEnd) onPressEnd({\n        type: 'pressend',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(false);\n      setPressed(false);\n      if (onPress && wasPressed && !isDisabled) onPress({\n        type: 'press',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let triggerPressUp = (originalEvent, pointerType) => {\n      let {\n        onPressUp: onPressUp,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled) return;\n      if (onPressUp) onPressUp({\n        type: 'pressup',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let cancel = e => {\n      if (state.isPressed) {\n        if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n      }\n    };\n\n    let pressProps = {\n      onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n          e.stopPropagation(); // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard'); // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        } else if (e.key === 'Enter' && $f6c31cce2adf654f$var$isHTMLAnchorLink(e.currentTarget)) // If the target is a link, we won't have handled this above because we want the default\n          // browser behavior to open the link when pressing Enter. But we still need to prevent\n          // default so that elements above do not also handle it (e.g. table row).\n          e.stopPropagation();\n      },\n\n      onKeyUp(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');\n      },\n\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled1) e.preventDefault(); // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || $bx7SL$isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n\n    };\n\n    let onKeyUp = e => {\n      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n        e.stopPropagation();\n        state.isPressed = false;\n        let target = e.target;\n        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners(); // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n\n        if (state.target instanceof HTMLElement && state.target.contains(target) && ($f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link')) state.target.click();\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = e => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n\n        if ($bx7SL$isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        } // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n\n\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        e.stopPropagation();\n\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n          triggerPressStart(e, state.pointerType);\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = e => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return; // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n\n        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n      }; // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n\n\n      let onPointerMove = e => {\n        if (e.pointerId !== state.activePointerId) return;\n\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      let onPointerUp = e => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n        }\n      };\n\n      let onPointerCancel = e => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return; // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = e => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) return;\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = $bx7SL$isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      pressProps.onMouseUp = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);\n      };\n\n      let onMouseUp = e => {\n        // Only handle left clicks\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch'; // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n\n        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      pressProps.onTouchEnd = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel(e);\n      };\n\n      let onScroll = e => {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled1, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]); // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n\n  $bx7SL$useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: $bx7SL$mergeProps(domProps, pressProps1)\n  };\n}\n\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n  const {\n    key: key,\n    code: code\n  } = event;\n  const element = currentTarget;\n  const role = element.getAttribute('role'); // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n\n  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && !(element instanceof HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') && // An element with role='link' should only trigger with Enter key\n  !(role === 'link' && key !== 'Enter');\n}\n\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  const {\n    targetTouches: targetTouches\n  } = event;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\n\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  const changedTouches = event.changedTouches;\n\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n\n  return null;\n}\n\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  let offsetX = point.width / 2 || point.radiusX || 0;\n  let offsetY = point.height / 2 || point.radiusY || 0;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) return false; // check if they cannot overlap on y axis\n\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\n\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.draggable;\n}\n\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n  if (target instanceof HTMLButtonElement) return target.type !== 'submit';\n  return true;\n}\n\nconst $f6c31cce2adf654f$var$nonTextInputTypes = new Set(['checkbox', 'radio', 'range', 'color', 'file', 'image', 'button', 'submit', 'reset']);\n\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio' ? key === ' ' : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\n\nconst $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/$bx7SL$react.forwardRef(({\n  children: children,\n  ...props\n}, ref) => {\n  let newRef = $bx7SL$useRef();\n  ref = ref !== null && ref !== void 0 ? ref : newRef;\n  let {\n    pressProps: pressProps\n  } = $f6c31cce2adf654f$export$45712eceda6fad21({ ...props,\n    ref: ref\n  });\n  let child = $bx7SL$react.Children.only(children);\n  return /*#__PURE__*/$bx7SL$react.cloneElement(child, // @ts-ignore\n  {\n    ref: ref,\n    ...$bx7SL$mergeProps(child.props, pressProps)\n  });\n});\nconst $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/$bx7SL$react.forwardRef(({\n  children: children,\n  ...props\n}, ref) => {\n  let isRegistered = $bx7SL$useRef(false);\n  let prevContext = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n  let context = $bx7SL$mergeProps(prevContext || {}, { ...props,\n    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n\n    register() {\n      isRegistered.current = true;\n      if (prevContext) prevContext.register();\n    }\n\n  });\n  $bx7SL$useSyncRef(prevContext, ref);\n  $bx7SL$useEffect(() => {\n    if (!isRegistered.current) console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n  }, []);\n  return /*#__PURE__*/$bx7SL$react.createElement($ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {\n    value: context\n  }, children);\n});\n\nclass $8a9cb279dc87e130$export$905e7fc544a71f36 {\n  isDefaultPrevented() {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation() {\n    this.nativeEvent.stopPropagation();\n\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped() {\n    return false;\n  }\n\n  persist() {}\n\n  constructor(type, nativeEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target;\n    this.currentTarget = nativeEvent.currentTarget;\n    this.relatedTarget = nativeEvent.relatedTarget;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n}\n\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n  let stateRef = $bx7SL$useRef({\n    isFocused: false,\n    onBlur: onBlur,\n    observer: null\n  });\n  stateRef.current.onBlur = onBlur; // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n\n  $bx7SL$useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []); // This function is called during a React onFocus event.\n\n  return $bx7SL$useCallback(e1 => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {\n      stateRef.current.isFocused = true;\n      let target = e1.target;\n\n      let onBlurHandler = e => {\n        var // For backward compatibility, dispatch a (fake) React synthetic event.\n        _current, ref;\n\n        stateRef.current.isFocused = false;\n        if (target.disabled) (ref = (_current = stateRef.current).onBlur) === null || ref === void 0 ? void 0 : ref.call(_current, new $8a9cb279dc87e130$export$905e7fc544a71f36('blur', e)); // We no longer need the MutationObserver once the target is blurred.\n\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {\n        once: true\n      });\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {\n            bubbles: true\n          }));\n        }\n      });\n      stateRef.current.observer.observe(target, {\n        attributes: true,\n        attributeFilter: ['disabled']\n      });\n    }\n  }, []);\n}\n\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n  let {\n    isDisabled: isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange: onFocusChange\n  } = props;\n  const onBlur = $bx7SL$useCallback(e => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) onBlurProp(e);\n      if (onFocusChange) onFocusChange(false);\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n  const onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n  const onFocus = $bx7SL$useCallback(e => {\n    if (e.target === e.currentTarget) {\n      if (onFocusProp) onFocusProp(e);\n      if (onFocusChange) onFocusChange(true);\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n  return {\n    focusProps: {\n      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null\n    }\n  };\n}\n\nlet $507fabe10e71c6fb$var$currentModality = null;\nlet $507fabe10e71c6fb$var$changeHandlers = new Set();\nlet $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;\nlet $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nlet $507fabe10e71c6fb$var$hasBlurredWindowRecently = false; // Only Tab or Esc keys will make focus visible on text input elements\n\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {\n  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\n\n\nfunction $507fabe10e71c6fb$var$isValidKey(e) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || !$bx7SL$isMac() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e) {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n\n  if ($507fabe10e71c6fb$var$isValidKey(e)) {\n    $507fabe10e71c6fb$var$currentModality = 'keyboard';\n    $507fabe10e71c6fb$var$triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e) {\n  $507fabe10e71c6fb$var$currentModality = 'pointer';\n\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handleClickEvent(e) {\n  if ($bx7SL$isVirtualClick(e)) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$currentModality = 'virtual';\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) return; // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n\n  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n    $507fabe10e71c6fb$var$currentModality = 'virtual';\n    $507fabe10e71c6fb$var$triggerChangeHandlers('virtual', e);\n  }\n\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\n\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\n\n\nfunction $507fabe10e71c6fb$var$setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return; // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n\n  let focus = HTMLElement.prototype.focus;\n\n  HTMLElement.prototype.focus = function () {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener('keyup', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener('click', $507fabe10e71c6fb$var$handleClickEvent, true); // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n\n  window.addEventListener('focus', $507fabe10e71c6fb$var$handleFocusEvent, true);\n  window.addEventListener('blur', $507fabe10e71c6fb$var$handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('pointermove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('pointerup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('mousemove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('mouseup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n  }\n\n  $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') $507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener('DOMContentLoaded', $507fabe10e71c6fb$var$setupGlobalFocusEvents);\n}\n\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n  return $507fabe10e71c6fb$var$currentModality !== 'pointer';\n}\n\nfunction $507fabe10e71c6fb$export$630ff653c5ada6a9() {\n  return $507fabe10e71c6fb$var$currentModality;\n}\n\nfunction $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {\n  $507fabe10e71c6fb$var$currentModality = modality;\n  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);\n}\n\nfunction $507fabe10e71c6fb$export$98e20ec92f614cfe() {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  let [modality, setModality] = $bx7SL$useState($507fabe10e71c6fb$var$currentModality);\n  $bx7SL$useEffect(() => {\n    let handler = () => {\n      setModality($507fabe10e71c6fb$var$currentModality);\n    };\n\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, []);\n  return modality;\n}\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\n\n\nfunction $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\nfunction $507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {}) {\n  let {\n    isTextInput: isTextInput,\n    autoFocus: autoFocus\n  } = props;\n  let [isFocusVisibleState, setFocusVisible] = $bx7SL$useState(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());\n  $507fabe10e71c6fb$export$ec71b4b83ac08ec3($507fabe10e71c6fb$export$b9b3dfddab17db27 => {\n    setFocusVisible($507fabe10e71c6fb$export$b9b3dfddab17db27);\n  }, [isTextInput], {\n    isTextInput: isTextInput\n  });\n  return {\n    isFocusVisible: isFocusVisibleState\n  };\n}\n\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  $bx7SL$useEffect(() => {\n    let handler = (modality, e) => {\n      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n    };\n\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, deps);\n}\n\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n  let {\n    isDisabled: isDisabled,\n    onBlurWithin: onBlurWithin,\n    onFocusWithin: onFocusWithin,\n    onFocusWithinChange: onFocusWithinChange\n  } = props;\n  let state = $bx7SL$useRef({\n    isFocusWithin: false\n  });\n  let onBlur = $bx7SL$useCallback(e => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n      state.current.isFocusWithin = false;\n      if (onBlurWithin) onBlurWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(false);\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n  let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n  let onFocus = $bx7SL$useCallback(e => {\n    if (!state.current.isFocusWithin) {\n      if (onFocusWithin) onFocusWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(true);\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n  if (isDisabled) return {\n    focusWithinProps: {\n      onFocus: null,\n      onBlur: null\n    }\n  };\n  return {\n    focusWithinProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n} // iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\n\n\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\n\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true; // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n\n  setTimeout(() => {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\n\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') return;\n  if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  $6179b936705e76d3$var$hoverCount++;\n  return () => {\n    $6179b936705e76d3$var$hoverCount--;\n    if ($6179b936705e76d3$var$hoverCount > 0) return;\n    if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  };\n}\n\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n  let {\n    onHoverStart: onHoverStart,\n    onHoverChange: onHoverChange,\n    onHoverEnd: onHoverEnd,\n    isDisabled: isDisabled\n  } = props;\n  let [isHovered, setHovered] = $bx7SL$useState(false);\n  let state = $bx7SL$useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n  $bx7SL$useEffect($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n  let {\n    hoverProps: hoverProps1,\n    triggerHoverEnd: triggerHoverEnd1\n  } = $bx7SL$useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n      if (onHoverStart) onHoverStart({\n        type: 'hoverstart',\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(true);\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n      if (pointerType === 'touch' || !state.isHovered) return;\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) onHoverEnd({\n        type: 'hoverend',\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(false);\n      setHovered(false);\n    };\n\n    let hoverProps = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = e => {\n        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = e => {\n        if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');\n      };\n    }\n\n    return {\n      hoverProps: hoverProps,\n      triggerHoverEnd: triggerHoverEnd\n    };\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n  $bx7SL$useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) triggerHoverEnd1({\n      currentTarget: state.target\n    }, state.pointerType);\n  }, [isDisabled]);\n  return {\n    hoverProps: hoverProps1,\n    isHovered: isHovered\n  };\n}\n\nfunction $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {\n  let {\n    ref: ref,\n    onInteractOutside: onInteractOutside,\n    isDisabled: isDisabled,\n    onInteractOutsideStart: onInteractOutsideStart\n  } = props;\n  let stateRef = $bx7SL$useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside: onInteractOutside,\n    onInteractOutsideStart: onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n  $bx7SL$useEffect(() => {\n    if (isDisabled) return;\n\n    let onPointerDown = e => {\n      if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);\n        state.isPointerDown = true;\n      }\n    }; // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n\n\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = e => {\n        if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      }; // changing these to capture phase fixed combobox\n\n\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = e => {\n        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      let onTouchEnd = e => {\n        state.ignoreEmulatedMouseEvents = true;\n\n        if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {\n  if (event.button > 0) return false; // if the event target is no longer in the document\n\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n\nfunction $93925083ecbb358c$export$48d1ea6320830260(handler) {\n  if (!handler) return;\n  let shouldStopPropagation = true;\n  return e => {\n    let event = { ...e,\n\n      preventDefault() {\n        e.preventDefault();\n      },\n\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n\n    };\n    handler(event);\n    if (shouldStopPropagation) e.stopPropagation();\n  };\n}\n\nfunction $46d819fcbaf35654$export$8f71654801c2f7cd(props) {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),\n      onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)\n    }\n  };\n}\n\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n  let {\n    onMoveStart: onMoveStart,\n    onMove: onMove,\n    onMoveEnd: onMoveEnd\n  } = props;\n  let state = $bx7SL$useRef({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = $bx7SL$useGlobalListeners();\n  let moveProps1 = $bx7SL$useMemo(() => {\n    let moveProps = {};\n\n    let start = () => {\n      $14c0b72509d70225$export$16a4697467175487();\n      state.current.didMove = false;\n    };\n\n    let move = (originalEvent, pointerType, deltaX, deltaY) => {\n      if (deltaX === 0 && deltaY === 0) return;\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n          type: 'movestart',\n          pointerType: pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      onMove({\n        type: 'move',\n        pointerType: pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let end = (originalEvent, pointerType) => {\n      $14c0b72509d70225$export$b0d6fa1ab32e3295();\n      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n        type: 'moveend',\n        pointerType: pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = e => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      let onMouseUp = e => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      moveProps.onMouseDown = e => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = e => {\n        let touch = [...e.changedTouches].findIndex(({\n          identifier: identifier\n        }) => identifier === state.current.id);\n\n        if (touch >= 0) {\n          let {\n            pageX: pageX,\n            pageY: pageY\n          } = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n\n      let onTouchEnd = e => {\n        let touch = [...e.changedTouches].findIndex(({\n          identifier: identifier\n        }) => identifier === state.current.id);\n\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n\n      moveProps.onTouchStart = e => {\n        if (e.changedTouches.length === 0 || state.current.id != null) return;\n        let {\n          pageX: pageX,\n          pageY: pageY,\n          identifier: identifier\n        } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse'; // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      let onPointerUp = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse';\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = e => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e, deltaX, deltaY) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = e => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n  return {\n    moveProps: moveProps1\n  };\n}\n\nfunction $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n  let {\n    onScroll: onScroll,\n    isDisabled: isDisabled\n  } = props;\n  let onScrollHandler = $bx7SL$useCallback(e => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) return; // stop scrolling the page\n\n    e.preventDefault();\n    e.stopPropagation();\n    if (onScroll) onScroll({\n      deltaX: e.deltaX,\n      deltaY: e.deltaY\n    });\n  }, [onScroll]);\n  $bx7SL$useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n\nconst $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\n\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n  let {\n    isDisabled: isDisabled,\n    onLongPressStart: onLongPressStart,\n    onLongPressEnd: onLongPressEnd,\n    onLongPress: onLongPress,\n    threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD,\n    accessibilityDescription: accessibilityDescription\n  } = props;\n  const timeRef = $bx7SL$useRef(null);\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = $bx7SL$useGlobalListeners();\n  let {\n    pressProps: pressProps\n  } = $f6c31cce2adf654f$export$45712eceda6fad21({\n    isDisabled: isDisabled,\n\n    onPressStart(e1) {\n      if (e1.pointerType === 'mouse' || e1.pointerType === 'touch') {\n        if (onLongPressStart) onLongPressStart({ ...e1,\n          type: 'longpressstart'\n        });\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e1.target.dispatchEvent(new PointerEvent('pointercancel', {\n            bubbles: true\n          }));\n          if (onLongPress) onLongPress({ ...e1,\n            type: 'longpress'\n          });\n          timeRef.current = null;\n        }, threshold); // Prevent context menu, which may be opened on long press on touch devices\n\n        if (e1.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e1.target, 'contextmenu', onContextMenu, {\n            once: true\n          });\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e1.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {\n            once: true\n          });\n        }\n      }\n    },\n\n    onPressEnd(e) {\n      if (timeRef.current) clearTimeout(timeRef.current);\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({ ...e,\n        type: 'longpressend'\n      });\n    }\n\n  });\n  let descriptionProps = $bx7SL$useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n  return {\n    longPressProps: $bx7SL$mergeProps(pressProps, descriptionProps)\n  };\n}\n\nexport { $3b117e43dc0ca95d$export$27c701ed9e449e99 as Pressable, $f1ab8c75478c6f73$export$3351871ee4b288b8 as PressResponder, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6 as useFocus, $507fabe10e71c6fb$export$b9b3dfddab17db27 as isFocusVisible, $507fabe10e71c6fb$export$630ff653c5ada6a9 as getInteractionModality, $507fabe10e71c6fb$export$8397ddfc504fdb9a as setInteractionModality, $507fabe10e71c6fb$export$98e20ec92f614cfe as useInteractionModality, $507fabe10e71c6fb$export$ffd9e5021c1fb2d6 as useFocusVisible, $507fabe10e71c6fb$export$ec71b4b83ac08ec3 as useFocusVisibleListener, $9ab94262bd0047c7$export$420e68273165f4ec as useFocusWithin, $6179b936705e76d3$export$ae780daf29e6d456 as useHover, $e0b6e0b68ec7f50f$export$872b660ac5a1ff98 as useInteractOutside, $46d819fcbaf35654$export$8f71654801c2f7cd as useKeyboard, $e8a7022cf87cba2a$export$36da96379f79f245 as useMove, $f6c31cce2adf654f$export$45712eceda6fad21 as usePress, $7d0a636d7a4dcefd$export$2123ff2b87c81ca as useScrollWheel, $8a26561d2877236e$export$c24ed0104d07eab9 as useLongPress };","map":{"version":3,"sources":["packages/@react-aria/interactions/src/Pressable.tsx","packages/@react-aria/interactions/src/usePress.ts","packages/@react-aria/interactions/src/textSelection.ts","packages/@react-aria/interactions/src/context.ts","packages/@react-aria/interactions/src/PressResponder.tsx","packages/@react-aria/interactions/src/useFocus.ts","packages/@react-aria/interactions/src/utils.ts","packages/@react-aria/interactions/src/useFocusVisible.ts","packages/@react-aria/interactions/src/useFocusWithin.ts","packages/@react-aria/interactions/src/useHover.ts","packages/@react-aria/interactions/src/useInteractOutside.ts","packages/@react-aria/interactions/src/useKeyboard.ts","packages/@react-aria/interactions/src/createEventHandler.ts","packages/@react-aria/interactions/src/useMove.ts","packages/@react-aria/interactions/src/useScrollWheel.ts","packages/@react-aria/interactions/src/useLongPress.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {PressProps, usePress} from './usePress';\nimport React, {ReactElement, RefObject, useRef} from 'react';\n\ninterface PressableProps extends PressProps {\n  children: ReactElement<DOMAttributes, string>\n}\n\nexport const Pressable = React.forwardRef(({children, ...props}: PressableProps, ref: RefObject<Element>) => {\n  let newRef = useRef();\n  ref = ref ?? newRef;\n  let {pressProps} = usePress({...props, ref});\n  let child = React.Children.only(children);\n  return React.cloneElement(\n    child,\n    // @ts-ignore\n    {ref, ...mergeProps(child.props, pressProps)}\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {DOMAttributes, FocusableElement, PointerType, PressEvents} from '@react-types/shared';\nimport {focusWithoutScrolling, isVirtualClick, isVirtualPointerEvent, mergeProps, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {PressResponderContext} from './context';\nimport {RefObject, useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<Element>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  activePointerId: any,\n  target: FocusableElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType,\n  userSelect?: string\n}\n\ninterface EventBase {\n  currentTarget: EventTarget,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: DOMAttributes\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n  let propsRef = useRef<PressHookProps>(null);\n  propsRef.current = {onPress, onPressChange, onPressStart, onPressEnd, onPressUp, isDisabled, shouldCancelOnPointerExit};\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressStart, onPressChange, isDisabled} = propsRef.current;\n      if (isDisabled || state.didFirePressStart) {\n        return;\n      }\n\n      if (onPressStart) {\n        onPressStart({\n          type: 'pressstart',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(true);\n      }\n\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = (originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n      let {onPressEnd, onPressChange, onPress, isDisabled} = propsRef.current;\n      if (!state.didFirePressStart) {\n        return;\n      }\n\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n\n      if (onPressEnd) {\n        onPressEnd({\n          type: 'pressend',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(false);\n      }\n\n      setPressed(false);\n\n      if (onPress && wasPressed && !isDisabled) {\n        onPress({\n          type: 'press',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let triggerPressUp = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressUp, isDisabled} = propsRef.current;\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressUp) {\n        onPressUp({\n          type: 'pressup',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let cancel = (e: EventBase) => {\n      if (state.isPressed) {\n        if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n      }\n    };\n\n    let pressProps: DOMAttributes = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target as Element)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n            e.preventDefault();\n          }\n          e.stopPropagation();\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        } else if (e.key === 'Enter' && isHTMLAnchorLink(e.currentTarget)) {\n          // If the target is a link, we won't have handled this above because we want the default\n          // browser behavior to open the link when pressing Enter. But we still need to prevent\n          // default so that elements above do not also handle it (e.g. table row).\n          e.stopPropagation();\n        }\n      },\n      onKeyUp(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target as Element)) {\n          triggerPressUp(createEvent(state.target, e), 'keyboard');\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && isValidKeyboardEvent(e, state.target)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n          e.preventDefault();\n        }\n        e.stopPropagation();\n\n        state.isPressed = false;\n        let target = e.target as Element;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (state.target instanceof HTMLElement && state.target.contains(target) && (isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link')) {\n          state.target.click();\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as Element)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          triggerPressStart(e, state.pointerType);\n\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefault(e.currentTarget as Element)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as Element) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if (isOverTarget(e, state.target)) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget)) {\n          e.preventDefault();\n        }\n\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) {\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType);\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(e, state.pointerType, false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(e);\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as Element).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        restoreTextSelection(ref.current.target);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: Element): boolean {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent, currentTarget: Element): boolean {\n  const {key, code} = event;\n  const element = currentTarget as HTMLElement;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    !((element instanceof HTMLInputElement && !isValidInputKey(element, key)) ||\n      element instanceof HTMLTextAreaElement ||\n      element.isContentEditable) &&\n    // A link with a valid href should be handled natively,\n    // unless it also has role='button' and was triggered using Space.\n    (!isHTMLAnchorLink(element) || (role === 'button' && key !== 'Enter')) &&\n    // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createEvent(target: FocusableElement, e: EventBase): EventBase {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = (point.width / 2) || point.radiusX || 0;\n  let offsetY = (point.height / 2) || point.radiusY || 0;\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: Element) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefault(target: Element) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.draggable;\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element, key: string) {\n  if (target instanceof HTMLInputElement) {\n    return !isValidInputKey(target, key);\n  }\n\n  if (target instanceof HTMLButtonElement) {\n    return target.type !== 'submit';\n  }\n\n  return true;\n}\n\nconst nonTextInputTypes = new Set([\n  'checkbox',\n  'radio',\n  'range',\n  'color',\n  'file',\n  'image',\n  'button',\n  'submit',\n  'reset'\n]);\n\nfunction isValidInputKey(target: HTMLInputElement, key: string) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio'\n    ? key === ' '\n    : nonTextInputTypes.has(target.type);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isIOS, runAfterTransition} from '@react-aria/utils';\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\n\n// For non-iOS devices, we apply user-select: none to the pressed element instead to avoid possible\n// performance issues that arise from applying and removing user-select: none to the entire page\n// (see https://github.com/adobe/react-spectrum/issues/1609).\ntype State = 'default' | 'disabled' | 'restoring';\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet state: State = 'default';\nlet savedUserSelect = '';\nlet modifiedElementMap = new WeakMap<Element, string>();\n\nexport function disableTextSelection(target?: Element) {\n  if (isIOS()) {\n    if (state === 'default') {\n      savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    state = 'disabled';\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nexport function restoreTextSelection(target?: Element) {\n  if (isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if (state !== 'disabled') {\n      return;\n    }\n\n    state = 'restoring';\n\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      runAfterTransition(() => {\n        // Avoid race conditions\n        if (state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') {\n            document.documentElement.style.webkitUserSelect = savedUserSelect || '';\n          }\n\n          savedUserSelect = '';\n          state = 'default';\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && modifiedElementMap.has(target)) {\n      let targetOldUserSelect = modifiedElementMap.get(target);\n\n      if (target.style.userSelect === 'none') {\n        target.style.userSelect = targetOldUserSelect;\n      }\n\n      if (target.getAttribute('style') === '') {\n        target.removeAttribute('style');\n      }\n      modifiedElementMap.delete(target);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {PressProps} from './usePress';\nimport React, {MutableRefObject} from 'react';\n\ninterface IPressResponderContext extends PressProps {\n  register(): void,\n  ref?: MutableRefObject<FocusableElement>\n}\n\nexport const PressResponderContext = React.createContext<IPressResponderContext>(null);\nPressResponderContext.displayName = 'PressResponderContext';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport {PressProps} from './usePress';\nimport {PressResponderContext} from './context';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\n\ninterface PressResponderProps extends PressProps {\n  children: ReactNode\n}\n\nexport const PressResponder = React.forwardRef(({children, ...props}: PressResponderProps, ref: RefObject<FocusableElement>) => {\n  let isRegistered = useRef(false);\n  let prevContext = useContext(PressResponderContext);\n  let context = mergeProps(prevContext || {}, {\n    ...props,\n    ref: ref || prevContext?.ref,\n    register() {\n      isRegistered.current = true;\n      if (prevContext) {\n        prevContext.register();\n      }\n    }\n  });\n\n  useSyncRef(prevContext, ref);\n\n  useEffect(() => {\n    if (!isRegistered.current) {\n      console.warn(\n        'A PressResponder was rendered without a pressable child. ' +\n        'Either call the usePress hook, or wrap your DOM node with <Pressable> component.'\n      );\n    }\n  }, []);\n\n  return (\n    <PressResponderContext.Provider value={context}>\n      {children}\n    </PressResponderContext.Provider>\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes, FocusEvents} from '@react-types/shared';\nimport {FocusEvent, useCallback} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusProps extends FocusEvents {\n  /** Whether the focus events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusResult {\n  /** Props to spread onto the target element. */\n  focusProps: DOMAttributes\n}\n\n/**\n * Handles focus events for the immediate target.\n * Focus events on child elements will be ignored.\n */\nexport function useFocus(props: FocusProps): FocusResult {\n  let {\n    isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange\n  } = props;\n\n  const onBlur: FocusProps['onBlur'] = useCallback((e: FocusEvent) => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) {\n        onBlurProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(false);\n      }\n\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n\n\n  const onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n\n  const onFocus: FocusProps['onFocus'] = useCallback((e: FocusEvent) => {\n    if (e.target === e.currentTarget) {\n      if (onFocusProp) {\n        onFocusProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(true);\n      }\n\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n\n  return {\n    focusProps: {\n      onFocus: (!isDisabled && (onFocusProp || onFocusChange || onBlurProp)) ? onFocus : undefined,\n      onBlur: (!isDisabled && (onBlurProp || onFocusChange)) ? onBlur : null\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent as ReactFocusEvent, useCallback, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\nexport class SyntheticFocusEvent implements ReactFocusEvent {\n  nativeEvent: FocusEvent;\n  target: Element;\n  currentTarget: Element;\n  relatedTarget: Element;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  timeStamp: number;\n  type: string;\n\n  constructor(type: string, nativeEvent: FocusEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target as Element;\n    this.currentTarget = nativeEvent.currentTarget as Element;\n    this.relatedTarget = nativeEvent.relatedTarget as Element;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n  isDefaultPrevented(): boolean {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault(): void {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation(): void {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped(): boolean {\n    return false;\n  }\n\n  persist() {}\n}\n\nexport function useSyntheticBlurEvent(onBlur: (e: ReactFocusEvent) => void) {\n  let stateRef = useRef({\n    isFocused: false,\n    onBlur,\n    observer: null as MutationObserver\n  });\n  stateRef.current.onBlur = onBlur;\n\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n\n  // This function is called during a React onFocus event.\n  return useCallback((e: ReactFocusEvent) => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (\n      e.target instanceof HTMLButtonElement ||\n      e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement ||\n      e.target instanceof HTMLSelectElement\n    ) {\n      stateRef.current.isFocused = true;\n\n      let target = e.target;\n      let onBlurHandler = (e: FocusEvent) => {\n        stateRef.current.isFocused = false;\n\n        if (target.disabled) {\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          stateRef.current.onBlur?.(new SyntheticFocusEvent('blur', e));\n        }\n\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {once: true});\n\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {bubbles: true}));\n        }\n      });\n\n      stateRef.current.observer.observe(target, {attributes: true, attributeFilter: ['disabled']});\n    }\n  }, []);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {isMac, isVirtualClick} from '@react-aria/utils';\nimport {useEffect, useState} from 'react';\n\nexport type Modality = 'keyboard' | 'pointer' | 'virtual';\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent;\ntype Handler = (modality: Modality, e: HandlerEvent) => void;\nexport type FocusVisibleHandler = (isFocusVisible: boolean) => void;\ninterface FocusVisibleProps {\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusVisibleResult {\n  /** Whether keyboard focus is visible globally. */\n  isFocusVisible: boolean\n}\n\nlet currentModality = null;\nlet changeHandlers = new Set<Handler>();\nlet hasSetupGlobalListeners = false;\nlet hasEventBeforeFocus = false;\nlet hasBlurredWindowRecently = false;\n\n// Only Tab or Esc keys will make focus visible on text input elements\nconst FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction triggerChangeHandlers(modality: Modality, e: HandlerEvent) {\n  for (let handler of changeHandlers) {\n    handler(modality, e);\n  }\n}\n\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction isValidKey(e: KeyboardEvent) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || (!isMac() && e.altKey) || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\n\nfunction handleKeyboardEvent(e: KeyboardEvent) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(e)) {\n    currentModality = 'keyboard';\n    triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction handlePointerEvent(e: PointerEvent | MouseEvent) {\n  currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    hasEventBeforeFocus = true;\n    triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction handleClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    currentModality = 'virtual';\n  }\n}\n\nfunction handleFocusEvent(e: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) {\n    return;\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    currentModality = 'virtual';\n    triggerChangeHandlers('virtual', e);\n  }\n\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\n\nfunction handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\n\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || hasSetupGlobalListeners) {\n    return;\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', handleKeyboardEvent, true);\n  document.addEventListener('keyup', handleKeyboardEvent, true);\n  document.addEventListener('click', handleClickEvent, true);\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', handleFocusEvent, true);\n  window.addEventListener('blur', handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', handlePointerEvent, true);\n    document.addEventListener('pointermove', handlePointerEvent, true);\n    document.addEventListener('pointerup', handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', handlePointerEvent, true);\n    document.addEventListener('mousemove', handlePointerEvent, true);\n    document.addEventListener('mouseup', handlePointerEvent, true);\n  }\n\n  hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') {\n    setupGlobalFocusEvents();\n  } else {\n    document.addEventListener('DOMContentLoaded', setupGlobalFocusEvents);\n  }\n}\n\n/**\n * If true, keyboard focus is visible.\n */\nexport function isFocusVisible(): boolean {\n  return currentModality !== 'pointer';\n}\n\nexport function getInteractionModality(): Modality {\n  return currentModality;\n}\n\nexport function setInteractionModality(modality: Modality) {\n  currentModality = modality;\n  triggerChangeHandlers(modality, null);\n}\n\n/**\n * Keeps state of the current modality.\n */\nexport function useInteractionModality(): Modality {\n  setupGlobalFocusEvents();\n\n  let [modality, setModality] = useState(currentModality);\n  useEffect(() => {\n    let handler = () => {\n      setModality(currentModality);\n    };\n\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, []);\n\n  return modality;\n}\n\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction isKeyboardFocusEvent(isTextInput: boolean, modality: Modality, e: HandlerEvent) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\n/**\n * Manages focus visible state for the page, and subscribes individual components for updates.\n */\nexport function useFocusVisible(props: FocusVisibleProps = {}): FocusVisibleResult {\n  let {isTextInput, autoFocus} = props;\n  let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());\n  useFocusVisibleListener((isFocusVisible) => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {isTextInput});\n\n  return {isFocusVisible: isFocusVisibleState};\n}\n\n/**\n * Listens for trigger change and reports if focus is visible (i.e., modality is not pointer).\n */\nexport function useFocusVisibleListener(fn: FocusVisibleHandler, deps: ReadonlyArray<any>, opts?: {isTextInput?: boolean}): void {\n  setupGlobalFocusEvents();\n\n  useEffect(() => {\n    let handler = (modality: Modality, e: HandlerEvent) => {\n      if (!isKeyboardFocusEvent(opts?.isTextInput, modality, e)) {\n        return;\n      }\n      fn(isFocusVisible());\n    };\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, deps);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {FocusEvent, useCallback, useRef} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusWithinProps {\n  /** Whether the focus within events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the target element or a descendant receives focus. */\n  onFocusWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the target element and all descendants lose focus. */\n  onBlurWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the the focus within state changes. */\n  onFocusWithinChange?: (isFocusWithin: boolean) => void\n}\n\nexport interface FocusWithinResult {\n  /** Props to spread onto the target element. */\n  focusWithinProps: DOMAttributes\n}\n\n/**\n * Handles focus events for the target and its descendants.\n */\nexport function useFocusWithin(props: FocusWithinProps): FocusWithinResult {\n  let {\n    isDisabled,\n    onBlurWithin,\n    onFocusWithin,\n    onFocusWithinChange\n  } = props;\n  let state = useRef({\n    isFocusWithin: false\n  });\n\n  let onBlur = useCallback((e: FocusEvent) => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !(e.currentTarget as Element).contains(e.relatedTarget as Element)) {\n      state.current.isFocusWithin = false;\n\n      if (onBlurWithin) {\n        onBlurWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(false);\n      }\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n\n  let onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n  let onFocus = useCallback((e: FocusEvent) => {\n    if (!state.current.isFocusWithin) {\n      if (onFocusWithin) {\n        onFocusWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(true);\n      }\n\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n\n  if (isDisabled) {\n    return {\n      focusWithinProps: {\n        onFocus: null,\n        onBlur: null\n      }\n    };\n  }\n\n  return {\n    focusWithinProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {HoverEvents} from '@react-types/shared';\nimport {useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface HoverProps extends HoverEvents {\n  /** Whether the hover events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface HoverResult {\n  /** Props to spread on the target element. */\n  hoverProps: DOMAttributes,\n  isHovered: boolean\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet globalIgnoreEmulatedMouseEvents = false;\nlet hoverCount = 0;\n\nfunction setGlobalIgnoreEmulatedMouseEvents() {\n  globalIgnoreEmulatedMouseEvents = true;\n\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') {\n    setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerup', handleGlobalPointerEvent);\n  } else {\n    document.addEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n  }\n\n  hoverCount++;\n  return () => {\n    hoverCount--;\n    if (hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', handleGlobalPointerEvent);\n    } else {\n      document.removeEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useHover(props: HoverProps): HoverResult {\n  let {\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled\n  } = props;\n\n  let [isHovered, setHovered] = useState(false);\n  let state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n\n  useEffect(setupGlobalTouchEvents, []);\n\n  let {hoverProps, triggerHoverEnd} = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {\n        return;\n      }\n\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n\n      if (pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    let hoverProps: DOMAttributes = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = (e) => {\n        if (globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, e.pointerType);\n        }\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && !globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, 'mouse');\n        }\n      };\n    }\n    return {hoverProps, triggerHoverEnd};\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n\n  useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) {\n      triggerHoverEnd({currentTarget: state.target}, state.pointerType);\n    }\n  }, [isDisabled]);\n\n  return {\n    hoverProps,\n    isHovered\n  };\n}\n\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {RefObject, SyntheticEvent, useEffect, useRef} from 'react';\n\nexport interface InteractOutsideProps {\n  ref: RefObject<Element>,\n  onInteractOutside?: (e: SyntheticEvent) => void,\n  onInteractOutsideStart?: (e: SyntheticEvent) => void,\n  /** Whether the interact outside events should be disabled. */\n  isDisabled?: boolean\n}\n\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\nexport function useInteractOutside(props: InteractOutsideProps) {\n  let {ref, onInteractOutside, isDisabled, onInteractOutsideStart} = props;\n  let stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside,\n    onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n\n  useEffect(() => {\n    if (isDisabled) {\n      return;\n    }\n\n    let onPointerDown = (e) => {\n      if (isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) {\n          state.onInteractOutsideStart(e);\n        }\n        state.isPointerDown = true;\n      }\n    };\n\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = (e) => {\n        if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      // changing these to capture phase fixed combobox\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = (e) => {\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n        } else if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      let onTouchEnd = (e) => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction isValidEvent(event, ref) {\n  if (event.button > 0) {\n    return false;\n  }\n\n  // if the event target is no longer in the document\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) {\n      return false;\n    }\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createEventHandler} from './createEventHandler';\nimport {DOMAttributes, KeyboardEvents} from '@react-types/shared';\n\nexport interface KeyboardProps extends KeyboardEvents {\n  /** Whether the keyboard events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface KeyboardResult {\n  /** Props to spread onto the target element. */\n  keyboardProps: DOMAttributes\n}\n\n/**\n * Handles keyboard interactions for a focusable element.\n */\nexport function useKeyboard(props: KeyboardProps): KeyboardResult {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: createEventHandler(props.onKeyDown),\n      onKeyUp: createEventHandler(props.onKeyUp)\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BaseEvent} from '@react-types/shared';\nimport {SyntheticEvent} from 'react';\n\n/**\n * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.\n */\nexport function createEventHandler<T extends SyntheticEvent>(handler: (e: BaseEvent<T>) => void): (e: T) => void {\n  if (!handler) {\n    return;\n  }\n\n  let shouldStopPropagation = true;\n  return (e: T) => {\n    let event: BaseEvent<T> = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n\n    handler(event);\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {disableTextSelection, restoreTextSelection}  from './textSelection';\nimport {DOMAttributes, MoveEvents, PointerType} from '@react-types/shared';\nimport React, {useMemo, useRef} from 'react';\nimport {useGlobalListeners} from '@react-aria/utils';\n\nexport interface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: DOMAttributes\n}\n\ninterface EventBase {\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let {onMoveStart, onMove, onMoveEnd} = props;\n\n  let state = useRef<{\n    didMove: boolean,\n    lastPosition: {pageX: number, pageY: number} | null,\n    id: number | null\n  }>({didMove: false, lastPosition: null, id: null});\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let moveProps = useMemo(() => {\n    let moveProps: DOMAttributes = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n    let move = (originalEvent: EventBase, pointerType: PointerType, deltaX: number, deltaY: number) => {\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart?.({\n          type: 'movestart',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n      onMove({\n        type: 'move',\n        pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let end = (originalEvent: EventBase, pointerType: PointerType) => {\n      restoreTextSelection();\n      if (state.current.didMove) {\n        onMoveEnd?.({\n          type: 'moveend',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {pageX, pageY} = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX, pageY};\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {pageX, pageY, identifier} = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {pageX, pageY};\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = (e: React.PointerEvent) => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e: EventBase, deltaX: number, deltaY: number) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n\n  return {moveProps};\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject, useCallback} from 'react';\nimport {ScrollEvents} from '@react-types/shared';\nimport {useEvent} from '@react-aria/utils';\n\nexport interface ScrollWheelProps extends ScrollEvents {\n  /** Whether the scroll listener should be disabled. */\n  isDisabled?: boolean\n}\n\n// scroll wheel needs to be added not passively so it's cancelable, small helper hook to remember that\nexport function useScrollWheel(props: ScrollWheelProps, ref: RefObject<HTMLElement>): void {\n  let {onScroll, isDisabled} = props;\n  let onScrollHandler = useCallback((e) => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) {\n      return;\n    }\n\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (onScroll) {\n      onScroll({deltaX: e.deltaX, deltaY: e.deltaY});\n    }\n  }, [onScroll]);\n\n  useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, LongPressEvent} from '@react-types/shared';\nimport {mergeProps, useDescription, useGlobalListeners} from '@react-aria/utils';\nimport {usePress} from './usePress';\nimport {useRef} from 'react';\n\nexport interface LongPressProps {\n  /** Whether long press events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when a long press interaction starts. */\n  onLongPressStart?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when a long press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onLongPressEnd?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when the threshold time is met while\n   * the press is over the target.\n   */\n  onLongPress?: (e: LongPressEvent) => void,\n  /**\n   * The amount of time in milliseconds to wait before triggering a long press.\n   * @default 500ms\n   */\n  threshold?: number,\n  /**\n   * A description for assistive techology users indicating that a long press\n   * action is available, e.g. \"Long press to open menu\".\n   */\n  accessibilityDescription?: string\n}\n\nexport interface LongPressResult {\n  /** Props to spread on the target element. */\n  longPressProps: DOMAttributes\n}\n\nconst DEFAULT_THRESHOLD = 500;\n\n/**\n * Handles long press interactions across mouse and touch devices. Supports a customizable time threshold,\n * accessibility description, and normalizes behavior across browsers and devices.\n */\nexport function useLongPress(props: LongPressProps): LongPressResult {\n  let {\n    isDisabled,\n    onLongPressStart,\n    onLongPressEnd,\n    onLongPress,\n    threshold = DEFAULT_THRESHOLD,\n    accessibilityDescription\n  } = props;\n\n  const timeRef = useRef(null);\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let {pressProps} = usePress({\n    isDisabled,\n    onPressStart(e) {\n      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n        if (onLongPressStart) {\n          onLongPressStart({\n            ...e,\n            type: 'longpressstart'\n          });\n        }\n\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent('pointercancel', {bubbles: true}));\n          if (onLongPress) {\n            onLongPress({\n              ...e,\n              type: 'longpress'\n            });\n          }\n          timeRef.current = null;\n        }, threshold);\n\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, 'contextmenu', onContextMenu, {once: true});\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {once: true});\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) {\n        clearTimeout(timeRef.current);\n      }\n\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {\n        onLongPressEnd({\n          ...e,\n          type: 'longpressend'\n        });\n      }\n    }\n  });\n\n  let descriptionProps = useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n\n  return {\n    longPressProps: mergeProps(pressProps, descriptionProps)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}