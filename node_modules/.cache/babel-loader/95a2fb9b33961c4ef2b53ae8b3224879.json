{"ast":null,"code":"import { mergeProps as $9BxnE$mergeProps } from \"@react-aria/utils\";\nimport $9BxnE$react, { useState as $9BxnE$useState, useMemo as $9BxnE$useMemo } from \"react\";\nimport { useFocusWithin as $9BxnE$useFocusWithin } from \"@react-aria/interactions\";\nconst $5c3e21d68f1c4674$var$styles = {\n  border: 0,\n  clip: 'rect(0 0 0 0)',\n  clipPath: 'inset(50%)',\n  height: 1,\n  margin: '0 -1px -1px 0',\n  overflow: 'hidden',\n  padding: 0,\n  position: 'absolute',\n  width: 1,\n  whiteSpace: 'nowrap'\n};\n\nfunction $5c3e21d68f1c4674$export$a966af930f325cab(props = {}) {\n  let {\n    style: style,\n    isFocusable: isFocusable\n  } = props;\n  let [isFocused, setFocused] = $9BxnE$useState(false);\n  let {\n    focusWithinProps: focusWithinProps\n  } = $9BxnE$useFocusWithin({\n    isDisabled: !isFocusable,\n    onFocusWithinChange: val => setFocused(val)\n  }); // If focused, don't hide the element.\n\n  let combinedStyles = $9BxnE$useMemo(() => {\n    if (isFocused) return style;else if (style) return { ...$5c3e21d68f1c4674$var$styles,\n      ...style\n    };else return $5c3e21d68f1c4674$var$styles;\n  }, [isFocused]);\n  return {\n    visuallyHiddenProps: { ...focusWithinProps,\n      style: combinedStyles\n    }\n  };\n}\n\nfunction $5c3e21d68f1c4674$export$439d29a4e110a164(props) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let {\n    children: children,\n    elementType: Element = 'div',\n    isFocusable: isFocusable,\n    style: style,\n    ...otherProps\n  } = props;\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = $5c3e21d68f1c4674$export$a966af930f325cab(props);\n  return /*#__PURE__*/$9BxnE$react.createElement(Element, $9BxnE$mergeProps(otherProps, visuallyHiddenProps), children);\n}\n\nexport { $5c3e21d68f1c4674$export$a966af930f325cab as useVisuallyHidden, $5c3e21d68f1c4674$export$439d29a4e110a164 as VisuallyHidden };","map":{"version":3,"sources":["packages/@react-aria/visually-hidden/src/VisuallyHidden.tsx"],"names":[],"mappings":";;;AA+BA,MAAM,4BAAM,GAAkB;AAC5B,EAAA,MAAM,EAAE,CADoB;AAE5B,EAAA,IAAI,EAAE,eAFsB;AAG5B,EAAA,QAAQ,EAAE,YAHkB;AAI5B,EAAA,MAAM,EAAE,CAJoB;AAK5B,EAAA,MAAM,EAAE,eALoB;AAM5B,EAAA,QAAQ,EAAE,QANkB;AAO5B,EAAA,OAAO,EAAE,CAPmB;AAQ5B,EAAA,QAAQ,EAAE,UARkB;AAS5B,EAAA,KAAK,EAAE,CATqB;AAU5B,EAAA,UAAU,EAAE;AAVgB,CAA9B;;SAqBgB,yC,CAAkB,KAA0B,GAAG,E,EAAwB;AACrF,MAAI;AAAC,IAAA,KAAA,EACH,KADE;AACG,IAAA,WAAA,EACL;AAFE,MAGA,KAHJ;AAKA,MAAG,CAAE,SAAF,EAAa,UAAb,IAA2B,eAAQ,CAAC,KAAD,CAAtC;AACA,MAAI;AAAC,IAAA,gBAAA,EAAA;AAAD,MAAqB,qBAAc,CAAC;AACtC,IAAA,UAAU,EAAA,CAAG,WADyB;AAEtC,IAAA,mBAAmB,EAAG,GAAH,IAAW,UAAU,CAAC,GAAD;AAFF,GAAD,CAAvC,CAPqF,CAYrF;;AACA,MAAI,cAAc,GAAG,cAAO,CAAA,MAAO;AACjC,QAAI,SAAJ,EACE,OAAO,KAAP,CADF,KAEO,IAAI,KAAJ,EACL,OAAO,E,GAAI,4BAAJ;SAAe;AAAf,KAAP,CADK,KAGL,OAAO,4BAAP;AAEH,GAR2B,EAQzB,CAAC,SAAD,CARyB,CAA5B;AAUA,SAAO;AACL,IAAA,mBAAmB,EAAE,E,GAChB,gBADgB;AAEnB,MAAA,KAAK,EAAE;AAFY;AADhB,GAAP;AAMD;;SAMe,yC,CAAe,K,EAA4B;AACzD;AACA,MAAI;AAAC,IAAA,QAAA,EAAA,QAAD;AAAW,IAAA,WAAW,EAAE,OAAO,GAAG,KAAlC;AAAuC,IAAA,WAAA,EAAE,WAAzC;AAAoD,IAAA,KAAA,EAAE,KAAtD;AAA2D,OAAK;AAAhE,MAA8E,KAAlF;AACA,MAAI;AAAC,IAAA,mBAAA,EAAA;AAAD,MAAwB,yCAAiB,CAAC,KAAD,CAA7C;AAEA,SAAM,aAAA,YAAA,CAAA,aAAA,CACH,OADG,EACS,iBAAU,CAAC,UAAD,EAAa,mBAAb,CADnB,EAED,QAFC,CAAN;AAKD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {CSSProperties, JSXElementConstructor, ReactNode, useMemo, useState} from 'react';\nimport {useFocusWithin} from '@react-aria/interactions';\n\nexport interface VisuallyHiddenProps extends DOMAttributes {\n  /** The content to visually hide. */\n  children?: ReactNode,\n\n  /**\n   * The element type for the container.\n   * @default 'div'\n   */\n  elementType?: string | JSXElementConstructor<any>,\n\n  /** Whether the element should become visible on focus, for example skip links. */\n  isFocusable?: boolean\n}\n\nconst styles: CSSProperties = {\n  border: 0,\n  clip: 'rect(0 0 0 0)',\n  clipPath: 'inset(50%)',\n  height: 1,\n  margin: '0 -1px -1px 0',\n  overflow: 'hidden',\n  padding: 0,\n  position: 'absolute',\n  width: 1,\n  whiteSpace: 'nowrap'\n};\n\nexport interface VisuallyHiddenAria {\n  visuallyHiddenProps: DOMAttributes\n}\n\n/**\n * Provides props for an element that hides its children visually\n * but keeps content visible to assistive technology.\n */\nexport function useVisuallyHidden(props: VisuallyHiddenProps = {}): VisuallyHiddenAria {\n  let {\n    style,\n    isFocusable\n  } = props;\n\n  let [isFocused, setFocused] = useState(false);\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !isFocusable,\n    onFocusWithinChange: (val) => setFocused(val)\n  });\n\n  // If focused, don't hide the element.\n  let combinedStyles = useMemo(() => {\n    if (isFocused) {\n      return style;\n    } else if (style) {\n      return {...styles, ...style};\n    } else {\n      return styles;\n    }\n  }, [isFocused]);\n\n  return {\n    visuallyHiddenProps: {\n      ...focusWithinProps,\n      style: combinedStyles\n    }\n  };\n}\n\n/**\n * VisuallyHidden hides its children visually, while keeping content visible\n * to screen readers.\n */\nexport function VisuallyHidden(props: VisuallyHiddenProps) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let {children, elementType: Element = 'div', isFocusable, style, ...otherProps} = props;\n  let {visuallyHiddenProps} = useVisuallyHidden(props);\n\n  return (\n    <Element {...mergeProps(otherProps, visuallyHiddenProps)}>\n      {children}\n    </Element>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}