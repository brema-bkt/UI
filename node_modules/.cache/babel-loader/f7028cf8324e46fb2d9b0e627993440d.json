{"ast":null,"code":"import { mergeProps as $7CUUz$mergeProps, filterDOMProps as $7CUUz$filterDOMProps } from \"@react-aria/utils\";\nimport { useFocusable as $7CUUz$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $7CUUz$usePress } from \"@react-aria/interactions\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n\nfunction $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {\n  let {\n    isDisabled = false,\n    isRequired: isRequired,\n    isReadOnly: isReadOnly,\n    value: value,\n    name: name,\n    children: children,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    validationState = \"valid\"\n  } = props;\n\n  let onChange = e => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn(\"If you do not provide children, you must specify an aria-label for accessibility\"); // This handles focusing the input on pointer down, which Safari does not do by default.\n\n  let {\n    pressProps: pressProps\n  } = (0, $7CUUz$usePress)({\n    isDisabled: isDisabled\n  });\n  let {\n    focusableProps: focusableProps\n  } = (0, $7CUUz$useFocusable)(props, ref);\n  let interactions = (0, $7CUUz$mergeProps)(pressProps, focusableProps);\n  let domProps = (0, $7CUUz$filterDOMProps)(props, {\n    labelable: true\n  });\n  return {\n    inputProps: (0, $7CUUz$mergeProps)(domProps, {\n      \"aria-invalid\": validationState === \"invalid\" || undefined,\n      \"aria-errormessage\": props[\"aria-errormessage\"],\n      \"aria-controls\": props[\"aria-controls\"],\n      \"aria-readonly\": isReadOnly || undefined,\n      \"aria-required\": isRequired || undefined,\n      onChange: onChange,\n      disabled: isDisabled,\n      ...(value == null ? {} : {\n        value: value\n      }),\n      name: name,\n      type: \"checkbox\",\n      ...interactions\n    })\n  };\n}\n\nexport { $d2c8e2b0480f3f34$export$cbe85ee05b554577 as useToggle };","map":{"version":3,"sources":["packages/@react-aria/toggle/src/index.ts","packages/@react-aria/toggle/src/useToggle.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;ACAA;;AAAA;;;;;;;;;;AAUC;;AAmBM,SAAS,yCAAT,CAAmB,KAAnB,EAA2C,KAA3C,EAA+D,GAA/D,EAA6G;AAClH,MAAI;AACF,IAAA,UAAA,GAAa,KADX;AACgB,IAAA,UAAA,EAClB,UAFE;AAEQ,IAAA,UAAA,EACV,UAHE;AAGQ,IAAA,KAAA,EACV,KAJE;AAIG,IAAA,IAAA,EACL,IALE;AAKE,IAAA,QAAA,EACJ,QANE;AAOF,kBAAc,SAPZ;AAQF,uBAAmB,cARjB;AASF,IAAA,eAAA,GAAkB;AAThB,MAUA,KAVJ;;AAYA,MAAI,QAAA,GAAY,CAAD,IAAO;AACpB;AACA;AACA,IAAA,CAAA,CAAE,eAAF;AACA,IAAA,KAAA,CAAM,WAAN,CAAkB,CAAA,CAAE,MAAF,CAAS,OAA3B;AACF,GALA;;AAOA,MAAI,WAAA,GAAc,QAAA,IAAY,IAA9B;AACA,MAAI,YAAA,GAAe,SAAA,IAAa,IAAb,IAAqB,cAAA,IAAkB,IAA1D;AACA,MAAI,CAAC,WAAD,IAAgB,CAAC,YAArB,EACE,OAAA,CAAQ,IAAR,CAAa,kFAAb,EAvBgH,CA0BlH;;AACA,MAAI;AAAA,IAAA,UAAA,EAAC;AAAD,MAAe,CAAA,GAAA,eAAA,EAAS;gBAC1B;AAD0B,GAAT,CAAnB;AAIA,MAAI;AAAA,IAAA,cAAA,EAAC;AAAD,MAAmB,CAAA,GAAA,mBAAA,EAAa,KAAb,EAAoB,GAApB,CAAvB;AACA,MAAI,YAAA,GAAe,CAAA,GAAA,iBAAA,EAAW,UAAX,EAAuB,cAAvB,CAAnB;AACA,MAAI,QAAA,GAAW,CAAA,GAAA,qBAAA,EAAe,KAAf,EAAsB;AAAC,IAAA,SAAA,EAAW;AAAZ,GAAtB,CAAf;AAEA,SAAO;AACL,IAAA,UAAA,EAAY,CAAA,GAAA,iBAAA,EAAW,QAAX,EAAqB;AAC/B,sBAAgB,eAAA,KAAoB,SAApB,IAAiC,SADlB;AAE/B,2BAAqB,KAAK,CAAC,mBAAD,CAFK;AAG/B,uBAAiB,KAAK,CAAC,eAAD,CAHS;AAI/B,uBAAiB,UAAA,IAAc,SAJA;AAK/B,uBAAiB,UAAA,IAAc,SALA;gBAM/B,QAN+B;AAO/B,MAAA,QAAA,EAAU,UAPqB;AAQ/B,UAAI,KAAA,IAAS,IAAT,GAAgB,EAAhB,GAAqB;eAAC;AAAD,OAAzB,CAR+B;YAS/B,IAT+B;AAU/B,MAAA,IAAA,EAAM,UAVyB;AAW/B,SAAG;AAX4B,KAArB;AADP,GAAP;AAeF","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useToggle} from './useToggle';\nexport type {AriaToggleProps} from '@react-types/checkbox';\nexport type {ToggleAria} from './useToggle';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleProps} from '@react-types/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface ToggleAria {\n  /**\n   * Props to be spread on the input element.\n   */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(props: AriaToggleProps, state: ToggleState, ref: RefObject<HTMLInputElement>): ToggleAria {\n  let {\n    isDisabled = false,\n    isRequired,\n    isReadOnly,\n    value,\n    name,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid'\n  } = props;\n\n  let onChange = (e) => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let {pressProps} = usePress({\n    isDisabled\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  return {\n    inputProps: mergeProps(domProps, {\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onChange,\n      disabled: isDisabled,\n      ...(value == null ? {} : {value}),\n      name,\n      type: 'checkbox',\n      ...interactions\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}