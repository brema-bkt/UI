{"ast":null,"code":"import { Section as $6555104ff085bef4$re_export$Section, useCollection as $1BfjW$useCollection } from \"@react-stately/collections\";\nimport $1BfjW$react, { useRef as $1BfjW$useRef, useState as $1BfjW$useState, useCallback as $1BfjW$useCallback, useMemo as $1BfjW$useMemo } from \"react\";\nimport { useGridState as $1BfjW$useGridState, GridCollection as $1BfjW$GridCollection } from \"@react-stately/grid\";\n\nfunction $30561577df230a30$export$f61abf052f87399f(widths) {\n  return Array.from(widths).map(e => e[1]).reduce((acc, cur) => acc + cur, 0);\n}\n\nfunction $30561577df230a30$export$1994a077b98ee0d5(width) {\n  return width != null && (!isNaN(width) || String(width).match(/^(\\d+)(?=%$)/) !== null);\n}\n\nfunction $30561577df230a30$var$parseFractionalUnit(width) {\n  if (!width) return 1;\n  let match = width.match(/^(\\d+)(?=fr$)/); // if width is the incorrect format, just deafult it to a 1fr\n\n  if (!match) {\n    console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`, 'defaulting to \\'1fr\\'');\n    return 1;\n  }\n\n  return parseInt(match[0], 10);\n}\n\nfunction $30561577df230a30$export$7bbad27896f7ae9f(width, tableWidth) {\n  if (typeof width === 'string') {\n    let match = width.match(/^(\\d+)(?=%$)/);\n    if (!match) throw new Error('Only percentages or numbers are supported for static column widths');\n    return tableWidth * (parseInt(match[0], 10) / 100);\n  }\n\n  return width;\n}\n\nfunction $30561577df230a30$export$59185c62a7544aa0(maxWidth, tableWidth) {\n  return maxWidth != null ? $30561577df230a30$export$7bbad27896f7ae9f(maxWidth, tableWidth) : Number.MAX_SAFE_INTEGER;\n}\n\nfunction $30561577df230a30$export$f556054ce4358701(minWidth, tableWidth) {\n  return minWidth != null ? $30561577df230a30$export$7bbad27896f7ae9f(minWidth, tableWidth) : 75;\n}\n\nfunction $30561577df230a30$var$mapDynamicColumns(dynamicColumns, availableSpace, tableWidth) {\n  let fractions = dynamicColumns.reduce((sum, column) => sum + $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth), 0);\n  let columns = dynamicColumns.map((column, index) => {\n    const targetWidth = $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth) * availableSpace / fractions;\n    const delta = Math.max($30561577df230a30$export$f556054ce4358701(column.props.minWidth, tableWidth) - targetWidth, targetWidth - $30561577df230a30$export$59185c62a7544aa0(column.props.maxWidth, tableWidth));\n    return { ...column,\n      index: index,\n      delta: delta\n    };\n  });\n  return columns;\n}\n\nfunction $30561577df230a30$var$findDynamicColumnWidths(dynamicColumns, availableSpace, tableWidth) {\n  let fractions = dynamicColumns.reduce((sum, col) => sum + $30561577df230a30$var$parseFractionalUnit(col.props.defaultWidth), 0);\n  const columns = dynamicColumns.map(column => {\n    const targetWidth = $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth) * availableSpace / fractions;\n    let width = Math.max($30561577df230a30$export$f556054ce4358701(column.props.minWidth, tableWidth), Math.min(Math.floor(targetWidth), $30561577df230a30$export$59185c62a7544aa0(column.props.maxWidth, tableWidth)));\n    column.calculatedWidth = width;\n    availableSpace -= width;\n    fractions -= $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth);\n    return column;\n  });\n  return columns;\n}\n\nfunction $30561577df230a30$export$a870e6692ac5ccb2(dynamicColumns, availableSpace, tableWidth) {\n  let columns = $30561577df230a30$var$mapDynamicColumns(dynamicColumns, availableSpace, tableWidth);\n  columns.sort((a, b) => b.delta - a.delta);\n  columns = $30561577df230a30$var$findDynamicColumnWidths(columns, availableSpace, tableWidth);\n  columns.sort((a, b) => a.index - b.index);\n  return columns;\n}\n\nfunction $292bc4e09cd0eb62$export$cb895dcf85db1319(props, state) {\n  const {\n    getDefaultWidth: getDefaultWidth,\n    tableWidth: defaultTableWidth = null\n  } = props;\n  const {\n    columns: columns1\n  } = state;\n  const columnsRef = $1BfjW$useRef([]);\n  const tableWidth = $1BfjW$useRef(defaultTableWidth);\n  const isResizing = $1BfjW$useRef(null);\n  const startResizeContentWidth = $1BfjW$useRef();\n  const [columnWidths, setColumnWidths] = $1BfjW$useState(new Map(columns1.map(col => [col.key, 0])));\n  const columnWidthsRef = $1BfjW$useRef(columnWidths);\n  const affectedColumnWidthsRef = $1BfjW$useRef([]);\n  const [resizedColumns, setResizedColumns] = $1BfjW$useState(new Set());\n  const resizedColumnsRef = $1BfjW$useRef(resizedColumns);\n  const [currentlyResizingColumn, setCurrentlyResizingColumn] = $1BfjW$useState(null);\n\n  function setColumnWidthsForRef(newWidths) {\n    columnWidthsRef.current = newWidths; // new map so that change detection is triggered\n\n    setColumnWidths(newWidths);\n  }\n  /*\n  returns the resolved column width in this order:\n  previously calculated width -> controlled width prop -> uncontrolled defaultWidth prop -> dev assigned width -> default dynamic width\n  */\n\n\n  let getResolvedColumnWidth = $1BfjW$useCallback(column => {\n    let columnProps = column.props;\n\n    var _width, ref, ref1;\n\n    return (resizedColumns === null || resizedColumns === void 0 ? void 0 : resizedColumns.has(column.key)) ? columnWidthsRef.current.get(column.key) : (ref1 = (ref = (_width = columnProps.width) !== null && _width !== void 0 ? _width : columnProps.defaultWidth) !== null && ref !== void 0 ? ref : getDefaultWidth === null || getDefaultWidth === void 0 ? void 0 : getDefaultWidth(column.props)) !== null && ref1 !== void 0 ? ref1 : '1fr';\n  }, [getDefaultWidth, resizedColumns]);\n  let getStaticAndDynamicColumns = $1BfjW$useCallback(columns => columns.reduce((acc, column) => {\n    let width = getResolvedColumnWidth(column);\n    return $30561577df230a30$export$1994a077b98ee0d5(width) ? { ...acc,\n      staticColumns: [...acc.staticColumns, column]\n    } : { ...acc,\n      dynamicColumns: [...acc.dynamicColumns, column]\n    };\n  }, {\n    staticColumns: [],\n    dynamicColumns: []\n  }), [getResolvedColumnWidth]);\n  let buildColumnWidths = $1BfjW$useCallback((affectedColumns, availableSpace) => {\n    const widths = new Map();\n    let remainingSpace = availableSpace;\n    const {\n      staticColumns: staticColumns,\n      dynamicColumns: dynamicColumns\n    } = getStaticAndDynamicColumns(affectedColumns);\n    staticColumns.forEach(column => {\n      let width = getResolvedColumnWidth(column);\n      let w = $30561577df230a30$export$7bbad27896f7ae9f(width, tableWidth.current);\n      widths.set(column.key, w);\n      remainingSpace -= w;\n    }); // dynamic columns\n\n    if (dynamicColumns.length > 0) {\n      const newColumnWidths = $30561577df230a30$export$a870e6692ac5ccb2(dynamicColumns, remainingSpace, tableWidth.current);\n\n      for (let column of newColumnWidths) widths.set(column.key, column.calculatedWidth);\n    }\n\n    return widths;\n  }, [getStaticAndDynamicColumns, getResolvedColumnWidth]);\n  const prevColKeys = columnsRef.current.map(col => col.key);\n  const colKeys = columns1.map(col => col.key); // if the columns change, need to rebuild widths.\n\n  if (prevColKeys.length !== colKeys.length || !colKeys.every((col, i) => col === prevColKeys[i])) {\n    columnsRef.current = columns1;\n    const widths = buildColumnWidths(columns1, tableWidth.current);\n    setColumnWidthsForRef(widths);\n  }\n\n  function setTableWidth(width) {\n    if (width && width !== tableWidth.current) {\n      tableWidth.current = width;\n\n      if (!isResizing.current) {\n        const widths = buildColumnWidths(columns1, width);\n        setColumnWidthsForRef(widths);\n      }\n    }\n  }\n\n  function onColumnResizeStart(column) {\n    setCurrentlyResizingColumn(column.key);\n    isResizing.current = true;\n    startResizeContentWidth.current = $30561577df230a30$export$f61abf052f87399f(columnWidthsRef.current);\n  }\n\n  function onColumnResize(column, width) {\n    let widthsObj = resizeColumn(column, width);\n    affectedColumnWidthsRef.current = widthsObj;\n    props.onColumnResize && props.onColumnResize(affectedColumnWidthsRef.current);\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  function onColumnResizeEnd(column) {\n    props.onColumnResizeEnd && isResizing.current && props.onColumnResizeEnd(affectedColumnWidthsRef.current);\n    setCurrentlyResizingColumn(null);\n    isResizing.current = false;\n    affectedColumnWidthsRef.current = [];\n    let widths = new Map(columnWidthsRef.current);\n    setColumnWidthsForRef(widths);\n  }\n\n  function resizeColumn(column1, newWidth) {\n    let boundedWidth = Math.max($30561577df230a30$export$f556054ce4358701(column1.props.minWidth, tableWidth.current), Math.min(Math.floor(newWidth), $30561577df230a30$export$59185c62a7544aa0(column1.props.maxWidth, tableWidth.current))); // copy the columnWidths map and set the new width for the column being resized\n\n    let widths = new Map(columnWidthsRef.current);\n    widths.set(column1.key, boundedWidth); // keep track of all columns that have been sized\n\n    resizedColumnsRef.current.add(column1.key);\n    setResizedColumns(resizedColumnsRef.current); // get the columns affected by resize and remaining space\n\n    const resizeIndex = columnsRef.current.findIndex(col => col.key === column1.key);\n    let affectedColumns = columnsRef.current.slice(resizeIndex + 1); // we only care about the columns that CAN be resized, we ignore static columns.\n\n    let {\n      dynamicColumns: dynamicColumns\n    } = getStaticAndDynamicColumns(affectedColumns); // available space for affected columns\n\n    let availableSpace = columnsRef.current.reduce((acc, column, index) => {\n      if (index <= resizeIndex || $30561577df230a30$export$1994a077b98ee0d5(getResolvedColumnWidth(column))) return acc - widths.get(column.key);\n      return acc;\n    }, tableWidth.current); // merge the unaffected column widths and the recalculated column widths\n\n    let recalculatedColumnWidths = buildColumnWidths(dynamicColumns, availableSpace);\n    widths = new Map([...widths, ...recalculatedColumnWidths]);\n    setColumnWidthsForRef(widths);\n    /*\n    when getting recalculated columns above, the column being resized is not considered \"recalculated\"\n    so we need to add it to the list of affected columns\n    */\n\n    let allAffectedColumns = [[column1.key, boundedWidth], ...recalculatedColumnWidths].map(([key, width]) => ({\n      key: key,\n      width: width\n    }));\n    return allAffectedColumns;\n  }\n\n  var ref2; // This function is regenerated whenever columnWidthsRef.current changes in order to get the new correct ref value.\n\n  let getColumnWidth = $1BfjW$useCallback(key => (ref2 = columnWidthsRef.current.get(key)) !== null && ref2 !== void 0 ? ref2 : 0, [columnWidthsRef.current]);\n  let getColumnMinWidth = $1BfjW$useCallback(key => {\n    const columnIndex = columns1.findIndex(col => col.key === key);\n    if (columnIndex === -1) return;\n    return $30561577df230a30$export$f556054ce4358701(columns1[columnIndex].props.minWidth, tableWidth.current);\n  }, [columns1]);\n  let getColumnMaxWidth = $1BfjW$useCallback(key => {\n    const columnIndex = columns1.findIndex(col => col.key === key);\n    if (columnIndex === -1) return;\n    return $30561577df230a30$export$59185c62a7544aa0(columns1[columnIndex].props.maxWidth, tableWidth.current);\n  }, [columns1]);\n  return {\n    columnWidths: columnWidthsRef,\n    setTableWidth: setTableWidth,\n    onColumnResize: onColumnResize,\n    onColumnResizeStart: onColumnResizeStart,\n    onColumnResizeEnd: onColumnResizeEnd,\n    getColumnWidth: getColumnWidth,\n    getColumnMinWidth: getColumnMinWidth,\n    getColumnMaxWidth: getColumnMaxWidth,\n    currentlyResizingColumn: currentlyResizingColumn\n  };\n}\n\nconst $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n\nfunction $788781baa30117fa$var$buildHeaderRows(keyMap, columnNodes) {\n  let columns = [];\n  let seen = new Map();\n\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent = keyMap.get(parentKey); // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n\n      if (seen.has(parent)) {\n        parent.colspan++;\n        let {\n          column: column,\n          index: index\n        } = seen.get(parent);\n        if (index > col.length) break;\n\n        for (let i = index; i < col.length; i++) column.splice(i, 0, null); // Adjust shifted indices\n\n\n        for (let i1 = col.length; i1 < column.length; i1++) if (column[i1] && seen.has(column[i1])) seen.get(column[i1]).index = i1;\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {\n          column: col,\n          index: col.length - 1\n        });\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []); // Convert columns into rows.\n\n  let colIndex = 0;\n\n  for (let column1 of columns) {\n    let i = maxLength - 1;\n\n    for (let item of column1) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n\n        if (rowLength < colIndex) {\n          let placeholder = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.colIndex = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  } // Add placeholders at the end of each row that is shorter than the maximum\n\n\n  let i = 0;\n\n  for (let row1 of headerRows) {\n    let rowLength = row1.reduce((p, c) => p + c.colspan, 0);\n\n    if (rowLength < columnNodes.length) {\n      let placeholder = {\n        type: 'placeholder',\n        key: 'placeholder-' + row1[row1.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row1[row1.length - 1].key\n      };\n      row1.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index: index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes: childNodes,\n      textValue: null\n    };\n    return row;\n  });\n}\n\nvar tmp = Symbol.iterator;\n\nclass $788781baa30117fa$export$596e1b2e2cf93690 extends $1BfjW$GridCollection {\n  *[tmp]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return [...this.body.childNodes].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    var ref;\n    return (ref = [...this.body.childNodes][0]) === null || ref === void 0 ? void 0 : ref.key;\n  }\n\n  getLastKey() {\n    var ref;\n    let rows = [...this.body.childNodes];\n    return (ref = rows[rows.length - 1]) === null || ref === void 0 ? void 0 : ref.key;\n  }\n\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n\n  constructor(nodes, prev, opts) {\n    let rowHeaderColumnKeys = new Set();\n    let body;\n    let columns = []; // Add cell for selection checkboxes if needed.\n\n    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {\n      let rowHeaderColumn = {\n        type: 'column',\n        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n\n    let visit = node => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n\n        case 'column':\n          columnKeyMap.set(node.key, node);\n\n          if (!node.hasChildNodes) {\n            columns.push(node);\n            if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);\n          }\n\n          break;\n\n        case 'item':\n          rows.push(node);\n          return;\n        // do not go into childNodes\n      }\n\n      for (let child of node.childNodes) visit(child);\n    };\n\n    for (let node1 of nodes) visit(node1);\n\n    let headerRows = $788781baa30117fa$var$buildHeaderRows(columnKeyMap, columns);\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows; // Default row header column to the first one.\n\n    if (this.rowHeaderColumnKeys.size === 0) this.rowHeaderColumnKeys.add(this.columns[(opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) ? 1 : 0].key);\n  }\n\n}\n\nconst $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending',\n  descending: 'ascending'\n};\n\nfunction $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {\n  let [isKeyboardNavigationDisabled, setKeyboardNavigationDisabled] = $1BfjW$useState(false);\n  let {\n    selectionMode = 'none'\n  } = props;\n  let context = $1BfjW$useMemo(() => ({\n    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n    selectionMode: selectionMode,\n    columns: []\n  }), [props.children, props.showSelectionCheckboxes, selectionMode]);\n  let collection = $1BfjW$useCollection(props, (nodes, prev) => new $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, context), context);\n  let {\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager\n  } = $1BfjW$useGridState({ ...props,\n    collection: collection\n  });\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,\n    setKeyboardNavigationDisabled: setKeyboardNavigationDisabled,\n\n    sort(columnKey, direction) {\n      var ref;\n      props.onSortChange({\n        column: columnKey,\n        direction: direction !== null && direction !== void 0 ? direction : ((ref = props.sortDescriptor) === null || ref === void 0 ? void 0 : ref.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : 'ascending'\n      });\n    }\n\n  };\n}\n\nfunction $312ae3b56a94a86e$var$TableHeader(props) {\n  return null;\n}\n\n$312ae3b56a94a86e$var$TableHeader.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children,\n    columns: columns\n  } = props;\n\n  if (typeof children === 'function') {\n    if (!columns) throw new Error('props.children was a function but props.columns is missing');\n\n    for (let column of columns) yield {\n      type: 'column',\n      value: column,\n      renderer: children\n    };\n  } else {\n    let columns = [];\n    $1BfjW$react.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n    yield* columns;\n  }\n};\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $312ae3b56a94a86e$export$f850895b287ef28e = $312ae3b56a94a86e$var$TableHeader;\n\nfunction $4ae5314bf50db1a3$var$TableBody(props) {\n  return null;\n}\n\n$4ae5314bf50db1a3$var$TableBody.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children,\n    items: items1\n  } = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props: props,\n\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items1) throw new Error('props.children was a function but props.items is missing');\n\n        for (let item of items1) yield {\n          type: 'item',\n          value: item,\n          renderer: children\n        };\n      } else {\n        let items = [];\n        $1BfjW$react.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n        yield* items;\n      }\n    }\n\n  };\n};\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $4ae5314bf50db1a3$export$76ccd210b9029917 = $4ae5314bf50db1a3$var$TableBody;\n\nfunction $1cd244557c2f97d5$var$Column(props) {\n  return null;\n}\n\n$1cd244557c2f97d5$var$Column.getCollectionNode = function* getCollectionNode(props, context1) {\n  let {\n    title: title,\n    children: children,\n    childColumns: childColumns1\n  } = props;\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns1 || title && $1BfjW$react.Children.count(children) > 0,\n    rendered: rendered,\n    textValue: textValue,\n    props: props,\n\n    *childNodes() {\n      if (childColumns1) for (let child1 of childColumns1) yield {\n        type: 'column',\n        value: child1\n      };else if (title) {\n        let childColumns = [];\n        $1BfjW$react.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child\n          });\n        });\n        yield* childColumns;\n      }\n    },\n\n    shouldInvalidate(newContext) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n\n  };\n\n  let updateContext = context => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) if (!node.hasChildNodes) context.columns.push(node);\n  };\n\n  updateContext(context1);\n};\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $1cd244557c2f97d5$export$816b5d811295e6bc = $1cd244557c2f97d5$var$Column;\n\nfunction $70d70eb16ea48428$var$Row(props) {\n  return null;\n}\n\n$70d70eb16ea48428$var$Row.getCollectionNode = function* getCollectionNode(props, context) {\n  let {\n    children: children,\n    textValue: textValue\n  } = props;\n  yield {\n    type: 'item',\n    props: props,\n    textValue: textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n\n    *childNodes() {\n      // Process cells first\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') yield {\n        type: 'cell',\n        key: 'header',\n        props: {\n          isSelectionCell: true\n        }\n      };\n      if (typeof children === 'function') for (let column of context.columns) yield {\n        type: 'cell',\n        element: children(column.key),\n        key: column.key // this is combined with the row key by CollectionBuilder\n\n      };else {\n        let cells = [];\n        $1BfjW$react.Children.forEach(children, cell => {\n          cells.push({\n            type: 'cell',\n            element: cell\n          });\n        });\n        if (cells.length !== context.columns.length) throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        yield* cells;\n      }\n    },\n\n    shouldInvalidate(newContext) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length || newContext.columns.some((c, i) => c.key !== context.columns[i].key) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.selectionMode !== context.selectionMode;\n    }\n\n  };\n};\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;\n\nfunction $941d1d9a6a28982a$var$Cell(props) {\n  return null;\n}\n\n$941d1d9a6a28982a$var$Cell.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children\n  } = props;\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue: textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $941d1d9a6a28982a$export$f6f0c3fe4ec306ea = $941d1d9a6a28982a$var$Cell;\nexport { $292bc4e09cd0eb62$export$cb895dcf85db1319 as useTableColumnResizeState, $4a0dd036d492cee4$export$907bcc6c48325fd6 as useTableState, $312ae3b56a94a86e$export$f850895b287ef28e as TableHeader, $4ae5314bf50db1a3$export$76ccd210b9029917 as TableBody, $1cd244557c2f97d5$export$816b5d811295e6bc as Column, $70d70eb16ea48428$export$b59bdbef9ce70de2 as Row, $941d1d9a6a28982a$export$f6f0c3fe4ec306ea as Cell, $6555104ff085bef4$re_export$Section as Section };","map":{"version":3,"sources":["packages/@react-stately/table/src/useTableColumnResizeState.ts","packages/@react-stately/table/src/utils.ts","packages/@react-stately/table/src/useTableState.ts","packages/@react-stately/table/src/TableCollection.ts","packages/@react-stately/table/src/TableHeader.ts","packages/@react-stately/table/src/TableBody.ts","packages/@react-stately/table/src/Column.ts","packages/@react-stately/table/src/Row.ts","packages/@react-stately/table/src/Cell.ts"],"names":[],"mappings":";;;;SCSgB,yC,CAAgB,M,EAAkC;AAChE,SAAO,KAAK,CAAC,IAAN,CAAW,MAAX,EAAmB,GAAnB,CAAuB,CAAD,IAAM,CAAC,CAAC,CAAD,CAA7B,EAAkC,MAAlC,CAAwC,CAAE,GAAF,EAAO,GAAP,KAAe,GAAG,GAAG,GAA7D,EAAkE,CAAlE,CAAP;AACD;;SAGe,yC,CAAS,K,EAAiC;AACxD,SAAO,KAAK,IAAI,IAAT,KAAa,CAAM,KAAK,CAAC,KAAD,CAAX,IAAiC,MAAM,CAAC,KAAD,CAAN,CAAe,KAAf,CAAoB,cAApB,MAAyC,IAAvF,CAAP;AACD;;SAEQ,yC,CAAoB,K,EAAuB;AAClD,MAAE,CAAG,KAAL,EACE,OAAO,CAAP;AAEF,MAAI,KAAK,GAAG,KAAK,CAAC,KAAN,CAAW,eAAX,CAAZ,CAJkD,CAK9C;;AACJ,MAAE,CAAG,KAAL,EAAY;AACV,IAAA,OAAO,CAAC,IAAR,CAAc,UAAS,KAAM,+GAA7B,EACI,uBADJ;AAEA,WAAO,CAAP;AACD;;AACD,SAAO,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAf;AACD;;SAEe,yC,CAAiB,K,EAAwB,U,EAA4B;AACnF,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAI,KAAK,GAAG,KAAK,CAAC,KAAN,CAAW,cAAX,CAAZ;AACA,QAAE,CAAG,KAAL,EACE,MAAM,IAAI,KAAJ,CAAU,oEAAV,CAAN;AAEF,WAAO,UAAU,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,GAA7B,CAAjB;AACD;;AACD,SAAO,KAAP;AACD;;SAGe,yC,CAAY,Q,EAA2B,U,EAA4B;AACjF,SAAO,QAAQ,IAAI,IAAZ,GACC,yCAAgB,CAAC,QAAD,EAAW,UAAX,CADjB,GAEC,MAAM,CAAC,gBAFf;AAGD;;SAEe,yC,CAAY,Q,EAA2B,U,EAA4B;AACjF,SAAO,QAAQ,IAAI,IAAZ,GACD,yCAAgB,CAAC,QAAD,EAAW,UAAX,CADf,GAED,EAFN;AAGD;;SAEQ,uC,CAAqB,c,EAA+B,c,EAAwB,U,EAAuC;AAC1H,MAAI,SAAS,GAAG,cAAc,CAAC,MAAf,CAAqB,CAC9B,GAD8B,EACzB,MADyB,KACd,GAAG,GAAG,yCAAmB,CAAC,MAAM,CAAC,KAAP,CAAa,YAAd,CADhC,EAEV,CAFU,CAAhB;AAKA,MAAI,OAAO,GAAG,cAAc,CAAC,GAAf,CAAkB,CAAE,MAAF,EAAU,KAAV,KAAoB;AAClD,UAAM,WAAW,GACV,yCAAmB,CAAC,MAAM,CAAC,KAAP,CAAa,YAAd,CAAnB,GAAiD,cAAjD,GAAmE,SAD1E;AAEA,UAAM,KAAK,GAAG,IAAI,CAAC,GAAL,CACZ,yCAAW,CAAC,MAAM,CAAC,KAAP,CAAa,QAAd,EAAwB,UAAxB,CAAX,GAAiD,WADrC,EAEZ,WAAW,GAAG,yCAAW,CAAC,MAAM,CAAC,KAAP,CAAa,QAAd,EAAwB,UAAxB,CAFb,CAAd;AAKA,WAAO,E,GACF,MADE;aAEL,KAFK;aAGL;AAHK,KAAP;AAKD,GAba,CAAd;AAeA,SAAO,OAAP;AACD;;SAEQ,6C,CAA2B,c,EAAmC,c,EAAwB,U,EAAuC;AACpI,MAAI,SAAS,GAAG,cAAc,CAAC,MAAf,CAAqB,CAClC,GADkC,EAC7B,GAD6B,KACrB,GAAG,GAAG,yCAAmB,CAAC,GAAG,CAAC,KAAJ,CAAU,YAAX,CADzB,EAEd,CAFc,CAAhB;AAKA,QAAM,OAAO,GAAG,cAAc,CAAC,GAAf,CAAoB,MAAF,IAAa;AAC7C,UAAM,WAAW,GACd,yCAAmB,CAAC,MAAM,CAAC,KAAP,CAAa,YAAd,CAAnB,GAAiD,cAAjD,GAAmE,SADtE;AAEA,QAAI,KAAK,GAAG,IAAI,CAAC,GAAL,CACV,yCAAW,CAAC,MAAM,CAAC,KAAP,CAAa,QAAd,EAAwB,UAAxB,CADD,EAEV,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,KAAL,CAAW,WAAX,CAAT,EAAkC,yCAAW,CAAC,MAAM,CAAC,KAAP,CAAa,QAAd,EAAwB,UAAxB,CAA7C,CAFU,CAAZ;AAIA,IAAA,MAAM,CAAC,eAAP,GAAyB,KAAzB;AACA,IAAA,cAAc,IAAI,KAAlB;AACA,IAAA,SAAS,IAAI,yCAAmB,CAAC,MAAM,CAAC,KAAP,CAAa,YAAd,CAAhC;AACA,WAAO,MAAP;AACD,GAXe,CAAhB;AAaA,SAAO,OAAP;AACD;;SAEe,yC,CAA0B,c,EAA+B,c,EAAwB,U,EAAoB;AACnH,MAAI,OAAO,GAAG,uCAAiB,CAAC,cAAD,EAAiB,cAAjB,EAAiC,UAAjC,CAA/B;AAEA,EAAA,OAAO,CAAC,IAAR,CAAY,CAAE,CAAF,EAAK,CAAL,KAAW,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,KAAnC;AACA,EAAA,OAAO,GAAG,6CAAuB,CAAC,OAAD,EAAU,cAAV,EAA0B,UAA1B,CAAjC;AACA,EAAA,OAAO,CAAC,IAAR,CAAY,CAAE,CAAF,EAAK,CAAL,KAAW,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,KAAnC;AAEA,SAAO,OAAP;AACD;;SD5De,yC,CAA6B,K,EAAoC,K,EAAkD;AACjI,QAAM;AAAC,IAAA,eAAA,EAAA,eAAD;AAAkB,IAAA,UAAU,EAAE,iBAAiB,GAAG;AAAlD,MAA0D,KAAhE;AACA,QAAM;AAAC,IAAA,OAAA,EAAA;AAAD,MAAY,KAAlB;AACA,QAAM,UAAU,GAAG,aAAM,CAAgB,EAAhB,CAAzB;AACA,QAAM,UAAU,GAAG,aAAM,CAAS,iBAAT,CAAzB;AACA,QAAM,UAAU,GAAG,aAAM,CAAU,IAAV,CAAzB;AACA,QAAM,uBAAuB,GAAG,aAAM,EAAtC;AAEA,QAAK,CAAE,YAAF,EAAgB,eAAhB,IAAmC,eAAQ,CAAmB,IAAI,GAAJ,CAAQ,QAAO,CAAC,GAAR,CAAY,GAAD,IAAQ,CAAC,GAAG,CAAC,GAAL,EAAU,CAAV,CAAnB,CAAR,CAAnB,CAAhD;AACA,QAAM,eAAe,GAAG,aAAM,CAAmB,YAAnB,CAA9B;AACA,QAAM,uBAAuB,GAAG,aAAM,CAAuB,EAAvB,CAAtC;AACA,QAAK,CAAE,cAAF,EAAkB,iBAAlB,IAAuC,eAAQ,CAAW,IAAI,GAAJ,EAAX,CAApD;AACA,QAAM,iBAAiB,GAAG,aAAM,CAAW,cAAX,CAAhC;AAEA,QAAK,CAAE,uBAAF,EAA2B,0BAA3B,IAAyD,eAAQ,CAAM,IAAN,CAAtE;;WAES,qB,CAAsB,S,EAA6B;AAC1D,IAAA,eAAe,CAAC,OAAhB,GAA0B,SAA1B,CAD0D,CAE1D;;AACA,IAAA,eAAe,CAAC,SAAD,CAAf;AACD;AACD;;;AAAA;;;AAIA,MAAI,sBAAsB,GAAG,kBAAW,CAAE,MAAF,IAA6C;AACnF,QAAI,WAAW,GAAG,MAAM,CAAC,KAAzB;;QACmF,M,EAAA,G,EAAA,I;;AAAnF,WAAM,CAAC,cAAc,KAAA,IAAd,IAAA,cAAc,KAAd,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,cAAc,CAAE,GAAhB,CAAoB,MAAM,CAAC,GAA3B,CAAD,IAAmC,eAAe,CAAC,OAAhB,CAAwB,GAAxB,CAA4B,MAAM,CAAC,GAAnC,CAAnC,GAAyE,CAAI,IAAgF,GAAA,CAAhF,GAA6C,GAAA,CAA7C,MAAiB,GAAjB,WAAW,CAAC,KAAiC,MAA5B,IAA4B,IAA7C,MAAiB,KAAA,KAAA,CAA4B,GAA7C,MAA6C,GAAxB,WAAW,CAAC,YAA+C,MAAnC,IAAmC,IAAhF,GAA6C,KAAA,KAAA,CAAmC,GAAhF,GAAgF,GAA/B,eAAe,KAAA,IAAf,IAAA,eAAe,KAAf,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,eAAe,CAAG,MAAM,CAAC,KAAV,CAApE,MAAmF,IAAnF,IAAI,IAAgF,KAAA,KAAA,CAApF,GAAI,IAAJ,GAAwF,KAAvK;AACD,GAHuC,EAGrC,CAAC,eAAD,EAAkB,cAAlB,CAHqC,CAAxC;AAKA,MAAI,0BAA0B,GAAG,kBAAW,CAAE,OAAF,IAA+F,OAAO,CAAC,MAAR,CAAc,CAAE,GAAF,EAAO,MAAP,KAAkB;AACzK,QAAI,KAAK,GAAG,sBAAsB,CAAC,MAAD,CAAlC;AACA,WAAO,yCAAQ,CAAC,KAAD,CAAR,GAAkB,E,GAAI,GAAJ;AAAS,MAAA,aAAa,EAAE,C,GAAI,GAAG,CAAC,aAAR,EAAuB,MAAvB;AAAxB,KAAlB,GAA4E,E,GAAI,GAAJ;AAAS,MAAA,cAAc,EAAE,C,GAAI,GAAG,CAAC,cAAR,EAAwB,MAAxB;AAAzB,KAAnF;AACD,GAH0I,EAGxI;AAAC,IAAA,aAAa,EAAE,EAAhB;AAAoB,IAAA,cAAc,EAAE;AAApC,GAHwI,CAA/F,EAGC,CAAC,sBAAD,CAHD,CAA5C;AAKA,MAAI,iBAAiB,GAAG,kBAAW,CAAA,CAAE,eAAF,EAAkC,cAAlC,KAA+E;AAChH,UAAM,MAAM,GAAG,IAAI,GAAJ,EAAf;AACA,QAAI,cAAc,GAAG,cAArB;AAEA,UAAM;AAAC,MAAA,aAAA,EAAA,aAAD;AAAc,MAAA,cAAA,EAAE;AAAhB,QAAkC,0BAA0B,CAAC,eAAD,CAAlE;AAEA,IAAA,aAAa,CAAC,OAAd,CAAsB,MAAD,IAAW;AAC9B,UAAI,KAAK,GAAG,sBAAsB,CAAC,MAAD,CAAlC;AACA,UAAI,CAAC,GAAG,yCAAgB,CAAC,KAAD,EAAQ,UAAU,CAAC,OAAnB,CAAxB;AACA,MAAA,MAAM,CAAC,GAAP,CAAW,MAAM,CAAC,GAAlB,EAAuB,CAAvB;AACA,MAAA,cAAc,IAAI,CAAlB;AACD,KALD,EANgH,CAahH;;AACA,QAAI,cAAc,CAAC,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,YAAM,eAAe,GAAG,yCAAsB,CAAC,cAAD,EAAiB,cAAjB,EAAiC,UAAU,CAAC,OAA5C,CAA9C;;AACA,WAAK,IAAI,MAAT,IAAmB,eAAnB,EACE,MAAM,CAAC,GAAP,CAAW,MAAM,CAAC,GAAlB,EAAuB,MAAM,CAAC,eAA9B;AAEH;;AAED,WAAO,MAAP;AACD,GAtBkC,EAsBhC,CAAC,0BAAD,EAA6B,sBAA7B,CAtBgC,CAAnC;AAyBA,QAAM,WAAW,GAAG,UAAU,CAAC,OAAX,CAAmB,GAAnB,CAAuB,GAAD,IAAQ,GAAG,CAAC,GAAlC,CAApB;AACA,QAAM,OAAO,GAAG,QAAO,CAAC,GAAR,CAAY,GAAD,IAAQ,GAAG,CAAC,GAAvB,CAAhB,CA7DiI,CA8DjI;;AACA,MAAI,WAAW,CAAC,MAAZ,KAAuB,OAAO,CAAC,MAA/B,IAAqC,CAAK,OAAO,CAAC,KAAR,CAAa,CAAE,GAAF,EAAO,CAAP,KAAa,GAAG,KAAK,WAAW,CAAC,CAAD,CAA7C,CAA9C,EAAiG;AAC/F,IAAA,UAAU,CAAC,OAAX,GAAqB,QAArB;AACA,UAAM,MAAM,GAAG,iBAAiB,CAAC,QAAD,EAAU,UAAU,CAAC,OAArB,CAAhC;AACA,IAAA,qBAAqB,CAAC,MAAD,CAArB;AACD;;WAEQ,a,CAAc,K,EAAe;AACpC,QAAI,KAAK,IAAI,KAAK,KAAK,UAAU,CAAC,OAAlC,EAA2C;AACzC,MAAA,UAAU,CAAC,OAAX,GAAqB,KAArB;;AACA,UAAE,CAAG,UAAU,CAAC,OAAhB,EAAyB;AACvB,cAAM,MAAM,GAAG,iBAAiB,CAAC,QAAD,EAAU,KAAV,CAAhC;AACA,QAAA,qBAAqB,CAAC,MAAD,CAArB;AACD;AACF;AACF;;WAEQ,mB,CAAoB,M,EAAqB;AAChD,IAAA,0BAA0B,CAAC,MAAM,CAAC,GAAR,CAA1B;AACA,IAAA,UAAU,CAAC,OAAX,GAAqB,IAArB;AACA,IAAA,uBAAuB,CAAC,OAAxB,GAAkC,yCAAe,CAAC,eAAe,CAAC,OAAjB,CAAjD;AACD;;WAEQ,c,CAAe,M,EAAqB,K,EAAe;AAC1D,QAAI,SAAS,GAAG,YAAY,CAAC,MAAD,EAAS,KAAT,CAA5B;AACA,IAAA,uBAAuB,CAAC,OAAxB,GAAkC,SAAlC;AACA,IAAA,KAAK,CAAC,cAAN,IAAwB,KAAK,CAAC,cAAN,CAAqB,uBAAuB,CAAC,OAA7C,CAAxB;AACD,GAzFgI,CA2FjI;;;WACS,iB,CAAkB,M,EAAqB;AAC9C,IAAA,KAAK,CAAC,iBAAN,IAA2B,UAAU,CAAC,OAAtC,IAAiD,KAAK,CAAC,iBAAN,CAAwB,uBAAuB,CAAC,OAAhD,CAAjD;AACA,IAAA,0BAA0B,CAAC,IAAD,CAA1B;AACA,IAAA,UAAU,CAAC,OAAX,GAAqB,KAArB;AACA,IAAA,uBAAuB,CAAC,OAAxB,GAAkC,EAAlC;AAEA,QAAI,MAAM,GAAG,IAAI,GAAJ,CAAqB,eAAe,CAAC,OAArC,CAAb;AACA,IAAA,qBAAqB,CAAC,MAAD,CAArB;AACD;;WAEQ,Y,CAAa,O,EAAqB,Q,EAAyC;AAClF,QAAI,YAAY,GAAI,IAAI,CAAC,GAAL,CAClB,yCAAW,CAAC,OAAM,CAAC,KAAP,CAAa,QAAd,EAAwB,UAAU,CAAC,OAAnC,CADO,EAElB,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,KAAL,CAAW,QAAX,CAAT,EAA+B,yCAAW,CAAC,OAAM,CAAC,KAAP,CAAa,QAAd,EAAwB,UAAU,CAAC,OAAnC,CAA1C,CAFkB,CAApB,CADkF,CAKlF;;AACA,QAAI,MAAM,GAAG,IAAI,GAAJ,CAAqB,eAAe,CAAC,OAArC,CAAb;AACA,IAAA,MAAM,CAAC,GAAP,CAAW,OAAM,CAAC,GAAlB,EAAuB,YAAvB,EAPkF,CASlF;;AACA,IAAA,iBAAiB,CAAC,OAAlB,CAA0B,GAA1B,CAA8B,OAAM,CAAC,GAArC;AACA,IAAA,iBAAiB,CAAC,iBAAiB,CAAC,OAAnB,CAAjB,CAXkF,CAalF;;AACA,UAAM,WAAW,GAAG,UAAU,CAAC,OAAX,CAAmB,SAAnB,CAA6B,GAAD,IAAQ,GAAG,CAAC,GAAJ,KAAY,OAAM,CAAC,GAAvD,CAApB;AACA,QAAI,eAAe,GAAG,UAAU,CAAC,OAAX,CAAmB,KAAnB,CAAyB,WAAW,GAAG,CAAvC,CAAtB,CAfkF,CAiBlF;;AACA,QAAI;AAAC,MAAA,cAAA,EAAA;AAAD,QAAmB,0BAA0B,CAAC,eAAD,CAAjD,CAlBkF,CAoBlF;;AACA,QAAI,cAAc,GAAG,UAAU,CAAC,OAAX,CAAmB,MAAnB,CAAyB,CAAE,GAAF,EAAO,MAAP,EAAe,KAAf,KAAyB;AACrE,UAAI,KAAK,IAAI,WAAT,IAAwB,yCAAQ,CAAC,sBAAsB,CAAC,MAAD,CAAvB,CAApC,EACE,OAAO,GAAG,GAAG,MAAM,CAAC,GAAP,CAAW,MAAM,CAAC,GAAlB,CAAb;AAEF,aAAO,GAAP;AACD,KALoB,EAKlB,UAAU,CAAC,OALO,CAArB,CArBkF,CA4BlF;;AACA,QAAI,wBAAwB,GAAG,iBAAiB,CAAC,cAAD,EAAiB,cAAjB,CAAhD;AACA,IAAA,MAAM,GAAG,IAAI,GAAJ,CAAqB,C,GAAI,MAAJ,E,GAAe,wBAAf,CAArB,CAAT;AAEA,IAAA,qBAAqB,CAAC,MAAD,CAArB;AAEA;;;AAAA;;AAIA,QAAI,kBAAkB,GAAI,CAAC,CAAC,OAAM,CAAC,GAAR,EAAa,YAAb,CAAD,E,GAAgC,wBAAhC,EAA8E,GAA9E,CAAiF,CAAA,CAAG,GAAH,EAAQ,KAAR,CAAA,MAAoB;WAAC,GAAD;aAAM;AAAN,KAApB,CAAjF,CAA1B;AACA,WAAO,kBAAP;AACD;;MAGsD,I,CAjJ0E,CAgJjI;;AACA,MAAI,cAAc,GAAG,kBAAW,CAAE,GAAF,IAAU,CAAa,IAAgC,GAAhC,eAAe,CAAC,OAAhB,CAAwB,GAAxB,CAA4B,GAA5B,CAAb,MAA4C,IAA5C,IAAa,IAAgC,KAAA,KAAA,CAA7C,GAAa,IAAb,GAAiD,CAA3D,EAA8D,CAAC,eAAe,CAAC,OAAjB,CAA9D,CAAhC;AAEA,MAAI,iBAAiB,GAAG,kBAAW,CAAE,GAAF,IAAe;AAChD,UAAM,WAAW,GAAG,QAAO,CAAC,SAAR,CAAkB,GAAD,IAAQ,GAAG,CAAC,GAAJ,KAAY,GAArC,CAApB;AACA,QAAI,WAAW,KAAK,CAAA,CAApB,EACE;AAEF,WAAO,yCAAW,CAAC,QAAO,CAAC,WAAD,CAAP,CAAqB,KAArB,CAA2B,QAA5B,EAAsC,UAAU,CAAC,OAAjD,CAAlB;AACD,GANkC,EAMhC,CAAC,QAAD,CANgC,CAAnC;AAQA,MAAI,iBAAiB,GAAG,kBAAW,CAAE,GAAF,IAAe;AAChD,UAAM,WAAW,GAAG,QAAO,CAAC,SAAR,CAAkB,GAAD,IAAQ,GAAG,CAAC,GAAJ,KAAY,GAArC,CAApB;AACA,QAAI,WAAW,KAAK,CAAA,CAApB,EACE;AAEF,WAAO,yCAAW,CAAC,QAAO,CAAC,WAAD,CAAP,CAAqB,KAArB,CAA2B,QAA5B,EAAsC,UAAU,CAAC,OAAjD,CAAlB;AACD,GANkC,EAMhC,CAAC,QAAD,CANgC,CAAnC;AAQA,SAAO;AACL,IAAA,YAAY,EAAE,eADT;mBAEL,aAFK;oBAGL,cAHK;yBAIL,mBAJK;uBAKL,iBALK;oBAML,cANK;uBAOL,iBAPK;uBAQL,iBARK;6BASL;AATK,GAAP;AAWD;;AG7MD,MAAM,2CAAqB,GAAG,uBAAuB,IAAI,CAAC,MAAL,GAAc,QAAd,CAAuB,EAAvB,EAA2B,KAA3B,CAAiC,CAAjC,CAArD;;SAES,qC,CAAmB,M,EAA+B,W,EAA2C;AACpG,MAAI,OAAO,GAAoB,EAA/B;AACA,MAAI,IAAI,GAAG,IAAI,GAAJ,EAAX;;AACA,OAAK,IAAI,MAAT,IAAmB,WAAnB,EAAgC;AAC9B,QAAI,SAAS,GAAG,MAAM,CAAC,SAAvB;AACA,QAAI,GAAG,GAAG,CAAC,MAAD,CAAV;;WAEO,S,EAAW;AAChB,UAAI,MAAM,GAAgB,MAAM,CAAC,GAAP,CAAW,SAAX,CAA1B,CADgB,CAGhB;AACA;AACA;AACA;;AACA,UAAI,IAAI,CAAC,GAAL,CAAS,MAAT,CAAJ,EAAsB;AACpB,QAAA,MAAM,CAAC,OAAP;AAEA,YAAI;AAAC,UAAA,MAAA,EAAA,MAAD;AAAO,UAAA,KAAA,EAAE;AAAT,YAAkB,IAAI,CAAC,GAAL,CAAS,MAAT,CAAtB;AACA,YAAI,KAAK,GAAG,GAAG,CAAC,MAAhB,EACE;;AAGF,aAAK,IAAI,CAAC,GAAG,KAAb,EAAoB,CAAC,GAAG,GAAG,CAAC,MAA5B,EAAoC,CAAC,EAArC,EACE,MAAM,CAAC,MAAP,CAAc,CAAd,EAAiB,CAAjB,EAAoB,IAApB,EATkB,CAYpB;;;AACA,aAAK,IAAI,EAAC,GAAG,GAAG,CAAC,MAAjB,EAAyB,EAAC,GAAG,MAAM,CAAC,MAApC,EAA4C,EAAC,EAA7C,EACE,IAAI,MAAM,CAAC,EAAD,CAAN,IAAa,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,EAAD,CAAf,CAAjB,EACE,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,EAAD,CAAf,EAAoB,KAApB,GAA4B,EAA5B;AAGL,OAlBD,MAkBO;AACL,QAAA,MAAM,CAAC,OAAP,GAAiB,CAAjB;AACA,QAAA,GAAG,CAAC,IAAJ,CAAS,MAAT;AACA,QAAA,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB;AAAC,UAAA,MAAM,EAAE,GAAT;AAAc,UAAA,KAAK,EAAE,GAAG,CAAC,MAAJ,GAAa;AAAlC,SAAjB;AACD;;AAED,MAAA,SAAS,GAAG,MAAM,CAAC,SAAnB;AACD;;AAED,IAAA,OAAO,CAAC,IAAR,CAAa,GAAb;AACA,IAAA,MAAM,CAAC,KAAP,GAAe,OAAO,CAAC,MAAR,GAAiB,CAAhC;AACD;;AAED,MAAI,SAAS,GAAG,IAAI,CAAC,GAAL,CAAQ,GAAI,OAAO,CAAC,GAAR,CAAY,CAAD,IAAM,CAAC,CAAC,MAAnB,CAAZ,CAAhB;AACA,MAAI,UAAU,GAAG,KAAK,CAAC,SAAD,CAAL,CAAiB,IAAjB,CAAsB,CAAtB,EAAyB,GAAzB,CAA4B,MAAO,EAAnC,CAAjB,CA9CoG,CAgDpG;;AACA,MAAI,QAAQ,GAAG,CAAf;;AACA,OAAK,IAAI,OAAT,IAAmB,OAAnB,EAA4B;AAC1B,QAAI,CAAC,GAAG,SAAS,GAAG,CAApB;;AACA,SAAK,IAAI,IAAT,IAAiB,OAAjB,EAAyB;AACvB,UAAI,IAAJ,EAAU;AACR;AACA,YAAI,GAAG,GAAG,UAAU,CAAC,CAAD,CAApB;AACA,YAAI,SAAS,GAAG,GAAG,CAAC,MAAJ,CAAU,CAAE,CAAF,EAAK,CAAL,KAAW,CAAC,GAAG,CAAC,CAAC,OAA3B,EAAoC,CAApC,CAAhB;;AACA,YAAI,SAAS,GAAG,QAAhB,EAA0B;AACxB,cAAI,WAAW,GAAgB;AAC7B,YAAA,IAAI,EAAE,aADuB;AAE7B,YAAA,GAAG,EAAE,iBAAiB,IAAI,CAAC,GAFE;AAG7B,YAAA,OAAO,EAAE,QAAQ,GAAG,SAHS;AAI7B,YAAA,KAAK,EAAE,SAJsB;AAK7B,YAAA,KAAK,EAAE,IALsB;AAM7B,YAAA,QAAQ,EAAE,IANmB;AAO7B,YAAA,KAAK,EAAE,CAPsB;AAQ7B,YAAA,aAAa,EAAE,KARc;AAS7B,YAAA,UAAU,EAAE,EATiB;AAU7B,YAAA,SAAS,EAAE;AAVkB,WAA/B;;AAaA,cAAI,GAAG,CAAC,MAAJ,GAAa,CAAjB,EAAoB;AAClB,YAAA,GAAG,CAAC,GAAG,CAAC,MAAJ,GAAa,CAAd,CAAH,CAAoB,OAApB,GAA8B,WAAW,CAAC,GAA1C;AACA,YAAA,WAAW,CAAC,OAAZ,GAAsB,GAAG,CAAC,GAAG,CAAC,MAAJ,GAAa,CAAd,CAAH,CAAoB,GAA1C;AACD;;AAED,UAAA,GAAG,CAAC,IAAJ,CAAS,WAAT;AACD;;AAED,YAAI,GAAG,CAAC,MAAJ,GAAa,CAAjB,EAAoB;AAClB,UAAA,GAAG,CAAC,GAAG,CAAC,MAAJ,GAAa,CAAd,CAAH,CAAoB,OAApB,GAA8B,IAAI,CAAC,GAAnC;AACA,UAAA,IAAI,CAAC,OAAL,GAAe,GAAG,CAAC,GAAG,CAAC,MAAJ,GAAa,CAAd,CAAH,CAAoB,GAAnC;AACD;;AAED,QAAA,IAAI,CAAC,KAAL,GAAa,CAAb;AACA,QAAA,IAAI,CAAC,QAAL,GAAgB,QAAhB;AACA,QAAA,GAAG,CAAC,IAAJ,CAAS,IAAT;AACD;;AAED,MAAA,CAAC;AACF;;AAED,IAAA,QAAQ;AACT,GA7FmG,CA+FpG;;;AACA,MAAI,CAAC,GAAG,CAAR;;AACA,OAAK,IAAI,IAAT,IAAgB,UAAhB,EAA4B;AAC1B,QAAI,SAAS,GAAG,IAAG,CAAC,MAAJ,CAAU,CAAE,CAAF,EAAK,CAAL,KAAW,CAAC,GAAG,CAAC,CAAC,OAA3B,EAAoC,CAApC,CAAhB;;AACA,QAAI,SAAS,GAAG,WAAW,CAAC,MAA5B,EAAoC;AAClC,UAAI,WAAW,GAAgB;AAC7B,QAAA,IAAI,EAAE,aADuB;AAE7B,QAAA,GAAG,EAAE,iBAAiB,IAAG,CAAC,IAAG,CAAC,MAAJ,GAAa,CAAd,CAAH,CAAoB,GAFb;AAG7B,QAAA,OAAO,EAAE,WAAW,CAAC,MAAZ,GAAqB,SAHD;AAI7B,QAAA,KAAK,EAAE,SAJsB;AAK7B,QAAA,KAAK,EAAE,IALsB;AAM7B,QAAA,QAAQ,EAAE,IANmB;AAO7B,QAAA,KAAK,EAAE,CAPsB;AAQ7B,QAAA,aAAa,EAAE,KARc;AAS7B,QAAA,UAAU,EAAE,EATiB;AAU7B,QAAA,SAAS,EAAE,IAVkB;AAW7B,QAAA,OAAO,EAAE,IAAG,CAAC,IAAG,CAAC,MAAJ,GAAa,CAAd,CAAH,CAAoB;AAXA,OAA/B;AAcA,MAAA,IAAG,CAAC,IAAJ,CAAS,WAAT;AACD;;AAED,IAAA,CAAC;AACF;;AAED,SAAO,UAAU,CAAC,GAAX,CAAc,CAAE,UAAF,EAAc,KAAd,KAAwB;AAC3C,QAAI,GAAG,GAAgB;AACrB,MAAA,IAAI,EAAE,WADe;AAErB,MAAA,GAAG,EAAE,eAAe,KAFC;aAGrB,KAHqB;AAIrB,MAAA,KAAK,EAAE,IAJc;AAKrB,MAAA,QAAQ,EAAE,IALW;AAMrB,MAAA,KAAK,EAAE,CANc;AAOrB,MAAA,aAAa,EAAE,IAPM;kBAQrB,UARqB;AASrB,MAAA,SAAS,EAAE;AATU,KAAvB;AAYA,WAAO,GAAP;AACD,GAdM,CAAP;AAeD;;UAqFG,MAAM,CAAC,Q;;MAnFE,yC,SAA2B,qB,CAAc;WAmF/B;WACZ,KAAK,IAAL,CAAU,U;AAClB;;AAEO,MAAJ,IAAI,GAAG;AACT,WAAO,C,GAAI,KAAK,IAAL,CAAU,UAAd,EAA0B,MAAjC;AACD;;AAED,EAAA,OAAO,GAAG;AACR,WAAO,KAAK,MAAL,CAAY,IAAZ,EAAP;AACD;;AAED,EAAA,YAAY,CAAC,GAAD,EAAW;AACrB,QAAI,IAAI,GAAG,KAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,CAAX;AACA,WAAO,IAAI,GAAG,IAAI,CAAC,OAAR,GAAkB,IAA7B;AACD;;AAED,EAAA,WAAW,CAAC,GAAD,EAAW;AACpB,QAAI,IAAI,GAAG,KAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,CAAX;AACA,WAAO,IAAI,GAAG,IAAI,CAAC,OAAR,GAAkB,IAA7B;AACD;;AAED,EAAA,WAAW,GAAG;QACL,G;AAAP,WAAM,CAAC,GAA4B,GAA5B,C,GAAI,KAAK,IAAL,CAAU,UAAd,EAA0B,CAA1B,CAAD,MAA4B,IAA5B,IAAC,GAA4B,KAA5B,KAAA,CAAD,GAAC,KAAA,CAAD,GAAC,GAA4B,CAAE,GAArC;AACD;;AAED,EAAA,UAAU,GAAG;QAEJ,G;AADP,QAAI,IAAI,GAAG,C,GAAI,KAAK,IAAL,CAAU,UAAd,CAAX;AACA,WAAM,CAAC,GAAqB,GAArB,IAAI,CAAC,IAAI,CAAC,MAAL,GAAc,CAAf,CAAL,MAAqB,IAArB,IAAC,GAAqB,KAArB,KAAA,CAAD,GAAC,KAAA,CAAD,GAAC,GAAqB,CAAE,GAA9B;AACD;;AAED,EAAA,OAAO,CAAC,GAAD,EAAW;AAChB,WAAO,KAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,CAAP;AACD;;AAED,EAAA,EAAE,CAAC,GAAD,EAAc;AACd,UAAM,IAAI,GAAG,C,GAAI,KAAK,OAAL,EAAJ,CAAb;AACA,WAAO,KAAK,OAAL,CAAa,IAAI,CAAC,GAAD,CAAjB,CAAP;AACD;;cAnHW,K,EAA8B,I,EAA2B,I,EAA8B;AACjG,QAAI,mBAAmB,GAAa,IAAI,GAAJ,EAApC;AACA,QAAI,IAAJ;AACA,QAAI,OAAO,GAAG,EAAd,CAHiG,CAKjG;;AACA,QAAI,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,uBAAV,EAAmC;AACjC,UAAI,eAAe,GAAgB;AACjC,QAAA,IAAI,EAAE,QAD2B;AAEjC,QAAA,GAAG,EAAE,2CAF4B;AAGjC,QAAA,KAAK,EAAE,IAH0B;AAIjC,QAAA,SAAS,EAAE,EAJsB;AAKjC,QAAA,KAAK,EAAE,CAL0B;AAMjC,QAAA,KAAK,EAAE,CAN0B;AAOjC,QAAA,aAAa,EAAE,KAPkB;AAQjC,QAAA,QAAQ,EAAE,IARuB;AASjC,QAAA,UAAU,EAAE,EATqB;AAUjC,QAAA,KAAK,EAAE;AACL,UAAA,eAAe,EAAE;AADZ;AAV0B,OAAnC;AAeA,MAAA,OAAO,CAAC,OAAR,CAAgB,eAAhB;AACD;;AAED,QAAI,IAAI,GAAG,EAAX;AACA,QAAI,YAAY,GAAG,IAAI,GAAJ,EAAnB;;AACA,QAAI,KAAK,GAAI,IAAJ,IAA0B;AACjC,cAAQ,IAAI,CAAC,IAAb;AACE,aAAK,MAAL;AACE,UAAA,IAAI,GAAG,IAAP;AACA;;AACF,aAAK,QAAL;AACE,UAAA,YAAY,CAAC,GAAb,CAAiB,IAAI,CAAC,GAAtB,EAA2B,IAA3B;;AACA,cAAE,CAAG,IAAI,CAAC,aAAV,EAAyB;AACvB,YAAA,OAAO,CAAC,IAAR,CAAa,IAAb;AAEA,gBAAI,IAAI,CAAC,KAAL,CAAW,WAAf,EACE,mBAAmB,CAAC,GAApB,CAAwB,IAAI,CAAC,GAA7B;AAEH;;AACD;;AACF,aAAK,MAAL;AACE,UAAA,IAAI,CAAC,IAAL,CAAU,IAAV;AACA;AAAQ;AAhBZ;;AAkBA,WAAK,IAAI,KAAT,IAAkB,IAAI,CAAC,UAAvB,EACE,KAAK,CAAC,KAAD,CAAL;AAEH,KAtBD;;AAwBA,SAAK,IAAI,KAAT,IAAiB,KAAjB,EACE,KAAK,CAAC,KAAD,CAAL;;AAGF,QAAI,UAAU,GAAG,qCAAe,CAAC,YAAD,EAAe,OAAf,CAAhC;AACA,IAAA,UAAU,CAAC,OAAX,CAAkB,CAAE,GAAF,EAAO,CAAP,KAAa,IAAI,CAAC,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkB,GAAlB,CAA/B;AAEA,UAAM;AACJ,MAAA,WAAW,EAAE,OAAO,CAAC,MADjB;AAEJ,MAAA,KAAK,EAAE,IAFH;AAGJ,MAAA,SAAS,EAAE,IAAF,IAAU;AACjB,QAAA,IAAI,CAAC,MAAL,GAAc,OAAO,CAAC,IAAI,CAAC,KAAN,CAArB;AACA,eAAO,IAAP;AACD;AANG,KAAN;AAQA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,mBAAL,GAA2B,mBAA3B;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,UAAL,GAAkB,UAAlB,CArEiG,CAuEjG;;AACA,QAAI,KAAK,mBAAL,CAAyB,IAAzB,KAAkC,CAAtC,EACE,KAAK,mBAAL,CAAyB,GAAzB,CAA6B,KAAK,OAAL,CAAY,CAAC,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,uBAAP,IAAiC,CAAjC,GAAqC,CAAjD,EAAoD,GAAjF;AAEH;;AAjFmD;;ADhHtD,MAAM,6CAAuB,GAAG;AAC9B,EAAA,SAAS,EAAE,YADmB;AAE9B,EAAA,UAAU,EAAE;AAFkB,CAAhC;;SASgB,yC,CAAgC,K,EAA0C;AACxF,MAAG,CAAE,4BAAF,EAAgC,6BAAhC,IAAiE,eAAQ,CAAC,KAAD,CAA5E;AACA,MAAI;AAAC,IAAA,aAAa,GAAG;AAAjB,MAA2B,KAA/B;AAEA,MAAI,OAAO,GAAG,cAAO,CAAA,OAAQ;AAC3B,IAAA,uBAAuB,EAAE,KAAK,CAAC,uBAAN,IAAiC,aAAa,KAAK,MADjD;mBAE3B,aAF2B;AAG3B,IAAA,OAAO,EAAE;AAHkB,GAAR,CAAA,EAIjB,CAAC,KAAK,CAAC,QAAP,EAAiB,KAAK,CAAC,uBAAvB,EAAgD,aAAhD,CAJiB,CAArB;AAMA,MAAI,UAAU,GAAG,oBAAa,CAC5B,KAD4B,EACvB,CACJ,KADI,EACG,IADH,KACY,IAAI,yCAAJ,CAAoB,KAApB,EAA2B,IAA3B,EAAiC,OAAjC,CAFW,EAG5B,OAH4B,CAA9B;AAKA,MAAI;AAAC,IAAA,YAAA,EAAA,YAAD;AAAa,IAAA,gBAAA,EAAE;AAAf,MAAmC,mBAAY,CAAC,E,GAAI,KAAJ;gBAAW;AAAX,GAAD,CAAnD;AAEA,SAAO;gBACL,UADK;kBAEL,YAFK;sBAGL,gBAHK;AAIL,IAAA,uBAAuB,EAAE,KAAK,CAAC,uBAAN,IAAiC,KAJrD;AAKL,IAAA,cAAc,EAAE,KAAK,CAAC,cALjB;AAML,IAAA,4BAA4B,EAAE,UAAU,CAAC,IAAX,KAAoB,CAApB,IAAyB,4BANlD;mCAOL,6BAPK;;AAQL,IAAA,IAAI,CAAC,SAAD,EAAiB,SAAjB,EAAyD;UAGhC,G;AAF3B,MAAA,KAAK,CAAC,YAAN,CAAmB;AACjB,QAAA,MAAM,EAAE,SADS;AAEjB,QAAA,SAAS,EAAE,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAA,SAAA,GAAS,CAAA,CAAK,GAAoB,GAApB,KAAK,CAAC,cAAX,MAAyB,IAAzB,IAAK,GAAoB,KAApB,KAAA,CAAL,GAAK,KAAA,CAAL,GAAK,GAAoB,CAAE,MAA3B,MAAsC,SAAtC,GAChB,6CAAuB,CAAC,KAAK,CAAC,cAAN,CAAqB,SAAtB,CADP,GAEhB;AAJa,OAAnB;AAMD;;AAfI,GAAP;AAiBD;;SEzEQ,iC,CAAe,K,EAA0C;AAChE,SAAO,IAAP;AACD;;AAED,iCAAW,CAAC,iBAAZ,GAAgC,UAAU,iBAAV,CAA+B,KAA/B,EAAiG;AAC/H,MAAI;AAAC,IAAA,QAAA,EAAA,QAAD;AAAS,IAAA,OAAA,EAAE;AAAX,MAAsB,KAA1B;;AACA,MAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,QAAE,CAAG,OAAL,EACE,MAAM,IAAI,KAAJ,CAAU,4DAAV,CAAN;;AAGF,SAAK,IAAI,MAAT,IAAmB,OAAnB,EAA0B,MAClB;AACJ,MAAA,IAAI,EAAE,QADF;AAEJ,MAAA,KAAK,EAAE,MAFH;AAGJ,MAAA,QAAQ,EAAE;AAHN,KADkB;AAO3B,GAZD,MAYO;AACL,QAAI,OAAO,GAAqB,EAAhC;AACA,IAAA,YAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,QAAvB,EAAiC,MAAF,IAAY;AACzC,MAAA,OAAO,CAAC,IAAR,CAAa;AACX,QAAA,IAAI,EAAE,QADK;AAEX,QAAA,OAAO,EAAE;AAFE,OAAb;AAID,KALD;WAOO,O;AACR;AACF,CAzBD;AA2BA;;;AAAA;AAIA;;;AACA,IAAI,yCAAY,GAAG,iCAAnB;;SCpCS,+B,CAAa,K,EAAwC;AAC5D,SAAO,IAAP;AACD;;AAED,+BAAS,CAAC,iBAAV,GAA8B,UAAU,iBAAV,CAA+B,KAA/B,EAAoF;AAChH,MAAI;AAAC,IAAA,QAAA,EAAA,QAAD;AAAS,IAAA,KAAA,EAAE;AAAX,MAAoB,KAAxB;QACM;AACJ,IAAA,IAAI,EAAE,MADF;AAEJ,IAAA,aAAa,EAAE,IAFX;WAGJ,KAHI;;KAIH,U,GAAa;AACZ,UAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,YAAE,CAAG,MAAL,EACE,MAAM,IAAI,KAAJ,CAAU,0DAAV,CAAN;;AAGF,aAAK,IAAI,IAAT,IAAiB,MAAjB,EAAsB,MACd;AACJ,UAAA,IAAI,EAAE,MADF;AAEJ,UAAA,KAAK,EAAE,IAFH;AAGJ,UAAA,QAAQ,EAAE;AAHN,SADc;AAOvB,OAZD,MAYO;AACL,YAAI,KAAK,GAAqB,EAA9B;AACA,QAAA,YAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,QAAvB,EAAiC,IAAF,IAAU;AACvC,UAAA,KAAK,CAAC,IAAN,CAAW;AACT,YAAA,IAAI,EAAE,MADG;AAET,YAAA,OAAO,EAAE;AAFA,WAAX;AAID,SALD;eAOO,K;AACR;AACF;;AA5BG,G;AA8BP,CAhCD;AAkCA;;;AAAA;AAIA;;;AACA,IAAI,yCAAU,GAAG,+BAAjB;;SCzCS,4B,CAAU,K,EAAqC;AACtD,SAAO,IAAP;AACD;;AAED,4BAAM,CAAC,iBAAP,GAA2B,UAAU,iBAAV,CAA+B,KAA/B,EAAsD,QAAtD,EAA4I;AACrK,MAAI;AAAC,IAAA,KAAA,EAAA,KAAD;AAAM,IAAA,QAAA,EAAE,QAAR;AAAgB,IAAA,YAAA,EAAE;AAAlB,MAAkC,KAAtC;AAEA,MAAI,QAAQ,GAAG,KAAK,IAAI,QAAxB;AACA,MAAI,SAAS,GAAG,KAAK,CAAC,SAAN,KAAoB,OAAO,QAAP,KAAoB,QAApB,GAA+B,QAA/B,GAA0C,EAA9D,KAAqE,KAAK,CAAC,YAAD,CAA1F;AAEA,MAAI,SAAS,GAAA,MAAS;AACpB,IAAA,IAAI,EAAE,QADc;AAEpB,IAAA,aAAa,EAAA,CAAA,CAAI,aAAJ,IAAqB,KAAK,IAAI,YAAK,CAAC,QAAN,CAAe,KAAf,CAAqB,QAArB,IAAiC,CAFxD;cAGpB,QAHoB;eAIpB,SAJoB;WAKpB,KALoB;;KAMnB,U,GAAa;AACZ,UAAI,aAAJ,EACE,KAAK,IAAI,MAAT,IAAkB,aAAlB,EAA8B,MACtB;AACJ,QAAA,IAAI,EAAE,QADF;AAEJ,QAAA,KAAK,EAAE;AAFH,OADsB,CADhC,KAOO,IAAI,KAAJ,EAAW;AAChB,YAAI,YAAY,GAAqB,EAArC;AACA,QAAA,YAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,QAAvB,EAAiC,KAAF,IAAW;AACxC,UAAA,YAAY,CAAC,IAAb,CAAkB;AAChB,YAAA,IAAI,EAAE,QADU;AAEhB,YAAA,OAAO,EAAE;AAFO,WAAlB;AAID,SALD;eAOO,Y;AACR;AACF,KAzBmB;;AA0BpB,IAAA,gBAAgB,CAAC,UAAD,EAA0C;AACxD;AACA;AACA;AACA,MAAA,aAAa,CAAC,UAAD,CAAb;AACA,aAAO,KAAP;AACD;;AAhCmB,GAAtB;;AAmCA,MAAI,aAAa,GAAI,OAAJ,IAA6C;AAC5D;AACA,SAAK,IAAI,IAAT,IAAiB,SAAjB,EACE,IAAE,CAAG,IAAI,CAAC,aAAV,EACE,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAqB,IAArB;AAGL,GAPD;;AASA,EAAA,aAAa,CAAC,QAAD,CAAb;AACD,CAnDD;AAqDA;;;;AAAA;AAKA;;;AACA,IAAI,yCAAO,GAAG,4BAAd;;SChES,yB,CAAI,K,EAA+B;AAC1C,SAAO,IAAP;AACD;;AAED,yBAAG,CAAC,iBAAJ,GAAwB,UAAU,iBAAV,CAA+B,KAA/B,EAAgD,OAAhD,EAAiH;AACvI,MAAI;AAAC,IAAA,QAAA,EAAA,QAAD;AAAS,IAAA,SAAA,EAAE;AAAX,MAAwB,KAA5B;QAEM;AACJ,IAAA,IAAI,EAAE,MADF;AAEJ,IAAA,KAAK,EAAE,KAFH;eAGJ,SAHI;AAIJ,kBAAc,KAAK,CAAC,YAAD,CAJf;AAKJ,IAAA,aAAa,EAAE,IALX;;KAMH,U,GAAa;AACZ;AACA,UAAI,OAAO,CAAC,uBAAR,IAAmC,OAAO,CAAC,aAAR,KAA0B,MAAjE,EAAuE,MAC/D;AACJ,QAAA,IAAI,EAAE,MADF;AAEJ,QAAA,GAAG,EAAE,QAFD;AAGJ,QAAA,KAAK,EAAE;AACL,UAAA,eAAe,EAAE;AADZ;AAHH,OAD+D;AAUvE,UAAI,OAAO,QAAP,KAAoB,UAAxB,EACE,KAAK,IAAI,MAAT,IAAmB,OAAO,CAAC,OAA3B,EAAkC,MAC1B;AACJ,QAAA,IAAI,EAAE,MADF;AAEJ,QAAA,OAAO,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAR,CAFb;AAGJ,QAAA,GAAG,EAAE,MAAM,CAAC,GAHR,CAGY;;AAHZ,OAD0B,CADpC,KAQO;AACL,YAAI,KAAK,GAAqB,EAA9B;AACA,QAAA,YAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,QAAvB,EAAiC,IAAF,IAAU;AACvC,UAAA,KAAK,CAAC,IAAN,CAAW;AACT,YAAA,IAAI,EAAE,MADG;AAET,YAAA,OAAO,EAAE;AAFA,WAAX;AAID,SALD;AAOA,YAAI,KAAK,CAAC,MAAN,KAAiB,OAAO,CAAC,OAAR,CAAgB,MAArC,EACE,MAAM,IAAI,KAAJ,CAAW,6CAA4C,KAAK,CAAC,MAAO,cAAa,OAAO,CAAC,OAAR,CAAgB,MAAO,WAAxG,CAAN;eAGK,K;AACR;AACF,KAzCG;;AA0CJ,IAAA,gBAAgB,CAAC,UAAD,EAA0C;AACxD;AACA,aAAO,UAAU,CAAC,OAAX,CAAmB,MAAnB,KAA8B,OAAO,CAAC,OAAR,CAAgB,MAA9C,IACL,UAAU,CAAC,OAAX,CAAmB,IAAnB,CAAuB,CAAE,CAAF,EAAK,CAAL,KAAW,CAAC,CAAC,GAAF,KAAU,OAAO,CAAC,OAAR,CAAgB,CAAhB,EAAmB,GAA/D,CADK,IAEL,UAAU,CAAC,uBAAX,KAAuC,OAAO,CAAC,uBAF1C,IAGL,UAAU,CAAC,aAAX,KAA6B,OAAO,CAAC,aAHvC;AAID;;AAhDG,G;AAkDP,CArDD;AAuDA;;;;AAAA;AAKA;;;AACA,IAAI,yCAAI,GAAG,yBAAX;;SClES,0B,CAAK,K,EAAgC;AAC5C,SAAO,IAAP;AACD;;AAED,0BAAI,CAAC,iBAAL,GAAyB,UAAU,iBAAV,CAA+B,KAA/B,EAA4E;AACnG,MAAI;AAAC,IAAA,QAAA,EAAA;AAAD,MAAa,KAAjB;AAEA,MAAI,SAAS,GAAG,KAAK,CAAC,SAAN,KAAoB,OAAO,QAAP,KAAoB,QAApB,GAA+B,QAA/B,GAA0C,EAA9D,KAAqE,KAAK,CAAC,YAAD,CAA1E,IAA4F,EAA5G;QACM;AACJ,IAAA,IAAI,EAAE,MADF;AAEJ,IAAA,KAAK,EAAE,KAFH;AAGJ,IAAA,QAAQ,EAAE,QAHN;eAIJ,SAJI;AAKJ,kBAAc,KAAK,CAAC,YAAD,CALf;AAMJ,IAAA,aAAa,EAAE;AANX,G;AAQP,CAZD;AAcA;;AAAA;AAGA;;;AACA,IAAI,yCAAK,GAAG,0BAAZ","sourcesContent":["\nimport {ColumnProps} from '@react-types/table';\nimport {getContentWidth, getDynamicColumnWidths, getMaxWidth, getMinWidth, isStatic, parseStaticWidth} from './utils';\nimport {GridNode} from '@react-types/grid';\nimport {Key, MutableRefObject, useCallback, useRef, useState} from 'react';\n\ninterface AffectedColumnWidth {\n  /** The column key. */\n  key: Key,\n  /** The column width. */\n  width: number\n}\ninterface AffectedColumnWidths extends Array<AffectedColumnWidth> {}\n\nexport interface TableColumnResizeState<T> {\n  /** A ref whose current value is the state of all the column widths. */\n  columnWidths: MutableRefObject<Map<Key, number>>,\n  /** Setter for the table width. */\n  setTableWidth: (width: number) => void,\n  /** Trigger a resize and recalculation. */\n  onColumnResize: (column: GridNode<T>, width: number) => void,\n  /** Callback for when onColumnResize has started. */\n  onColumnResizeStart: (column: GridNode<T>) => void,\n  /** Callback for when onColumnResize has ended. */\n  onColumnResizeEnd: (column: GridNode<T>) => void,\n  /** Getter for column width. */\n  getColumnWidth: (key: Key) => number,\n  /** Getter for column min width. */\n  getColumnMinWidth: (key: Key) => number,\n  /** Getter for column max widths. */\n  getColumnMaxWidth: (key: Key) => number,\n  /** Key of column currently being resized. */\n  currentlyResizingColumn: Key | null\n}\n\nexport interface TableColumnResizeStateProps {\n  /** Callback to determine what the default width of a column should be. */\n  getDefaultWidth?: (props) => string | number,\n  /** Callback that is invoked during the entirety of the resize event. */\n  onColumnResize?: (affectedColumnWidths: AffectedColumnWidths) => void,\n  /** Callback that is invoked when the resize event is ended. */\n  onColumnResizeEnd?: (affectedColumnWidths: AffectedColumnWidths) => void,\n  /** The default table width. */\n  tableWidth?: number\n}\n\ninterface ColumnState<T> {\n  columns: GridNode<T>[]\n}\n\nexport function useTableColumnResizeState<T>(props: TableColumnResizeStateProps, state: ColumnState<T>): TableColumnResizeState<T> {\n  const {getDefaultWidth, tableWidth: defaultTableWidth = null} = props;\n  const {columns} = state;\n  const columnsRef = useRef<GridNode<T>[]>([]);\n  const tableWidth = useRef<number>(defaultTableWidth);\n  const isResizing = useRef<boolean>(null);\n  const startResizeContentWidth = useRef<number>();\n\n  const [columnWidths, setColumnWidths] = useState<Map<Key, number>>(new Map(columns.map(col => [col.key, 0])));\n  const columnWidthsRef = useRef<Map<Key, number>>(columnWidths);\n  const affectedColumnWidthsRef = useRef<AffectedColumnWidths>([]);\n  const [resizedColumns, setResizedColumns] = useState<Set<Key>>(new Set());\n  const resizedColumnsRef = useRef<Set<Key>>(resizedColumns);\n\n  const [currentlyResizingColumn, setCurrentlyResizingColumn] = useState<Key>(null);\n\n  function setColumnWidthsForRef(newWidths: Map<Key, number>) {\n    columnWidthsRef.current = newWidths;\n    // new map so that change detection is triggered\n    setColumnWidths(newWidths);\n  }\n  /*\n    returns the resolved column width in this order:\n    previously calculated width -> controlled width prop -> uncontrolled defaultWidth prop -> dev assigned width -> default dynamic width\n  */\n  let getResolvedColumnWidth = useCallback((column: GridNode<T>): (number | string) => {\n    let columnProps = column.props as ColumnProps<T>;\n    return resizedColumns?.has(column.key) ? columnWidthsRef.current.get(column.key) : columnProps.width ?? columnProps.defaultWidth ?? getDefaultWidth?.(column.props) ?? '1fr';\n  }, [getDefaultWidth, resizedColumns]);\n\n  let getStaticAndDynamicColumns = useCallback((columns: GridNode<T>[]) : { staticColumns: GridNode<T>[], dynamicColumns: GridNode<T>[] } => columns.reduce((acc, column) => {\n    let width = getResolvedColumnWidth(column);\n    return isStatic(width) ? {...acc, staticColumns: [...acc.staticColumns, column]} : {...acc, dynamicColumns: [...acc.dynamicColumns, column]};\n  }, {staticColumns: [], dynamicColumns: []}), [getResolvedColumnWidth]);\n\n  let buildColumnWidths = useCallback((affectedColumns: GridNode<T>[], availableSpace: number): Map<Key, number> => {\n    const widths = new Map<Key, number>();\n    let remainingSpace = availableSpace;\n\n    const {staticColumns, dynamicColumns} = getStaticAndDynamicColumns(affectedColumns);\n\n    staticColumns.forEach(column => {\n      let width = getResolvedColumnWidth(column);\n      let w = parseStaticWidth(width, tableWidth.current);\n      widths.set(column.key, w);\n      remainingSpace -= w;\n    });\n\n    // dynamic columns\n    if (dynamicColumns.length > 0) {\n      const newColumnWidths = getDynamicColumnWidths(dynamicColumns, remainingSpace, tableWidth.current);\n      for (let column of newColumnWidths) {\n        widths.set(column.key, column.calculatedWidth);\n      }\n    }\n\n    return widths;\n  }, [getStaticAndDynamicColumns, getResolvedColumnWidth]);\n\n\n  const prevColKeys = columnsRef.current.map(col => col.key);\n  const colKeys = columns.map(col => col.key);\n  // if the columns change, need to rebuild widths.\n  if (prevColKeys.length !== colKeys.length || !colKeys.every((col, i) => col === prevColKeys[i])) {\n    columnsRef.current = columns;\n    const widths = buildColumnWidths(columns, tableWidth.current);\n    setColumnWidthsForRef(widths);\n  }\n\n  function setTableWidth(width: number) {\n    if (width && width !== tableWidth.current) {\n      tableWidth.current = width;\n      if (!isResizing.current) {\n        const widths = buildColumnWidths(columns, width);\n        setColumnWidthsForRef(widths);\n      }\n    }\n  }\n\n  function onColumnResizeStart(column: GridNode<T>) {\n    setCurrentlyResizingColumn(column.key);\n    isResizing.current = true;\n    startResizeContentWidth.current = getContentWidth(columnWidthsRef.current);\n  }\n\n  function onColumnResize(column: GridNode<T>, width: number) {\n    let widthsObj = resizeColumn(column, width);\n    affectedColumnWidthsRef.current = widthsObj;\n    props.onColumnResize && props.onColumnResize(affectedColumnWidthsRef.current);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  function onColumnResizeEnd(column: GridNode<T>) {\n    props.onColumnResizeEnd && isResizing.current && props.onColumnResizeEnd(affectedColumnWidthsRef.current);\n    setCurrentlyResizingColumn(null);\n    isResizing.current = false;\n    affectedColumnWidthsRef.current = [];\n\n    let widths = new Map<Key, number>(columnWidthsRef.current);\n    setColumnWidthsForRef(widths);\n  }\n\n  function resizeColumn(column: GridNode<T>, newWidth: number) : AffectedColumnWidths {\n    let boundedWidth =  Math.max(\n      getMinWidth(column.props.minWidth, tableWidth.current),\n      Math.min(Math.floor(newWidth), getMaxWidth(column.props.maxWidth, tableWidth.current)));\n\n    // copy the columnWidths map and set the new width for the column being resized\n    let widths = new Map<Key, number>(columnWidthsRef.current);\n    widths.set(column.key, boundedWidth);\n\n    // keep track of all columns that have been sized\n    resizedColumnsRef.current.add(column.key);\n    setResizedColumns(resizedColumnsRef.current);\n\n    // get the columns affected by resize and remaining space\n    const resizeIndex = columnsRef.current.findIndex(col => col.key === column.key);\n    let affectedColumns = columnsRef.current.slice(resizeIndex + 1);\n\n    // we only care about the columns that CAN be resized, we ignore static columns.\n    let {dynamicColumns} = getStaticAndDynamicColumns(affectedColumns);\n\n    // available space for affected columns\n    let availableSpace = columnsRef.current.reduce((acc, column, index) => {\n      if (index <= resizeIndex || isStatic(getResolvedColumnWidth(column))) {\n        return acc - widths.get(column.key);\n      }\n      return acc;\n    }, tableWidth.current);\n\n    // merge the unaffected column widths and the recalculated column widths\n    let recalculatedColumnWidths = buildColumnWidths(dynamicColumns, availableSpace);\n    widths = new Map<Key, number>([...widths, ...recalculatedColumnWidths]);\n\n    setColumnWidthsForRef(widths);\n\n    /*\n     when getting recalculated columns above, the column being resized is not considered \"recalculated\"\n     so we need to add it to the list of affected columns\n    */\n    let allAffectedColumns = ([[column.key, boundedWidth], ...recalculatedColumnWidths] as [Key, number][]).map(([key, width]) => ({key, width}));\n    return allAffectedColumns;\n  }\n\n  // This function is regenerated whenever columnWidthsRef.current changes in order to get the new correct ref value.\n  let getColumnWidth = useCallback((key: Key): number => columnWidthsRef.current.get(key) ?? 0, [columnWidthsRef.current]);\n\n  let getColumnMinWidth = useCallback((key: Key) => {\n    const columnIndex = columns.findIndex(col => col.key === key);\n    if (columnIndex === -1) {\n      return;\n    }\n    return getMinWidth(columns[columnIndex].props.minWidth, tableWidth.current);\n  }, [columns]);\n\n  let getColumnMaxWidth = useCallback((key: Key) => {\n    const columnIndex = columns.findIndex(col => col.key === key);\n    if (columnIndex === -1) {\n      return;\n    }\n    return getMaxWidth(columns[columnIndex].props.maxWidth, tableWidth.current);\n  }, [columns]);\n\n  return {\n    columnWidths: columnWidthsRef,\n    setTableWidth,\n    onColumnResize,\n    onColumnResizeStart,\n    onColumnResizeEnd,\n    getColumnWidth,\n    getColumnMinWidth,\n    getColumnMaxWidth,\n    currentlyResizingColumn\n  };\n}\n","import {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\n\ntype mappedColumn<T> = GridNode<T> & {\n    index: number,\n    delta: number,\n    calculatedWidth?: number\n};\n\nexport function getContentWidth(widths: Map<Key, number>): number {\n  return Array.from(widths).map(e => e[1]).reduce((acc, cur) => acc + cur, 0);\n}\n\n// numbers and percents are considered static. *fr units or a lack of units are considered dynamic.\nexport function isStatic(width: number | string): boolean {\n  return width != null && (!isNaN(width as number) || (String(width)).match(/^(\\d+)(?=%$)/) !== null);\n}\n\nfunction parseFractionalUnit(width: string): number {\n  if (!width) {\n    return 1;\n  }\n  let match = width.match(/^(\\d+)(?=fr$)/);\n      // if width is the incorrect format, just deafult it to a 1fr\n  if (!match) {\n    console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`,\n        'defaulting to \\'1fr\\'');\n    return 1;\n  }\n  return parseInt(match[0], 10);\n}\n\nexport function parseStaticWidth(width: number | string, tableWidth: number): number {\n  if (typeof width === 'string') {\n    let match = width.match(/^(\\d+)(?=%$)/);\n    if (!match) {\n      throw new Error('Only percentages or numbers are supported for static column widths');\n    }\n    return tableWidth * (parseInt(match[0], 10) / 100);\n  }\n  return width;\n}\n\n\nexport function getMaxWidth(maxWidth: number | string, tableWidth: number): number {\n  return maxWidth != null\n        ? parseStaticWidth(maxWidth, tableWidth)\n        : Number.MAX_SAFE_INTEGER;\n}\n\nexport function getMinWidth(minWidth: number | string, tableWidth: number): number {\n  return minWidth != null\n      ? parseStaticWidth(minWidth, tableWidth)\n      : 75;\n}\n\nfunction mapDynamicColumns<T>(dynamicColumns: GridNode<T>[], availableSpace: number, tableWidth: number): mappedColumn<T>[] {\n  let fractions = dynamicColumns.reduce(\n        (sum, column) => sum + parseFractionalUnit(column.props.defaultWidth),\n        0\n      );\n\n  let columns = dynamicColumns.map((column, index) => {\n    const targetWidth =\n          (parseFractionalUnit(column.props.defaultWidth) * availableSpace) / fractions;\n    const delta = Math.max(\n      getMinWidth(column.props.minWidth, tableWidth) - targetWidth,\n      targetWidth - getMaxWidth(column.props.maxWidth, tableWidth)\n    );\n\n    return {\n      ...column,\n      index,\n      delta\n    };\n  });\n\n  return columns;\n}\n\nfunction findDynamicColumnWidths<T>(dynamicColumns: mappedColumn<T>[], availableSpace: number, tableWidth: number): mappedColumn<T>[] {\n  let fractions = dynamicColumns.reduce(\n    (sum, col) => sum + parseFractionalUnit(col.props.defaultWidth),\n    0\n  );\n\n  const columns = dynamicColumns.map((column) => {\n    const targetWidth =\n      (parseFractionalUnit(column.props.defaultWidth) * availableSpace) / fractions;\n    let width = Math.max(\n      getMinWidth(column.props.minWidth, tableWidth),\n      Math.min(Math.floor(targetWidth), getMaxWidth(column.props.maxWidth, tableWidth))\n    );\n    column.calculatedWidth = width;\n    availableSpace -= width;\n    fractions -= parseFractionalUnit(column.props.defaultWidth);\n    return column;\n  });\n\n  return columns;\n}\n\nexport function getDynamicColumnWidths<T>(dynamicColumns: GridNode<T>[], availableSpace: number, tableWidth: number) {\n  let columns = mapDynamicColumns(dynamicColumns, availableSpace, tableWidth);\n\n  columns.sort((a, b) => b.delta - a.delta);\n  columns = findDynamicColumnWidths(columns, availableSpace, tableWidth);\n  columns.sort((a, b) => a.index - b.index);\n\n  return columns;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, Node, SelectionMode, Sortable, SortDescriptor, SortDirection} from '@react-types/shared';\nimport {GridState, useGridState} from '@react-stately/grid';\nimport {TableCollection as ITableCollection} from '@react-types/table';\nimport {Key, useMemo, useState} from 'react';\nimport {MultipleSelectionStateProps} from '@react-stately/selection';\nimport {TableCollection} from './TableCollection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface TableState<T> extends GridState<T, ITableCollection<T>> {\n  /** A collection of rows and columns in the table. */\n  collection: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes: boolean,\n  /** The current sorted column and direction. */\n  sortDescriptor: SortDescriptor,\n  /** Calls the provided onSortChange handler with the provided column key and sort direction. */\n  sort(columnKey: Key, direction?: 'ascending' | 'descending'): void,\n  /** Whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  isKeyboardNavigationDisabled: boolean,\n  /** Set whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  setKeyboardNavigationDisabled: (val: boolean) => void\n}\n\nexport interface CollectionBuilderContext<T> {\n  showSelectionCheckboxes: boolean,\n  selectionMode: SelectionMode,\n  columns: Node<T>[]\n}\n\nexport interface TableStateProps<T> extends CollectionBase<T>, MultipleSelectionStateProps, Sortable {\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes?: boolean\n}\n\nconst OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending' as SortDirection,\n  descending: 'ascending' as SortDirection\n};\n\n/**\n * Provides state management for a table component. Handles building a collection\n * of columns and rows from props. In addition, it tracks row selection and manages sort order changes.\n */\nexport function useTableState<T extends object>(props: TableStateProps<T>): TableState<T> {\n  let [isKeyboardNavigationDisabled, setKeyboardNavigationDisabled] = useState(false);\n  let {selectionMode = 'none'} = props;\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n    selectionMode,\n    columns: []\n  }), [props.children, props.showSelectionCheckboxes, selectionMode]);\n\n  let collection = useCollection<T, TableCollection<T>>(\n    props,\n    (nodes, prev) => new TableCollection(nodes, prev, context),\n    context\n  );\n  let {disabledKeys, selectionManager} = useGridState({...props, collection});\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,\n    setKeyboardNavigationDisabled,\n    sort(columnKey: Key, direction?: 'ascending' | 'descending') {\n      props.onSortChange({\n        column: columnKey,\n        direction: direction ?? (props.sortDescriptor?.column === columnKey\n          ? OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction]\n          : 'ascending')\n      });\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridCollection} from '@react-stately/grid';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\n\ninterface GridCollectionOptions {\n  showSelectionCheckboxes?: boolean\n}\n\nconst ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n\nfunction buildHeaderRows<T>(keyMap: Map<Key, GridNode<T>>, columnNodes: GridNode<T>[]): GridNode<T>[] {\n  let columns: GridNode<T>[][] = [];\n  let seen = new Map();\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent: GridNode<T> = keyMap.get(parentKey);\n\n      // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n      if (seen.has(parent)) {\n        parent.colspan++;\n\n        let {column, index} = seen.get(parent);\n        if (index > col.length) {\n          break;\n        }\n\n        for (let i = index; i < col.length; i++) {\n          column.splice(i, 0, null);\n        }\n\n        // Adjust shifted indices\n        for (let i = col.length; i < column.length; i++) {\n          if (column[i] && seen.has(column[i])) {\n            seen.get(column[i]).index = i;\n          }\n        }\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {column: col, index: col.length - 1});\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []);\n\n  // Convert columns into rows.\n  let colIndex = 0;\n  for (let column of columns) {\n    let i = maxLength - 1;\n    for (let item of column) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n        if (rowLength < colIndex) {\n          let placeholder: GridNode<T> = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.colIndex = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  }\n\n  // Add placeholders at the end of each row that is shorter than the maximum\n  let i = 0;\n  for (let row of headerRows) {\n    let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n    if (rowLength < columnNodes.length) {\n      let placeholder: GridNode<T> = {\n        type: 'placeholder',\n        key: 'placeholder-' + row[row.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row[row.length - 1].key\n      };\n\n      row.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row: GridNode<T> = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes,\n      textValue: null\n    };\n\n    return row;\n  });\n}\n\nexport class TableCollection<T> extends GridCollection<T> {\n  headerRows: GridNode<T>[];\n  columns: GridNode<T>[];\n  rowHeaderColumnKeys: Set<Key>;\n  body: GridNode<T>;\n\n  constructor(nodes: Iterable<GridNode<T>>, prev?: TableCollection<T>, opts?: GridCollectionOptions) {\n    let rowHeaderColumnKeys: Set<Key> = new Set();\n    let body: GridNode<T>;\n    let columns = [];\n\n    // Add cell for selection checkboxes if needed.\n    if (opts?.showSelectionCheckboxes) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n    let visit = (node: GridNode<T>) => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n\n            if (node.props.isRowHeader) {\n              rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n        case 'item':\n          rows.push(node);\n          return; // do not go into childNodes\n      }\n      for (let child of node.childNodes) {\n        visit(child);\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let headerRows = buildHeaderRows(columnKeyMap, columns) as GridNode<T>[];\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows;\n\n    // Default row header column to the first one.\n    if (this.rowHeaderColumnKeys.size === 0) {\n      this.rowHeaderColumnKeys.add(this.columns[opts?.showSelectionCheckboxes ? 1 : 0].key);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return [...this.body.childNodes].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.body.childNodes][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.body.childNodes];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableHeaderProps} from '@react-types/table';\n\nfunction TableHeader<T>(props: TableHeaderProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableHeader.getCollectionNode = function* getCollectionNode<T>(props: TableHeaderProps<T>): Generator<PartialNode<T>, void, any> {\n  let {children, columns} = props;\n  if (typeof children === 'function') {\n    if (!columns) {\n      throw new Error('props.children was a function but props.columns is missing');\n    }\n\n    for (let column of columns) {\n      yield {\n        type: 'column',\n        value: column,\n        renderer: children\n      };\n    }\n  } else {\n    let columns: PartialNode<T>[] = [];\n    React.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n\n    yield* columns;\n  }\n};\n\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableHeader = TableHeader as <T>(props: TableHeaderProps<T>) => JSX.Element;\nexport {_TableHeader as TableHeader};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableBodyProps} from '@react-types/table';\n\nfunction TableBody<T>(props: TableBodyProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableBody.getCollectionNode = function* getCollectionNode<T>(props: TableBodyProps<T>): Generator<PartialNode<T>> {\n  let {children, items} = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props,\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items) {\n          throw new Error('props.children was a function but props.items is missing');\n        }\n\n        for (let item of items) {\n          yield {\n            type: 'item',\n            value: item,\n            renderer: children\n          };\n        }\n      } else {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableBody = TableBody as <T>(props: TableBodyProps<T>) => JSX.Element;\nexport {_TableBody as TableBody};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {ColumnProps} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\n\nfunction Column<T>(props: ColumnProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nColumn.getCollectionNode = function* getCollectionNode<T>(props: ColumnProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, GridNode<T>[]> {\n  let {title, children, childColumns} = props;\n\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns || (title && React.Children.count(children) > 0),\n    rendered,\n    textValue,\n    props,\n    *childNodes() {\n      if (childColumns) {\n        for (let child of childColumns) {\n          yield {\n            type: 'column',\n            value: child\n          };\n        }\n      } else if (title) {\n        let childColumns: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child as ReactElement<ColumnProps<T>>\n          });\n        });\n\n        yield* childColumns;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n  };\n\n  let updateContext = (context: CollectionBuilderContext<T>) => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) {\n      if (!node.hasChildNodes) {\n        context.columns.push(node);\n      }\n    }\n  };\n\n  updateContext(context);\n};\n\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Column = Column as <T>(props: ColumnProps<T>) => JSX.Element;\nexport {_Column as Column};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {RowProps} from '@react-types/table';\n\nfunction Row(props: RowProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nRow.getCollectionNode = function* getCollectionNode<T>(props: RowProps, context: CollectionBuilderContext<T>): Generator<PartialNode<T>> {\n  let {children, textValue} = props;\n\n  yield {\n    type: 'item',\n    props: props,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') {\n        yield {\n          type: 'cell',\n          key: 'header', // this is combined with the row key by CollectionBuilder\n          props: {\n            isSelectionCell: true\n          }\n        };\n      }\n\n      if (typeof children === 'function') {\n        for (let column of context.columns) {\n          yield {\n            type: 'cell',\n            element: children(column.key),\n            key: column.key // this is combined with the row key by CollectionBuilder\n          };\n        }\n      } else {\n        let cells: PartialNode<T>[] = [];\n        React.Children.forEach(children, cell => {\n          cells.push({\n            type: 'cell',\n            element: cell\n          });\n        });\n\n        if (cells.length !== context.columns.length) {\n          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        }\n\n        yield* cells;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length ||\n        newContext.columns.some((c, i) => c.key !== context.columns[i].key) ||\n        newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes ||\n        newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Row = Row as (props: RowProps) => JSX.Element;\nexport {_Row as Row};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CellProps} from '@react-types/table';\nimport {PartialNode} from '@react-stately/collections';\nimport {ReactElement} from 'react';\n\nfunction Cell(props: CellProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nCell.getCollectionNode = function* getCollectionNode<T>(props: CellProps): Generator<PartialNode<T>> {\n  let {children} = props;\n\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Cell = Cell as (props: CellProps) => JSX.Element;\nexport {_Cell as Cell};\n"]},"metadata":{},"sourceType":"module"}