{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\nlet $488c6ddbf4ef74c2$var$formatterCache = new Map();\nlet $488c6ddbf4ef74c2$var$supportsSignDisplay = false;\n\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat(\"de-DE\", {\n    signDisplay: \"exceptZero\"\n  }).resolvedOptions().signDisplay === \"exceptZero\"; // eslint-disable-next-line no-empty\n} catch (e) {}\n\nlet $488c6ddbf4ef74c2$var$supportsUnit = false;\n\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat(\"de-DE\", {\n    style: \"unit\",\n    unit: \"degree\"\n  }).resolvedOptions().style === \"unit\"; // eslint-disable-next-line no-empty\n} catch (e1) {} // Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\n\n\nconst $488c6ddbf4ef74c2$var$UNITS = {\n  degree: {\n    narrow: {\n      default: \"\\xb0\",\n      \"ja-JP\": \" 度\",\n      \"zh-TW\": \"度\",\n      \"sl-SI\": \" \\xb0\"\n    }\n  }\n};\n\nclass $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 {\n  /** Formats a number value as a string, according to the locale and options provided to the constructor. */\n  format(value) {\n    let res = \"\";\n    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);else res = this.numberFormatter.format(value);\n\n    if (this.options.style === \"unit\" && !$488c6ddbf4ef74c2$var$supportsUnit) {\n      var _UNITS_unit;\n\n      let {\n        unit: unit,\n        unitDisplay = \"short\",\n        locale: locale\n      } = this.resolvedOptions();\n      let values = (_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay];\n      res += values[locale] || values.default;\n    }\n\n    return res;\n  }\n  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n\n\n  formatToParts(value) {\n    // TODO: implement signDisplay for formatToParts\n    // @ts-ignore\n    return this.numberFormatter.formatToParts(value);\n  }\n  /** Formats a number range as a string. */\n\n\n  formatRange(start, end) {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRange === \"function\") // @ts-ignore\n      return this.numberFormatter.formatRange(start, end);\n    if (end < start) throw new RangeError(\"End date must be >= start date\"); // Very basic fallback for old browsers.\n\n    return `${this.format(start)} – ${this.format(end)}`;\n  }\n  /** Formats a number range as an array of parts. */\n\n\n  formatRangeToParts(start, end) {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRangeToParts === \"function\") // @ts-ignore\n      return this.numberFormatter.formatRangeToParts(start, end);\n    if (end < start) throw new RangeError(\"End date must be >= start date\");\n    let startParts = this.numberFormatter.formatToParts(start);\n    let endParts = this.numberFormatter.formatToParts(end);\n    return [...startParts.map(p => ({ ...p,\n      source: \"startRange\"\n    })), {\n      type: \"literal\",\n      value: \" – \",\n      source: \"shared\"\n    }, ...endParts.map(p => ({ ...p,\n      source: \"endRange\"\n    }))];\n  }\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n\n\n  resolvedOptions() {\n    let options = this.numberFormatter.resolvedOptions();\n    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) options = { ...options,\n      signDisplay: this.options.signDisplay\n    };\n    if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === \"unit\") options = { ...options,\n      style: \"unit\",\n      unit: this.options.unit,\n      unitDisplay: this.options.unitDisplay\n    };\n    return options;\n  }\n\n  constructor(locale, options = {}) {\n    this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n\n}\n\nfunction $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options = {}) {\n  let {\n    numberingSystem: numberingSystem\n  } = options;\n  if (numberingSystem && locale.indexOf(\"-u-nu-\") === -1) locale = `${locale}-u-nu-${numberingSystem}`;\n\n  if (options.style === \"unit\" && !$488c6ddbf4ef74c2$var$supportsUnit) {\n    var _UNITS_unit;\n\n    let {\n      unit: unit,\n      unitDisplay = \"short\"\n    } = options;\n    if (!unit) throw new Error('unit option must be provided with style: \"unit\"');\n    if (!((_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay])) throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n    options = { ...options,\n      style: \"decimal\"\n    };\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : \"\");\n  if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey)) return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nfunction $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {\n  if (signDisplay === \"auto\") return numberFormat.format(num);else if (signDisplay === \"never\") return numberFormat.format(Math.abs(num));else {\n    let needsPositiveSign = false;\n    if (signDisplay === \"always\") needsPositiveSign = num > 0 || Object.is(num, 0);else if (signDisplay === \"exceptZero\") {\n      if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);else needsPositiveSign = num > 0;\n    }\n\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num); // ignore RTL/LTR marker character\n\n      let minus = negative.replace(noSign, \"\").replace(/\\u200e|\\u061C/, \"\");\n      if ([...minus].length !== 1) console.warn(\"@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case\");\n      let positive = negative.replace(noSign, \"!!!\").replace(minus, \"+\").replace(\"!!!\", noSign);\n      return positive;\n    } else return numberFormat.format(num);\n  }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nconst $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp(\"^.*\\\\(.*\\\\).*$\");\nconst $6c7bd7858deea686$var$NUMBERING_SYSTEMS = [\"latn\", \"arab\", \"hanidec\"];\n\nclass $6c7bd7858deea686$export$cd11ab140839f11d {\n  /**\n  * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n  */\n  parse(value) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n  /**\n  * Returns whether the given string could potentially be a valid number. This should be used to\n  * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n  * of the minus/plus sign characters can be checked.\n  */\n\n\n  isValidPartialNumber(value, minValue, maxValue) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n  /**\n  * Returns a numbering system for which the given string is valid in the current locale.\n  * If no numbering system could be detected, the default numbering system for the current\n  * locale is returned.\n  */\n\n\n  getNumberingSystem(value) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n\n  constructor(locale, options = {}) {\n    this.locale = locale;\n    this.options = options;\n  }\n\n}\n\nconst $6c7bd7858deea686$var$numberParserCache = new Map();\n\nfunction $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options); // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n\n  if (!locale.includes(\"-nu-\") && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of $6c7bd7858deea686$var$NUMBERING_SYSTEMS) if (numberingSystem !== defaultParser.options.numberingSystem) {\n      let parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes(\"-u-\") ? \"-nu-\" : \"-u-nu-\") + numberingSystem, options);\n      if (parser.isValidPartialNumber(value)) return parser;\n    }\n  }\n\n  return defaultParser;\n}\n\nfunction $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : \"\");\n  let parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);\n\n  if (!parser) {\n    parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);\n    $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);\n  }\n\n  return parser;\n} // The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\n\n\nclass $6c7bd7858deea686$var$NumberParserImpl {\n  parse(value) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value); // Remove group characters, and replace decimal points and numerals with ASCII values.\n\n    fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, \"\").replace(this.symbols.decimal, \".\").replace(this.symbols.minusSign, \"-\").replace(this.symbols.numeral, this.symbols.index);\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) return NaN; // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n\n    if (this.options.currencySign === \"accounting\" && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue; // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n\n    if (this.options.style === \"percent\") {\n      newValue /= 100;\n\n      var _this_options_maximumFractionDigits; // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n\n\n      newValue = +newValue.toFixed(((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) + 2);\n    }\n\n    return newValue;\n  }\n\n  sanitize(value) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, \"\"); // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n\n    value = value.replace(\"-\", this.symbols.minusSign); // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n\n    if (this.options.numberingSystem === \"arab\") {\n      value = value.replace(\",\", this.symbols.decimal);\n      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      value = $6c7bd7858deea686$var$replaceAll(value, \".\", this.symbols.group);\n    } // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n\n\n    if (this.options.locale === \"fr-FR\") value = $6c7bd7858deea686$var$replaceAll(value, \".\", String.fromCharCode(8239));\n    return value;\n  }\n\n  isValidPartialNumber(value, minValue = -Infinity, maxValue = Infinity) {\n    value = this.sanitize(value); // Remove minus or plus sign, which must be at the start of the string.\n\n    if (value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length); // Numbers cannot start with a group separator\n\n    if (value.startsWith(this.symbols.group)) return false; // Remove numerals, groups, and decimals\n\n    value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, \"\").replace(this.symbols.numeral, \"\").replace(this.symbols.decimal, \"\"); // The number is valid if there are no remaining characters\n\n    return value.length === 0;\n  }\n\n  constructor(locale, options = {}) {\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = $6c7bd7858deea686$var$getSymbols(this.formatter, this.options, options);\n  }\n\n}\n\nconst $6c7bd7858deea686$var$nonLiteralParts = new Set([\"decimal\", \"fraction\", \"integer\", \"minusSign\", \"plusSign\", \"group\"]);\n\nfunction $6c7bd7858deea686$var$getSymbols(formatter, intlOptions, originalOptions) {\n  var _allParts_find, _posAllParts_find, _allParts_find1, _allParts_find2; // Note: some locale's don't add a group symbol until there is a ten thousands place\n\n\n  let allParts = formatter.formatToParts(-10000.111);\n  let posAllParts = formatter.formatToParts(10000.111);\n  let singularParts = formatter.formatToParts(1);\n\n  var _allParts_find_value;\n\n  let minusSign = (_allParts_find_value = (_allParts_find = allParts.find(p => p.type === \"minusSign\")) === null || _allParts_find === void 0 ? void 0 : _allParts_find.value) !== null && _allParts_find_value !== void 0 ? _allParts_find_value : \"-\";\n  let plusSign = (_posAllParts_find = posAllParts.find(p => p.type === \"plusSign\")) === null || _posAllParts_find === void 0 ? void 0 : _posAllParts_find.value; // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n\n  if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === \"exceptZero\" || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === \"always\")) plusSign = \"+\";\n  let decimal = (_allParts_find1 = allParts.find(p => p.type === \"decimal\")) === null || _allParts_find1 === void 0 ? void 0 : _allParts_find1.value;\n  let group = (_allParts_find2 = allParts.find(p => p.type === \"group\")) === null || _allParts_find2 === void 0 ? void 0 : _allParts_find2.value; // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n\n  let pluralLiterals = allParts.filter(p => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map(p => $6c7bd7858deea686$var$escapeRegex(p.value));\n  let singularLiterals = singularParts.filter(p => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map(p => $6c7bd7858deea686$var$escapeRegex(p.value));\n  let sortedLiterals = [...new Set([...singularLiterals, ...pluralLiterals])].sort((a, b) => b.length - a.length);\n  let literals = sortedLiterals.length === 0 ? new RegExp(\"[\\\\p{White_Space}]\", \"gu\") : new RegExp(`${sortedLiterals.join(\"|\")}|[\\\\p{White_Space}]`, \"gu\"); // These are for replacing non-latn characters with the latn equivalent\n\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {\n    useGrouping: false\n  }).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(`[${numerals.join(\"\")}]`, \"g\");\n\n  let index = d => String(indexes.get(d));\n\n  return {\n    minusSign: minusSign,\n    plusSign: plusSign,\n    decimal: decimal,\n    group: group,\n    literals: literals,\n    numeral: numeral,\n    index: index\n  };\n}\n\nfunction $6c7bd7858deea686$var$replaceAll(str, find, replace) {\n  // @ts-ignore\n  if (str.replaceAll) // @ts-ignore\n    return str.replaceAll(find, replace);\n  return str.split(find).join(replace);\n}\n\nfunction $6c7bd7858deea686$var$escapeRegex(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\nexport { $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 as NumberFormatter, $6c7bd7858deea686$export$cd11ab140839f11d as NumberParser };","map":{"version":3,"sources":["packages/@internationalized/number/src/index.ts","packages/@internationalized/number/src/NumberFormatter.ts","packages/@internationalized/number/src/NumberParser.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {NumberFormatOptions} from './NumberFormatter';\n\nexport {NumberFormatter} from './NumberFormatter';\nexport {NumberParser} from './NumberParser';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.NumberFormat>();\n\nlet supportsSignDisplay = false;\ntry {\n  // @ts-ignore\n  supportsSignDisplay = (new Intl.NumberFormat('de-DE', {signDisplay: 'exceptZero'})).resolvedOptions().signDisplay === 'exceptZero';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nlet supportsUnit = false;\ntry {\n  // @ts-ignore\n  supportsUnit = (new Intl.NumberFormat('de-DE', {style: 'unit', unit: 'degree'})).resolvedOptions().style === 'unit';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nconst UNITS = {\n  degree: {\n    narrow: {\n      default: '°',\n      'ja-JP': ' 度',\n      'zh-TW': '度',\n      'sl-SI': ' °'\n      // Arabic?? But Safari already doesn't use Arabic digits so might be ok...\n      // https://bugs.webkit.org/show_bug.cgi?id=218139\n    }\n  }\n};\n\nexport interface NumberFormatOptions extends Intl.NumberFormatOptions {\n  /** Overrides default numbering system for the current locale. */\n  numberingSystem?: string\n}\n\ninterface NumberRangeFormatPart extends Intl.NumberFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/**\n * A wrapper around Intl.NumberFormat providing additional options, polyfills, and caching for performance.\n */\nexport class NumberFormatter implements Intl.NumberFormat {\n  private numberFormatter: Intl.NumberFormat;\n  private options: NumberFormatOptions;\n\n  constructor(locale: string, options: NumberFormatOptions = {}) {\n    this.numberFormatter = getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a number value as a string, according to the locale and options provided to the constructor. */\n  format(value: number): string {\n    let res = '';\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      res = numberFormatSignDisplayPolyfill(this.numberFormatter, this.options.signDisplay, value);\n    } else {\n      res = this.numberFormatter.format(value);\n    }\n\n    if (this.options.style === 'unit' && !supportsUnit) {\n      let {unit, unitDisplay = 'short', locale} = this.resolvedOptions();\n      let values = UNITS[unit]?.[unitDisplay];\n      res += values[locale] || values.default;\n    }\n\n    return res;\n  }\n\n  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n  formatToParts(value: number): Intl.NumberFormatPart[] {\n    // TODO: implement signDisplay for formatToParts\n    // @ts-ignore\n    return this.numberFormatter.formatToParts(value);\n  }\n\n  /** Formats a number range as a string. */\n  formatRange(start: number, end: number): string {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.format(start)} – ${this.format(end)}`;\n  }\n\n  /** Formats a number range as an array of parts. */\n  formatRangeToParts(start: number, end: number): NumberRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.numberFormatter.formatToParts(start);\n    let endParts = this.numberFormatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as NumberRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as NumberRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): Intl.ResolvedNumberFormatOptions {\n    let options = this.numberFormatter.resolvedOptions();\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      options = {...options, signDisplay: this.options.signDisplay};\n    }\n\n    if (!supportsUnit && this.options.style === 'unit') {\n      options = {...options, style: 'unit', unit: this.options.unit, unitDisplay: this.options.unitDisplay};\n    }\n\n    return options;\n  }\n}\n\nfunction getCachedNumberFormatter(locale: string, options: NumberFormatOptions = {}): Intl.NumberFormat {\n  let {numberingSystem} = options;\n  if (numberingSystem && locale.indexOf('-u-nu-') === -1) {\n    locale = `${locale}-u-nu-${numberingSystem}`;\n  }\n\n  if (options.style === 'unit' && !supportsUnit) {\n    let {unit, unitDisplay = 'short'} = options;\n    if (!unit) {\n      throw new Error('unit option must be provided with style: \"unit\"');\n    }\n    if (!UNITS[unit]?.[unitDisplay]) {\n      throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n    }\n    options = {...options, style: 'decimal'};\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\n/** @private - exported for tests */\nexport function numberFormatSignDisplayPolyfill(numberFormat: Intl.NumberFormat, signDisplay: string, num: number) {\n  if (signDisplay === 'auto') {\n    return numberFormat.format(num);\n  } else if (signDisplay === 'never') {\n    return numberFormat.format(Math.abs(num));\n  } else {\n    let needsPositiveSign = false;\n    if (signDisplay === 'always') {\n      needsPositiveSign = num > 0 || Object.is(num, 0);\n    } else if (signDisplay === 'exceptZero') {\n      if (Object.is(num, -0) || Object.is(num, 0)) {\n        num = Math.abs(num);\n      } else {\n        needsPositiveSign = num > 0;\n      }\n    }\n\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num);\n      // ignore RTL/LTR marker character\n      let minus = negative.replace(noSign, '').replace(/\\u200e|\\u061C/, '');\n      if ([...minus].length !== 1) {\n        console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');\n      }\n      let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);\n      return positive;\n    } else {\n      return numberFormat.format(num);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\ninterface Symbols {\n  minusSign: string,\n  plusSign: string,\n  decimal: string,\n  group: string,\n  literals: RegExp,\n  numeral: RegExp,\n  index: (v: string) => string\n}\n\nconst CURRENCY_SIGN_REGEX = new RegExp('^.*\\\\(.*\\\\).*$');\nconst NUMBERING_SYSTEMS = ['latn', 'arab', 'hanidec'];\n\n/**\n * A NumberParser can be used to perform locale-aware parsing of numbers from Unicode strings,\n * as well as validation of partial user input. It automatically detects the numbering system\n * used in the input, and supports parsing decimals, percentages, currency values, and units\n * according to the locale.\n */\nexport class NumberParser {\n  private locale: string;\n  private options: Intl.NumberFormatOptions;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.locale = locale;\n    this.options = options;\n  }\n\n  /**\n   * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n   */\n  parse(value: string): number {\n    return getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n\n  /**\n   * Returns whether the given string could potentially be a valid number. This should be used to\n   * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n   * of the minus/plus sign characters can be checked.\n   */\n  isValidPartialNumber(value: string, minValue?: number, maxValue?: number): boolean {\n    return getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n\n  /**\n   * Returns a numbering system for which the given string is valid in the current locale.\n   * If no numbering system could be detected, the default numbering system for the current\n   * locale is returned.\n   */\n  getNumberingSystem(value: string): string {\n    return getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n}\n\nconst numberParserCache = new Map<string, NumberParserImpl>();\nfunction getNumberParserImpl(locale: string, options: Intl.NumberFormatOptions, value: string) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = getCachedNumberParser(locale, options);\n\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of NUMBERING_SYSTEMS) {\n      if (numberingSystem !== defaultParser.options.numberingSystem) {\n        let parser = getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);\n        if (parser.isValidPartialNumber(value)) {\n          return parser;\n        }\n      }\n    }\n  }\n\n  return defaultParser;\n}\n\nfunction getCachedNumberParser(locale: string, options: Intl.NumberFormatOptions) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  let parser = numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new NumberParserImpl(locale, options);\n    numberParserCache.set(cacheKey, parser);\n  }\n\n  return parser;\n}\n\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass NumberParserImpl {\n  formatter: Intl.NumberFormat;\n  options: Intl.ResolvedNumberFormatOptions;\n  symbols: Symbols;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = getSymbols(this.formatter, this.options, options);\n  }\n\n  parse(value: string) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value);\n\n    // Remove group characters, and replace decimal points and numerals with ASCII values.\n    fullySanitizedValue = replaceAll(fullySanitizedValue, this.symbols.group, '')\n      .replace(this.symbols.decimal, '.')\n      .replace(this.symbols.minusSign, '-')\n      .replace(this.symbols.numeral, this.symbols.index);\n\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) {\n      return NaN;\n    }\n\n    // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n    if (this.options.currencySign === 'accounting' && CURRENCY_SIGN_REGEX.test(value)) {\n      newValue = -1 * newValue;\n    }\n\n    // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n    if (this.options.style === 'percent') {\n      newValue /= 100;\n      // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n      newValue = +newValue.toFixed((this.options.maximumFractionDigits ?? 0) + 2);\n    }\n\n    return newValue;\n  }\n\n  sanitize(value: string) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, '');\n\n    // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n    value = value.replace('-', this.symbols.minusSign);\n\n    // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n    if (this.options.numberingSystem === 'arab') {\n      value = value.replace(',', this.symbols.decimal);\n      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      value = replaceAll(value, '.', this.symbols.group);\n    }\n\n    // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n    if (this.options.locale === 'fr-FR') {\n      value = replaceAll(value, '.', String.fromCharCode(8239));\n    }\n\n    return value;\n  }\n\n  isValidPartialNumber(value: string, minValue: number = -Infinity, maxValue: number = Infinity): boolean {\n    value = this.sanitize(value);\n\n    // Remove minus or plus sign, which must be at the start of the string.\n    if (value.startsWith(this.symbols.minusSign) && minValue < 0) {\n      value = value.slice(this.symbols.minusSign.length);\n    } else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) {\n      value = value.slice(this.symbols.plusSign.length);\n    }\n\n    // Numbers cannot start with a group separator\n    if (value.startsWith(this.symbols.group)) {\n      return false;\n    }\n\n    // Remove numerals, groups, and decimals\n    value = replaceAll(value, this.symbols.group, '')\n      .replace(this.symbols.numeral, '')\n      .replace(this.symbols.decimal, '');\n\n    // The number is valid if there are no remaining characters\n    return value.length === 0;\n  }\n}\n\nconst nonLiteralParts = new Set(['decimal', 'fraction', 'integer', 'minusSign', 'plusSign', 'group']);\n\nfunction getSymbols(formatter: Intl.NumberFormat, intlOptions: Intl.ResolvedNumberFormatOptions, originalOptions: Intl.NumberFormatOptions): Symbols {\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  let allParts = formatter.formatToParts(-10000.111);\n  let posAllParts = formatter.formatToParts(10000.111);\n  let singularParts = formatter.formatToParts(1);\n\n  let minusSign = allParts.find(p => p.type === 'minusSign')?.value ?? '-';\n  let plusSign = posAllParts.find(p => p.type === 'plusSign')?.value;\n\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n  if (!plusSign && (originalOptions?.signDisplay === 'exceptZero' || originalOptions?.signDisplay === 'always')) {\n    plusSign = '+';\n  }\n\n  let decimal = allParts.find(p => p.type === 'decimal')?.value;\n  let group = allParts.find(p => p.type === 'group')?.value;\n\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  let pluralLiterals = allParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let singularLiterals = singularParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let sortedLiterals = [...new Set([...singularLiterals, ...pluralLiterals])].sort((a, b) => b.length - a.length);\n  let literals = sortedLiterals.length === 0 ? \n      new RegExp('[\\\\p{White_Space}]', 'gu') :\n      new RegExp(`${sortedLiterals.join('|')}|[\\\\p{White_Space}]`, 'gu');\n\n  // These are for replacing non-latn characters with the latn equivalent\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {useGrouping: false}).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n  let index = d => String(indexes.get(d));\n\n  return {minusSign, plusSign, decimal, group, literals, numeral, index};\n}\n\nfunction replaceAll(str: string, find: string, replace: string) {\n  // @ts-ignore\n  if (str.replaceAll) {\n    // @ts-ignore\n    return str.replaceAll(find, replace);\n  }\n\n  return str.split(find).join(replace);\n}\n\nfunction escapeRegex(string: string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n"]},"metadata":{},"sourceType":"module"}